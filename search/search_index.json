{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Project Mu \u00b6 Project Mu is a modular adaptation of TianoCore's edk2 tuned for building modern devices using a scalable, maintainable, and reusable pattern. Mu is built around the idea that shipping and maintaining a UEFI product is an ongoing collaboration between numerous partners. For too long the industry has built products using a \"forking\" model combined with copy/paste/rename and with each new product the maintenance burden grows to such a level that updates are near impossible due to cost and risk. Project Mu also tries to address the complex business relationships and legal challenges facing partners today. To build most products it often requires both closed-source, proprietary assets as well as open source and industry standard code. The distributed build system and multi-repository design allow product teams to keep code separate and connected to their original source while respecting legal and business boundaries. Project Mu originated from building modern Windows PCs but its patterns and design allow it to be scaled down or up for whatever the final product's intent. IoT, Server, PC, or any other form factor should be able to leverage the content. Primary Goals \u00b6 Initially, this project will focus on two central goals. Share our active code tree to both solicit feedback and entice partners to collaborate \u00b6 Project Mu is an active project. This is not a side project, mirror, clone, or example. This is the same code used today on many of Microsoft's 1 st party devices and it will be kept current because it must be to continue to enable shipping products. Promote, evangelize, and support an industry shift to a more collaborative environment so we all can build and maintain products with lower costs and higher quality \u00b6 Today's open source projects although extremely valuable are very resource intensive to interact with. This friction leads to major industry players avoiding public interaction thus diminishing the overall community\u2019s value. The modern era of open source projects has incorporated new tools and procedures to lower this friction and it is our goal to leverage those tools. GitHub provides issue tracking, Pull Requests, Gated builds, tracked/required web-based code reviews, and CI/CD (Continuous builds and testing). It is our belief that by leveraging and extending this automation and workflow we can lower the friction and foster a safe place for all contributors to work. Guiding Principles \u00b6 Less is More * Be open to change / flexible - Keep learning. If it was easy this would have been solved before Design for code reuse Leverage tools / invest in automation Navigation \u00b6 Have a look around this site to see what is Project Mu. Start by reviewing the details of the community and our process. See how to interact and get involved, why it's different, how to work within or extend it, as well as where everything is located. Finally, explore the Developer Docs if you want to review more in-depth details. Having trouble? \u00b6 Skim the FAQ Road map \u00b6 Days \u00b6 Engaging with existing partners to collect feedback Pull Request documentation & gates Automated builds & compile tests of all repos Developer documentation on building & testing Determine communication venue (e.g. email list, Slack, Teams, ...), currently testing MS Teams Weeks \u00b6 Update to latest, stable EDK2 release Automated build & tests on a public platform Automated build & tests on Surface devices Feature documentation (Process defined. Docs development ongoing) Draft process for security collaboration with partners & Tianocore Documentation on Governance Announce project & evangelize Months \u00b6 Add support for partner-requested compilers and Containerized builds Join Us \u00b6 Contact info and additional methods to collaborate coming soon. Code of conduct \u00b6 This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments. Reporting Issues \u00b6 Short answer: Open a github issue. More details: Contributing Contributing \u00b6 Short answer: Open a pull request. More details: Contributing License \u00b6 Refer to License Documentation Build Information Version: 0.7.0 Build Time: 2019-04-23 21:16","title":"Home"},{"location":"#welcome-to-project-mu","text":"Project Mu is a modular adaptation of TianoCore's edk2 tuned for building modern devices using a scalable, maintainable, and reusable pattern. Mu is built around the idea that shipping and maintaining a UEFI product is an ongoing collaboration between numerous partners. For too long the industry has built products using a \"forking\" model combined with copy/paste/rename and with each new product the maintenance burden grows to such a level that updates are near impossible due to cost and risk. Project Mu also tries to address the complex business relationships and legal challenges facing partners today. To build most products it often requires both closed-source, proprietary assets as well as open source and industry standard code. The distributed build system and multi-repository design allow product teams to keep code separate and connected to their original source while respecting legal and business boundaries. Project Mu originated from building modern Windows PCs but its patterns and design allow it to be scaled down or up for whatever the final product's intent. IoT, Server, PC, or any other form factor should be able to leverage the content.","title":"Welcome to Project Mu"},{"location":"#primary-goals","text":"Initially, this project will focus on two central goals.","title":"Primary Goals"},{"location":"#share-our-active-code-tree-to-both-solicit-feedback-and-entice-partners-to-collaborate","text":"Project Mu is an active project. This is not a side project, mirror, clone, or example. This is the same code used today on many of Microsoft's 1 st party devices and it will be kept current because it must be to continue to enable shipping products.","title":"Share our active code tree to both solicit feedback and entice partners to collaborate"},{"location":"#promote-evangelize-and-support-an-industry-shift-to-a-more-collaborative-environment-so-we-all-can-build-and-maintain-products-with-lower-costs-and-higher-quality","text":"Today's open source projects although extremely valuable are very resource intensive to interact with. This friction leads to major industry players avoiding public interaction thus diminishing the overall community\u2019s value. The modern era of open source projects has incorporated new tools and procedures to lower this friction and it is our goal to leverage those tools. GitHub provides issue tracking, Pull Requests, Gated builds, tracked/required web-based code reviews, and CI/CD (Continuous builds and testing). It is our belief that by leveraging and extending this automation and workflow we can lower the friction and foster a safe place for all contributors to work.","title":"Promote, evangelize, and support an industry shift to a more collaborative environment so we all can build and maintain products with lower costs and higher quality"},{"location":"#guiding-principles","text":"Less is More * Be open to change / flexible - Keep learning. If it was easy this would have been solved before Design for code reuse Leverage tools / invest in automation","title":"Guiding Principles"},{"location":"#navigation","text":"Have a look around this site to see what is Project Mu. Start by reviewing the details of the community and our process. See how to interact and get involved, why it's different, how to work within or extend it, as well as where everything is located. Finally, explore the Developer Docs if you want to review more in-depth details.","title":"Navigation"},{"location":"#having-trouble","text":"Skim the FAQ","title":"Having trouble?"},{"location":"#road-map","text":"","title":"Road map"},{"location":"#days","text":"Engaging with existing partners to collect feedback Pull Request documentation & gates Automated builds & compile tests of all repos Developer documentation on building & testing Determine communication venue (e.g. email list, Slack, Teams, ...), currently testing MS Teams","title":"Days"},{"location":"#weeks","text":"Update to latest, stable EDK2 release Automated build & tests on a public platform Automated build & tests on Surface devices Feature documentation (Process defined. Docs development ongoing) Draft process for security collaboration with partners & Tianocore Documentation on Governance Announce project & evangelize","title":"Weeks"},{"location":"#months","text":"Add support for partner-requested compilers and Containerized builds","title":"Months"},{"location":"#join-us","text":"Contact info and additional methods to collaborate coming soon.","title":"Join Us"},{"location":"#code-of-conduct","text":"This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.","title":"Code of conduct"},{"location":"#reporting-issues","text":"Short answer: Open a github issue. More details: Contributing","title":"Reporting Issues"},{"location":"#contributing","text":"Short answer: Open a pull request. More details: Contributing","title":"Contributing"},{"location":"#license","text":"Refer to License Documentation Build Information Version: 0.7.0 Build Time: 2019-04-23 21:16","title":"License"},{"location":"faq/","text":"FAQ \u00b6 Purpose/Goals \u00b6 How is this related to TianoCore? \u00b6 As you can probably tell, Project Mu is based on TianoCore . It represents a variant of TianoCore that was customized within Microsoft for scaling and maintainability. It's not exactly a staging branch for TianoCore, as there are some changes that may not have application within or meet the explicit goals of that project, but it is a place where features and changes can be publicly featured and discussed. So, is this a fork? \u00b6 Not entirely. It is our goal to continue to treat TianoCore as a true upstream. Our release branches will always be based on the latest stable TianoCore release, and we will always try to PR viable fixes and features into the TianoCore project. What is it? Where is it going? \u00b6 Project Mu is a product of the Microsoft Core UEFI team and is the basis for the system firmware within a number of Microsoft products. It will continue to be maintained to reflect the FW practices and features leveraged for the best experience with Windows and other Microsoft products. A secondary purpose is to engage with the community, both in TianoCore and the industry at large. We hope that Project Mu serves as a concrete example for discussing different approaches to managing the challenges faced by the UEFI ecosystem. Content/Structure \u00b6 Is this really following \"Less is More\"? \u00b6 Yes. The idea is lowering the entanglement of code, lowering the coupling, and allowing the product to pick and choose the code it needs. This means when building any given product, you don't need all the Project Mu code. Why are there so many repos? \u00b6 Project Mu makes liberal use of multiple repositories due to the mixture of requirements in the UEFI ecosystem. Some repos are split for technical reasons, some for organizational, and some for legal. For details, see \"Repo Philosophy\" in What and Why .","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"faq/#purposegoals","text":"","title":"Purpose/Goals"},{"location":"faq/#how-is-this-related-to-tianocore","text":"As you can probably tell, Project Mu is based on TianoCore . It represents a variant of TianoCore that was customized within Microsoft for scaling and maintainability. It's not exactly a staging branch for TianoCore, as there are some changes that may not have application within or meet the explicit goals of that project, but it is a place where features and changes can be publicly featured and discussed.","title":"How is this related to TianoCore?"},{"location":"faq/#so-is-this-a-fork","text":"Not entirely. It is our goal to continue to treat TianoCore as a true upstream. Our release branches will always be based on the latest stable TianoCore release, and we will always try to PR viable fixes and features into the TianoCore project.","title":"So, is this a fork?"},{"location":"faq/#what-is-it-where-is-it-going","text":"Project Mu is a product of the Microsoft Core UEFI team and is the basis for the system firmware within a number of Microsoft products. It will continue to be maintained to reflect the FW practices and features leveraged for the best experience with Windows and other Microsoft products. A secondary purpose is to engage with the community, both in TianoCore and the industry at large. We hope that Project Mu serves as a concrete example for discussing different approaches to managing the challenges faced by the UEFI ecosystem.","title":"What is it? Where is it going?"},{"location":"faq/#contentstructure","text":"","title":"Content/Structure"},{"location":"faq/#is-this-really-following-less-is-more","text":"Yes. The idea is lowering the entanglement of code, lowering the coupling, and allowing the product to pick and choose the code it needs. This means when building any given product, you don't need all the Project Mu code.","title":"Is this really following \"Less is More\"?"},{"location":"faq/#why-are-there-so-many-repos","text":"Project Mu makes liberal use of multiple repositories due to the mixture of requirements in the UEFI ecosystem. Some repos are split for technical reasons, some for organizational, and some for legal. For details, see \"Repo Philosophy\" in What and Why .","title":"Why are there so many repos?"},{"location":"license/","text":"Licensing for Project Mu \u00b6 Project Mu has numerous repositories. Each of these can have different licenses depending on the content and partner but in general we want OSS friendly licenses. For this documentation we use the following license. License \u00b6 BSD 2-Clause License Copyright \u00a9 Microsoft All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"license/#licensing-for-project-mu","text":"Project Mu has numerous repositories. Each of these can have different licenses depending on the content and partner but in general we want OSS friendly licenses. For this documentation we use the following license.","title":"Licensing for Project Mu"},{"location":"license/#license","text":"BSD 2-Clause License Copyright \u00a9 Microsoft All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"CodeDevelopment/compile/","text":"How to Build/Compile \u00b6 The repository/product/project should describe any unique steps required. Project Mu currently supports two methods of building. Those will be described here to encourage pattern/code reuse and limit the required repository specific documentation. Compile Testing aka Mu_Build \u00b6 Mu_Build is a framework for running a battery of tests against a single Mu repository (and its dependencies). A plugin model is used for adding additional tests. Today one such plugin is a basic compile test. The repository maintainer may add additional tests such as linters, etc. It is often desirable to compile test code and at times there might not be a product to test with. This is also how the Pull Requests gates are implemented and enforced. Note This also runs the other static code tests so it does more than compile. Assumption is that the repository to compile has been cloned to your filesystem and is in the state ready to compile. Open cmd prompt at workspace root Suggestion: Activate your python virtual environment Install or update Python dependencies using pip Run Mu_Build to: Clone code dependencies Download binary dependencies Statically test code Compile test code mu_build -c <Mu Repo Build Config File> -p <1st Mu Pkg Build Config File> <2nd Mu Pkg Build Config File...> Open TestResults.xml for results Open log files to debug any errors Project Build aka PlatformBuild \u00b6 Info There is currently no example in Project Mu. An example platform is in the works! When you actually want to compile for a platform that will create a firmware binary which can be flashed and execute on a platform this process is necessary. open cmd prompt at workspace root Suggestion: Activate your python virtual environment Install or update Python dependencies using pip Locate the PlatformBuild.py file (generally in the platform build dir) Run PlatformBuild.py Other features \u00b6 PlatformBuild.py leverages a common UefiBuild python component. This component provides a common set of features. The UefiBuild component documentation is published from the mu_pip_environment repository but here are a few of the common features developers find useful. Control the target of the build. Pass Target=RELEASE Build a single module: BuildModule=MdePkg/ModuleToBuild.inf Build with reporting: Single report type BUILDREPORTING=TRUE BUILDREPORT_TYPES=\"PCD\" Change report file BUILDREPORT_FILE=filename.txt default is BUILD_REPORT.TXT All report types. BUILDREPORTING=TRUE BUILDREPORT_TYPES=\"PCD DEPEX FLASH BUILD_FLAGS LIBRARY\" Clean build: --clean Clean only (no compile): --cleanonly Skip some of the build steps: Skip the Edk2 build step: --skipbuild Skip pre or post build steps: --skipprebuild or --skippostbuild Change a Build variable that is used in Edk2 build process: BLD_*_DEBUG_OUTPUT_LEVEL=0x80000004 will be passed to DSC/FDF as DEBUG_OUTPUT_LEVEL . These variable names and behavior are platform defined. BLD_*_<var name> is used for builds of any target type unless there is a more specific version for the given target type. BLD_DEBUG_<var name> is used for debug builds only BLD_RELEASE_<var name> is used for release builds only Using a config file. To simplify calling of PlatformBuild.py if there is a BuildConfig.conf in the root of your UEFI workspace those parameters will be used as well. The command line overrides anything from the conf file. Example BuildConfig.conf \u00b6 # Turn on full build reports BUILDREPORTING=TRUE BUILDREPORT_TYPES=\"PCD DEPEX FLASH BUILD_FLAGS LIBRARY\"","title":"Compiling"},{"location":"CodeDevelopment/compile/#how-to-buildcompile","text":"The repository/product/project should describe any unique steps required. Project Mu currently supports two methods of building. Those will be described here to encourage pattern/code reuse and limit the required repository specific documentation.","title":"How to Build/Compile"},{"location":"CodeDevelopment/compile/#compile-testing-aka-mu_build","text":"Mu_Build is a framework for running a battery of tests against a single Mu repository (and its dependencies). A plugin model is used for adding additional tests. Today one such plugin is a basic compile test. The repository maintainer may add additional tests such as linters, etc. It is often desirable to compile test code and at times there might not be a product to test with. This is also how the Pull Requests gates are implemented and enforced. Note This also runs the other static code tests so it does more than compile. Assumption is that the repository to compile has been cloned to your filesystem and is in the state ready to compile. Open cmd prompt at workspace root Suggestion: Activate your python virtual environment Install or update Python dependencies using pip Run Mu_Build to: Clone code dependencies Download binary dependencies Statically test code Compile test code mu_build -c <Mu Repo Build Config File> -p <1st Mu Pkg Build Config File> <2nd Mu Pkg Build Config File...> Open TestResults.xml for results Open log files to debug any errors","title":"Compile Testing aka Mu_Build"},{"location":"CodeDevelopment/compile/#project-build-aka-platformbuild","text":"Info There is currently no example in Project Mu. An example platform is in the works! When you actually want to compile for a platform that will create a firmware binary which can be flashed and execute on a platform this process is necessary. open cmd prompt at workspace root Suggestion: Activate your python virtual environment Install or update Python dependencies using pip Locate the PlatformBuild.py file (generally in the platform build dir) Run PlatformBuild.py","title":"Project Build aka PlatformBuild"},{"location":"CodeDevelopment/compile/#other-features","text":"PlatformBuild.py leverages a common UefiBuild python component. This component provides a common set of features. The UefiBuild component documentation is published from the mu_pip_environment repository but here are a few of the common features developers find useful. Control the target of the build. Pass Target=RELEASE Build a single module: BuildModule=MdePkg/ModuleToBuild.inf Build with reporting: Single report type BUILDREPORTING=TRUE BUILDREPORT_TYPES=\"PCD\" Change report file BUILDREPORT_FILE=filename.txt default is BUILD_REPORT.TXT All report types. BUILDREPORTING=TRUE BUILDREPORT_TYPES=\"PCD DEPEX FLASH BUILD_FLAGS LIBRARY\" Clean build: --clean Clean only (no compile): --cleanonly Skip some of the build steps: Skip the Edk2 build step: --skipbuild Skip pre or post build steps: --skipprebuild or --skippostbuild Change a Build variable that is used in Edk2 build process: BLD_*_DEBUG_OUTPUT_LEVEL=0x80000004 will be passed to DSC/FDF as DEBUG_OUTPUT_LEVEL . These variable names and behavior are platform defined. BLD_*_<var name> is used for builds of any target type unless there is a more specific version for the given target type. BLD_DEBUG_<var name> is used for debug builds only BLD_RELEASE_<var name> is used for release builds only Using a config file. To simplify calling of PlatformBuild.py if there is a BuildConfig.conf in the root of your UEFI workspace those parameters will be used as well. The command line overrides anything from the conf file.","title":"Other features"},{"location":"CodeDevelopment/compile/#example-buildconfigconf","text":"# Turn on full build reports BUILDREPORTING=TRUE BUILDREPORT_TYPES=\"PCD DEPEX FLASH BUILD_FLAGS LIBRARY\"","title":"Example BuildConfig.conf"},{"location":"CodeDevelopment/overview/","text":"Code Development Overview \u00b6 Tools \u00b6 First you will need to setup your UEFI development environment. Project Mu leverages most of the tools from TianoCore EDK2 . We have streamlined the process for the tool chains and systems we use but our project's goals are to support various tool chains and development environments. For the best experience or for those new to UEFI and Project Mu we have provided guidance in our prerequisites page. Code \u00b6 Next you will need to clone a repository or set of repositories to work on. For core work (Project Mu Repos) you can clone the desired repo, make your changes, run CI builds, run your tests, and submit a PR. For platform work (outside of Project Mu) you will need to clone the platform repository and then follow the platform setup process. See details on the compile page for more information about CI builds and how to compile a package or platform. Code should follow best practices. We are working to add some best practices on the requirements page. We also attempt to enforce these best practices thru our CI build process. Tests \u00b6 One area of focus for Project Mu is on testing. Firmware testing has traditionally been hard and very manual. We hope to describe techniques and provide resources to make this easier and more automated. Testing needs to be part of the code development process. Check out the testing page for more details.","title":"Overview"},{"location":"CodeDevelopment/overview/#code-development-overview","text":"","title":"Code Development Overview"},{"location":"CodeDevelopment/overview/#tools","text":"First you will need to setup your UEFI development environment. Project Mu leverages most of the tools from TianoCore EDK2 . We have streamlined the process for the tool chains and systems we use but our project's goals are to support various tool chains and development environments. For the best experience or for those new to UEFI and Project Mu we have provided guidance in our prerequisites page.","title":"Tools"},{"location":"CodeDevelopment/overview/#code","text":"Next you will need to clone a repository or set of repositories to work on. For core work (Project Mu Repos) you can clone the desired repo, make your changes, run CI builds, run your tests, and submit a PR. For platform work (outside of Project Mu) you will need to clone the platform repository and then follow the platform setup process. See details on the compile page for more information about CI builds and how to compile a package or platform. Code should follow best practices. We are working to add some best practices on the requirements page. We also attempt to enforce these best practices thru our CI build process.","title":"Code"},{"location":"CodeDevelopment/overview/#tests","text":"One area of focus for Project Mu is on testing. Firmware testing has traditionally been hard and very manual. We hope to describe techniques and provide resources to make this easier and more automated. Testing needs to be part of the code development process. Check out the testing page for more details.","title":"Tests"},{"location":"CodeDevelopment/prerequisites/","text":"Prerequisites for building Code \u00b6 Generally there are a set of tools required on the platform. Project Mu tries to minimize the number of global tools but there are a few. There could be more depending on the repository/product/platform you are building but this should get you started. If the repo requires other tools those should be documented within the repo. The tools also vary by Operating System and Compiler choice. Project Mu will document what is currently supported but the expectation is that between Project Mu and TianoCore Edk2 you could use any of those tool sets. Windows \u00b6 Python \u00b6 Download latest Python from https://www.python.org/downloads https://www.python.org/ftp/python/3.7.2/python-3.7.2-amd64.exe It is recommended you use the following options when installing python: include pip support include test support Git \u00b6 Download latest Git For Windows from https://git-scm.com/download/win https://github.com/git-for-windows/git/releases/download/v2.20.1.windows.1/Git-2.20.1-64-bit.exe It is recommended you use the following options: Checkout as is, commit as is. Native Channel support (this will help in corp environments) Check the box to \"Enable Git Credential Manager\" Visual Studio 2017 \u00b6 Download latest version of VS build Tools to c:\\TEMP https://aka.ms/vs/15/release/vs_buildtools.exe Install from cmd line with required features (this set will change overtime). C:\\TEMP\\vs_buildtools.exe --quiet --wait --norestart --nocache --installPath C:\\BuildTools --add Microsoft.VisualStudio.Component.VC.CoreBuildTools --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.Component.Windows10SDK.17134 --add Microsoft.VisualStudio.Component.VC.Tools.ARM --add Microsoft.VisualStudio.Component.VC.Tools.ARM64 See component list here for more options. https://docs.microsoft.com/en-us/visualstudio/install/workload-component-id-vs-build-tools?view=vs-2017 Optional - Create an Omnicache \u00b6 An Omnicache is a Project Mu tool that leverages git features to speed up git update operations. This helps speed up git operations if you have multiple workspaces by using the git \"--reference\" feature. Omnicache is documented in the Mu Pip Environment section of this site. Windows Subsystem For Linux (WSL) \u00b6 Coming soon All Operating Systems - Python Virtual Environment and Mu Build Tools \u00b6 In all Operating Systems environments the Project Mu Build tools are needed. Python virtual environments are strongly suggested especially when doing development in multiple workspaces. Each workspace should have its own virtual environment as to not modify the global system state. Since Project Mu uses Pip modules this allows each workspace to keep the versions in sync with the workspace requirements. More info on Python Virtual Environments: https://docs.python.org/3/library/venv.html Workspace Virtual Environment Setup Process \u00b6 Do this one time per workspace Open Cmd Prompt in the root directory where you want to store your virtual environment run python cmd python -m venv <your virtual env name> Activate it for your session. Activate Virtual Environment \u00b6 Do this each time you open a new command window to build your workspace. Open Cmd Prompt run activate script - for windows cmd prompt (cmd.exe) do this <your virtual env name>\\Script\\activate cd into your workspace directory Update/Install your python pip requirements. This is generally at the workspace root. pip install --upgrade -r requirements.txt Do dev work and run your builds! More About Project Mu tools using Pip \u00b6 Project Mu currently has 3 pip modules mu_python_library \u00b6 UEFI, Edk2, Acpi, and TPM common library functions. python -m pip install --upgrade mu_python_library mu_environment \u00b6 Self Describing Environment (SDE) code which is used to organize and coordinate UEFI builds. This is the Project Mu Build system, plugin manager, edk2 build wrapper, logging, etc. python -m pip install --upgrade mu_environment mu_build \u00b6 CI and package test scripts. Supports compiling as well as running other build test plugins. python -m pip install --upgrade mu_build","title":"Tools and Prerequisite"},{"location":"CodeDevelopment/prerequisites/#prerequisites-for-building-code","text":"Generally there are a set of tools required on the platform. Project Mu tries to minimize the number of global tools but there are a few. There could be more depending on the repository/product/platform you are building but this should get you started. If the repo requires other tools those should be documented within the repo. The tools also vary by Operating System and Compiler choice. Project Mu will document what is currently supported but the expectation is that between Project Mu and TianoCore Edk2 you could use any of those tool sets.","title":"Prerequisites for building Code"},{"location":"CodeDevelopment/prerequisites/#windows","text":"","title":"Windows"},{"location":"CodeDevelopment/prerequisites/#python","text":"Download latest Python from https://www.python.org/downloads https://www.python.org/ftp/python/3.7.2/python-3.7.2-amd64.exe It is recommended you use the following options when installing python: include pip support include test support","title":"Python"},{"location":"CodeDevelopment/prerequisites/#git","text":"Download latest Git For Windows from https://git-scm.com/download/win https://github.com/git-for-windows/git/releases/download/v2.20.1.windows.1/Git-2.20.1-64-bit.exe It is recommended you use the following options: Checkout as is, commit as is. Native Channel support (this will help in corp environments) Check the box to \"Enable Git Credential Manager\"","title":"Git"},{"location":"CodeDevelopment/prerequisites/#visual-studio-2017","text":"Download latest version of VS build Tools to c:\\TEMP https://aka.ms/vs/15/release/vs_buildtools.exe Install from cmd line with required features (this set will change overtime). C:\\TEMP\\vs_buildtools.exe --quiet --wait --norestart --nocache --installPath C:\\BuildTools --add Microsoft.VisualStudio.Component.VC.CoreBuildTools --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.Component.Windows10SDK.17134 --add Microsoft.VisualStudio.Component.VC.Tools.ARM --add Microsoft.VisualStudio.Component.VC.Tools.ARM64 See component list here for more options. https://docs.microsoft.com/en-us/visualstudio/install/workload-component-id-vs-build-tools?view=vs-2017","title":"Visual Studio 2017"},{"location":"CodeDevelopment/prerequisites/#optional-create-an-omnicache","text":"An Omnicache is a Project Mu tool that leverages git features to speed up git update operations. This helps speed up git operations if you have multiple workspaces by using the git \"--reference\" feature. Omnicache is documented in the Mu Pip Environment section of this site.","title":"Optional - Create an Omnicache"},{"location":"CodeDevelopment/prerequisites/#windows-subsystem-for-linux-wsl","text":"Coming soon","title":"Windows Subsystem For Linux (WSL)"},{"location":"CodeDevelopment/prerequisites/#all-operating-systems-python-virtual-environment-and-mu-build-tools","text":"In all Operating Systems environments the Project Mu Build tools are needed. Python virtual environments are strongly suggested especially when doing development in multiple workspaces. Each workspace should have its own virtual environment as to not modify the global system state. Since Project Mu uses Pip modules this allows each workspace to keep the versions in sync with the workspace requirements. More info on Python Virtual Environments: https://docs.python.org/3/library/venv.html","title":"All Operating Systems - Python Virtual Environment and Mu Build Tools"},{"location":"CodeDevelopment/prerequisites/#workspace-virtual-environment-setup-process","text":"Do this one time per workspace Open Cmd Prompt in the root directory where you want to store your virtual environment run python cmd python -m venv <your virtual env name> Activate it for your session.","title":"Workspace Virtual Environment Setup Process"},{"location":"CodeDevelopment/prerequisites/#activate-virtual-environment","text":"Do this each time you open a new command window to build your workspace. Open Cmd Prompt run activate script - for windows cmd prompt (cmd.exe) do this <your virtual env name>\\Script\\activate cd into your workspace directory Update/Install your python pip requirements. This is generally at the workspace root. pip install --upgrade -r requirements.txt Do dev work and run your builds!","title":"Activate Virtual Environment"},{"location":"CodeDevelopment/prerequisites/#more-about-project-mu-tools-using-pip","text":"Project Mu currently has 3 pip modules","title":"More About Project Mu tools using Pip"},{"location":"CodeDevelopment/prerequisites/#mu_python_library","text":"UEFI, Edk2, Acpi, and TPM common library functions. python -m pip install --upgrade mu_python_library","title":"mu_python_library"},{"location":"CodeDevelopment/prerequisites/#mu_environment","text":"Self Describing Environment (SDE) code which is used to organize and coordinate UEFI builds. This is the Project Mu Build system, plugin manager, edk2 build wrapper, logging, etc. python -m pip install --upgrade mu_environment","title":"mu_environment"},{"location":"CodeDevelopment/prerequisites/#mu_build","text":"CI and package test scripts. Supports compiling as well as running other build test plugins. python -m pip install --upgrade mu_build","title":"mu_build"},{"location":"CodeDevelopment/requirements/","text":"Requirements for contributing Source Code \u00b6 Basics \u00b6 Make sure it follows the package, repo, and codebase rules Make sure it builds Write a unit test for it. Test positive cases as well as negative cases. Make sure it has docs. Even a minimal readme.md will get collected and added to the docs. Make sure it has only valid characters encoded (often copy paste from Microsoft Word docs or the internet will lead to invalid characters) If it is a small change/tweak to existing code that originates outside of Project Mu please mark it with //MUCHANGE Uefi Package \u00b6 UEFI Components \u00b6 All new modules must be listed in their containing package DSC in the components section All modules must follow the dependency rules of their containing package All modules within common layers should avoid silicon or architecture dependencies. Use existing libraries and functionality when possible Build out minimal required abstraction to allow other silicon or architectures to leverage common capabilities Public Header files \u00b6 Don't include other header files Don't mix public and private information in the same header file Implementation details should be contained to the instance Use \"doxygen\" style function header comments to clearly specify parameters and return results. Use a guidgen tool to define any guids For libraries: Library class should be listed in Package DEC file A NULL instance must be created that allows compiling and linking with minimal dependencies. Library Instance \u00b6 The supported module types in the INFs must be accurate. LIBRARY_CLASS: <Library Class Name>|<Module types supported by this instance> Use STATIC on each non-public function and non-public global to avoid conflicts with other modules. Use EFIAPI on all public library class functions. More info \u00b6 For general Edk2 and UEFI development additional information can be found at the TianoCore.org website.","title":"Code Requirements"},{"location":"CodeDevelopment/requirements/#requirements-for-contributing-source-code","text":"","title":"Requirements for contributing Source Code"},{"location":"CodeDevelopment/requirements/#basics","text":"Make sure it follows the package, repo, and codebase rules Make sure it builds Write a unit test for it. Test positive cases as well as negative cases. Make sure it has docs. Even a minimal readme.md will get collected and added to the docs. Make sure it has only valid characters encoded (often copy paste from Microsoft Word docs or the internet will lead to invalid characters) If it is a small change/tweak to existing code that originates outside of Project Mu please mark it with //MUCHANGE","title":"Basics"},{"location":"CodeDevelopment/requirements/#uefi-package","text":"","title":"Uefi Package"},{"location":"CodeDevelopment/requirements/#uefi-components","text":"All new modules must be listed in their containing package DSC in the components section All modules must follow the dependency rules of their containing package All modules within common layers should avoid silicon or architecture dependencies. Use existing libraries and functionality when possible Build out minimal required abstraction to allow other silicon or architectures to leverage common capabilities","title":"UEFI Components"},{"location":"CodeDevelopment/requirements/#public-header-files","text":"Don't include other header files Don't mix public and private information in the same header file Implementation details should be contained to the instance Use \"doxygen\" style function header comments to clearly specify parameters and return results. Use a guidgen tool to define any guids For libraries: Library class should be listed in Package DEC file A NULL instance must be created that allows compiling and linking with minimal dependencies.","title":"Public Header files"},{"location":"CodeDevelopment/requirements/#library-instance","text":"The supported module types in the INFs must be accurate. LIBRARY_CLASS: <Library Class Name>|<Module types supported by this instance> Use STATIC on each non-public function and non-public global to avoid conflicts with other modules. Use EFIAPI on all public library class functions.","title":"Library Instance"},{"location":"CodeDevelopment/requirements/#more-info","text":"For general Edk2 and UEFI development additional information can be found at the TianoCore.org website.","title":"More info"},{"location":"CodeDevelopment/test/","text":"Tests \u00b6 Testing firmware is hard. Lets just stop there. If you want to read on please do at your own risk. Project Mu supports a few types of testing and this page will help provide some high level info and links for more information. Static Code Tests (analysis) \u00b6 Mu_Build provides a framework for running static tests on the code base. Simple tests like character encoding are examples. In Project Mu we are working to expand this set of tests to include checking guids, checking for library classes, etc. UEFI Shell Based Unit Tests \u00b6 UEFI Shell Based Functional Tests \u00b6 UEFI Shell Based Audit Tests \u00b6 Testing Python \u00b6 Create pytest and/or python unit-test compatible tests. Make sure the python code passes the flake8 \"linter\"","title":"Testing"},{"location":"CodeDevelopment/test/#tests","text":"Testing firmware is hard. Lets just stop there. If you want to read on please do at your own risk. Project Mu supports a few types of testing and this page will help provide some high level info and links for more information.","title":"Tests"},{"location":"CodeDevelopment/test/#static-code-tests-analysis","text":"Mu_Build provides a framework for running static tests on the code base. Simple tests like character encoding are examples. In Project Mu we are working to expand this set of tests to include checking guids, checking for library classes, etc.","title":"Static Code Tests (analysis)"},{"location":"CodeDevelopment/test/#uefi-shell-based-unit-tests","text":"","title":"UEFI Shell Based Unit Tests"},{"location":"CodeDevelopment/test/#uefi-shell-based-functional-tests","text":"","title":"UEFI Shell Based Functional Tests"},{"location":"CodeDevelopment/test/#uefi-shell-based-audit-tests","text":"","title":"UEFI Shell Based Audit Tests"},{"location":"CodeDevelopment/test/#testing-python","text":"Create pytest and/or python unit-test compatible tests. Make sure the python code passes the flake8 \"linter\"","title":"Testing Python"},{"location":"DeveloperDocs/attribution/","text":"Documentation framework attribution \u00b6 A special thank you to the people and projects that helped make Project Mu Documentation possible. Projects \u00b6 Mkdocs \u00b6 https://www.mkdocs.org/ MkDocs License (BSD) Copyright \u00a9 2014, Tom Christie. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. mkdocs macros plugin \u00b6 https://github.com/fralau/mkdocs_macros_plugin MIT License Copyright (C) 2018 Laurent Franceschetti Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Material for MkDocs \u00b6 https://squidfunk.github.io/mkdocs-material/ License MIT License Copyright \u00a9 2016 - 2017 Martin Donath Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. PyMdown Extensions \u00b6 https://facelessuser.github.io/pymdown-extensions/ PyMdown Extensions The MIT License (MIT) (Except where stated below) Copyright \u00a9 2014 - 2018 Isaac Muse Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Doc Framework Attribution"},{"location":"DeveloperDocs/attribution/#documentation-framework-attribution","text":"A special thank you to the people and projects that helped make Project Mu Documentation possible.","title":"Documentation framework attribution"},{"location":"DeveloperDocs/attribution/#projects","text":"","title":"Projects"},{"location":"DeveloperDocs/attribution/#mkdocs","text":"https://www.mkdocs.org/ MkDocs License (BSD) Copyright \u00a9 2014, Tom Christie. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Mkdocs"},{"location":"DeveloperDocs/attribution/#mkdocs-macros-plugin","text":"https://github.com/fralau/mkdocs_macros_plugin MIT License Copyright (C) 2018 Laurent Franceschetti Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"mkdocs macros plugin"},{"location":"DeveloperDocs/attribution/#material-for-mkdocs","text":"https://squidfunk.github.io/mkdocs-material/ License MIT License Copyright \u00a9 2016 - 2017 Martin Donath Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Material for MkDocs"},{"location":"DeveloperDocs/attribution/#pymdown-extensions","text":"https://facelessuser.github.io/pymdown-extensions/ PyMdown Extensions The MIT License (MIT) (Except where stated below) Copyright \u00a9 2014 - 2018 Isaac Muse Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"PyMdown Extensions"},{"location":"DeveloperDocs/build_community_docs/","text":"Building Community Docs \u00b6 Info Today this process has been validated for use on Windows 10. This setup process is expected to roughly the same on other operating systems and none of the actual documentation source or tools should have any OS dependency. Get the docs repository \u00b6 First, you need to clone the project mu docs repository. git clone https://github.com/Microsoft/mu.git Install required tools \u00b6 Install python (Current suggested version is 3.7.x). Current min requirement is python 3.4+. Checkout python.org for directions. Install pip. Generally, this is done when installing python but can also be done as its own process. Details here https://pip.pypa.io/en/stable/installing/#do-i-need-to-install-pip Update pip. python -m pip install --upgrade pip Install dependencies. pip install --upgrade -r requirements.txt if wanting to use spell check Install nodejs from https://nodejs.org/en/ Install cspell npm install -g cspell Install Git on your path (Required for generating dynamic repo based content during preprocess) General Suggested documentation workflow \u00b6 open two command windows at the root of docs repository Window 1: Use to serve files locally Use mkdocs serve Any changes from the DocBuild process will be picked up and served Window 2: Use to preprocess the source repo files Run the DocBuild.py command from this window Make changes to the docs in source repos or this repo and then re-run the DocBuild.py build command Pre-process with dynamic content from source repo(s) \u00b6 Create \"repos\" folder (somewhere outside of workspace) Clone all repositories for dynamic content here Set each repo to the branch/commit that you want to document run the DocBuild.py command supplying the parameters DocBuild.py --clean --build --OutputDir docs --yml mkdocs_base.yml --RootDir ..\\repos Pre-process with no source repo(s) content \u00b6 run the DocBuild.py command supplying minimal parameters DocBuild.py --clean --build --yml mkdocs_base.yml Clean / Remove all pre-processed content \u00b6 use DocBuild.py command DocBuild.py --clean --yml <path to yml base file> --OutputDir <docs folder> Check for character encoding issues \u00b6 navigate to root of repository (should see a docs folder, the mkdocs_base.yml file, and a few other things) open command window run Utf8Test python script cmd prompt Utf8Test.py --RootDir docs should complete with no errors Note Note you can also run it on any dynamic content by using a different RootDir parameter. Use -h for usage to get more detailed information of any failures Use mkdocs to build the docs \u00b6 navigate to root of repository (should see a docs folder, the mkdocs_base.yml file, and a few other things) open command window run mkdocs build from cmd prompt at root mkdocs build -s -v should complete with no errors Spell check the docs \u00b6 navigate to root of repository (should see a docs folder, the mkdocs_base.yml file, and a few other things) open command window run command to spell check cspell docs/**/*.md should complete with no errors False Spelling Errors If the spelling error is a false positive there are two solutions: If it is a valid word or commonly understood term then add the word to the cspell.json config file words section Update the cspell.json file ignorePaths element to ignore the entire file. Locally serve the docs \u00b6 One great feature of mkdocs is how easy it is to locally serve the docs to validate your changes. Use mkdocs to serve your local copy mkdocs serve navigate to 127.0.0.1:8000 in web browser Important If you get an error like Config file 'mkdocs.yml' does not exist you must run the preprocess step. Advanced doc features \u00b6 We do turn on a few advanced/extension features. Please use these carefully as they may break compatibility if the publishing engine is changed. Checkout the sample syntax / test page for syntax and information.","title":"How To Build"},{"location":"DeveloperDocs/build_community_docs/#building-community-docs","text":"Info Today this process has been validated for use on Windows 10. This setup process is expected to roughly the same on other operating systems and none of the actual documentation source or tools should have any OS dependency.","title":"Building Community Docs"},{"location":"DeveloperDocs/build_community_docs/#get-the-docs-repository","text":"First, you need to clone the project mu docs repository. git clone https://github.com/Microsoft/mu.git","title":"Get the docs repository"},{"location":"DeveloperDocs/build_community_docs/#install-required-tools","text":"Install python (Current suggested version is 3.7.x). Current min requirement is python 3.4+. Checkout python.org for directions. Install pip. Generally, this is done when installing python but can also be done as its own process. Details here https://pip.pypa.io/en/stable/installing/#do-i-need-to-install-pip Update pip. python -m pip install --upgrade pip Install dependencies. pip install --upgrade -r requirements.txt if wanting to use spell check Install nodejs from https://nodejs.org/en/ Install cspell npm install -g cspell Install Git on your path (Required for generating dynamic repo based content during preprocess)","title":"Install required tools"},{"location":"DeveloperDocs/build_community_docs/#general-suggested-documentation-workflow","text":"open two command windows at the root of docs repository Window 1: Use to serve files locally Use mkdocs serve Any changes from the DocBuild process will be picked up and served Window 2: Use to preprocess the source repo files Run the DocBuild.py command from this window Make changes to the docs in source repos or this repo and then re-run the DocBuild.py build command","title":"General Suggested documentation workflow"},{"location":"DeveloperDocs/build_community_docs/#pre-process-with-dynamic-content-from-source-repos","text":"Create \"repos\" folder (somewhere outside of workspace) Clone all repositories for dynamic content here Set each repo to the branch/commit that you want to document run the DocBuild.py command supplying the parameters DocBuild.py --clean --build --OutputDir docs --yml mkdocs_base.yml --RootDir ..\\repos","title":"Pre-process with dynamic content from source repo(s)"},{"location":"DeveloperDocs/build_community_docs/#pre-process-with-no-source-repos-content","text":"run the DocBuild.py command supplying minimal parameters DocBuild.py --clean --build --yml mkdocs_base.yml","title":"Pre-process with no source repo(s) content"},{"location":"DeveloperDocs/build_community_docs/#clean-remove-all-pre-processed-content","text":"use DocBuild.py command DocBuild.py --clean --yml <path to yml base file> --OutputDir <docs folder>","title":"Clean / Remove all pre-processed content"},{"location":"DeveloperDocs/build_community_docs/#check-for-character-encoding-issues","text":"navigate to root of repository (should see a docs folder, the mkdocs_base.yml file, and a few other things) open command window run Utf8Test python script cmd prompt Utf8Test.py --RootDir docs should complete with no errors Note Note you can also run it on any dynamic content by using a different RootDir parameter. Use -h for usage to get more detailed information of any failures","title":"Check for character encoding issues"},{"location":"DeveloperDocs/build_community_docs/#use-mkdocs-to-build-the-docs","text":"navigate to root of repository (should see a docs folder, the mkdocs_base.yml file, and a few other things) open command window run mkdocs build from cmd prompt at root mkdocs build -s -v should complete with no errors","title":"Use mkdocs to build the docs"},{"location":"DeveloperDocs/build_community_docs/#spell-check-the-docs","text":"navigate to root of repository (should see a docs folder, the mkdocs_base.yml file, and a few other things) open command window run command to spell check cspell docs/**/*.md should complete with no errors False Spelling Errors If the spelling error is a false positive there are two solutions: If it is a valid word or commonly understood term then add the word to the cspell.json config file words section Update the cspell.json file ignorePaths element to ignore the entire file.","title":"Spell check the docs"},{"location":"DeveloperDocs/build_community_docs/#locally-serve-the-docs","text":"One great feature of mkdocs is how easy it is to locally serve the docs to validate your changes. Use mkdocs to serve your local copy mkdocs serve navigate to 127.0.0.1:8000 in web browser Important If you get an error like Config file 'mkdocs.yml' does not exist you must run the preprocess step.","title":"Locally serve the docs"},{"location":"DeveloperDocs/build_community_docs/#advanced-doc-features","text":"We do turn on a few advanced/extension features. Please use these carefully as they may break compatibility if the publishing engine is changed. Checkout the sample syntax / test page for syntax and information.","title":"Advanced doc features"},{"location":"DeveloperDocs/developer_docs/","text":"Developer Docs \u00b6 Philosophy \u00b6 Documentation is critical. There is a steep learning curve in UEFI and no amount of documentation will change that, but at a minimum quick, clear, and easy documentation can help everyone adopt features faster and with higher confidence. Our documentation system will focus on making this an easy, low friction, and collaborative process. The pull request process will eventually compel developers to submit documentation whenever they submit new components and refactoring. Documentation will be done in markdown as this has the benefit of being easily readable in both plain text as well as transformed into a richer experience. It also is quick to learn and to write. Currently, we leverage mkdocs as our publishing engine but since all content is in markdown it could be transitioned to another engine without significant reinvestment. Community documentation \u00b6 This content is documented in static markdown files within the Project Mu repository. We leverage mkdocs to generate web-hosted content on every change and host these using github.io. These static files focus on how the project and community interact. We strongly encourage contribution and follow the standard PR model for all changes, big and small. Developer documentation \u00b6 This content is documented in a couple of ways. There are static markdown files in the Project Mu repository. This contains details about high level concepts, howto articles, and features of the project and all repos within Project Mu. Examples: Code layout, git usage, tools, building, packaging, etc. There is repo and package level documentation for features. These are also static markdown files but these are contained within the repo that contains the feature. A \u201cdocs\u201d folder for each repo and each package will host this content. Changes will also follow the standard PR model for the containing repo. Next, there is feature and instance documentation. This should inform a developer interested in the implementation specifics of what this module is and what additional requirements it has including code dependencies and limitations. This should be documented in markdown files located with the component. These should be updated whenever the component is updated and should be part of a code PR. Finally, for API and traditional functional documentation, our current stance is this is required in code (public APIs) but the published documentation (doxygen html, pdf, etc) is not necessary. Code tools like vscode already provide a lower friction method to index, find def, and search that uses this content directly embedded in the code.","title":"Overview"},{"location":"DeveloperDocs/developer_docs/#developer-docs","text":"","title":"Developer Docs"},{"location":"DeveloperDocs/developer_docs/#philosophy","text":"Documentation is critical. There is a steep learning curve in UEFI and no amount of documentation will change that, but at a minimum quick, clear, and easy documentation can help everyone adopt features faster and with higher confidence. Our documentation system will focus on making this an easy, low friction, and collaborative process. The pull request process will eventually compel developers to submit documentation whenever they submit new components and refactoring. Documentation will be done in markdown as this has the benefit of being easily readable in both plain text as well as transformed into a richer experience. It also is quick to learn and to write. Currently, we leverage mkdocs as our publishing engine but since all content is in markdown it could be transitioned to another engine without significant reinvestment.","title":"Philosophy"},{"location":"DeveloperDocs/developer_docs/#community-documentation","text":"This content is documented in static markdown files within the Project Mu repository. We leverage mkdocs to generate web-hosted content on every change and host these using github.io. These static files focus on how the project and community interact. We strongly encourage contribution and follow the standard PR model for all changes, big and small.","title":"Community documentation"},{"location":"DeveloperDocs/developer_docs/#developer-documentation","text":"This content is documented in a couple of ways. There are static markdown files in the Project Mu repository. This contains details about high level concepts, howto articles, and features of the project and all repos within Project Mu. Examples: Code layout, git usage, tools, building, packaging, etc. There is repo and package level documentation for features. These are also static markdown files but these are contained within the repo that contains the feature. A \u201cdocs\u201d folder for each repo and each package will host this content. Changes will also follow the standard PR model for the containing repo. Next, there is feature and instance documentation. This should inform a developer interested in the implementation specifics of what this module is and what additional requirements it has including code dependencies and limitations. This should be documented in markdown files located with the component. These should be updated whenever the component is updated and should be part of a code PR. Finally, for API and traditional functional documentation, our current stance is this is required in code (public APIs) but the published documentation (doxygen html, pdf, etc) is not necessary. Code tools like vscode already provide a lower friction method to index, find def, and search that uses this content directly embedded in the code.","title":"Developer documentation"},{"location":"DeveloperDocs/doc_sample_test/","text":"Documentation Sample / Test file / Advanced doc features \u00b6 mkdocs macros plugin \u00b6 This plugin allows providing some variables in mkdocs.yml file and then reference those variables using jinja2 syntax in md files. Most of these variables are populated and created during the DocBuild step and inserted into the yml file. https://github.com/fralau/mkdocs_macros_plugin Material theme \u00b6 This theme provides the skin for the site. This also provides capabilities thru plugins. https://squidfunk.github.io/mkdocs-material/ Markdown Extensions \u00b6 The Material theme supports markdown extensions. Check the yml file for what extensions are currently on. Below is more specific info. https://squidfunk.github.io/mkdocs-material/extensions/permalinks/ https://squidfunk.github.io/mkdocs-material/extensions/pymdown/ Admonition plugin \u00b6 This plugin in combo with the material theme provides great looking ways for doc developers to highlight parts of their message. Please check out: https://squidfunk.github.io/mkdocs-material/extensions/admonition/ for the capabilities and syntax. One example: Note Sample note here. emoji support \u00b6 Who doesn't love using emojis. Icon usage has shown to help communicate directions and cross language barriers. https://facelessuser.github.io/pymdown-extensions/extensions/emoji/ Twitter, github, and emojione tags available. Others \u00b6 Check out the mkdocs.yml file for other extensions and details can be found in the links above.","title":"Sample Syntax"},{"location":"DeveloperDocs/doc_sample_test/#documentation-sample-test-file-advanced-doc-features","text":"","title":"Documentation Sample / Test file / Advanced doc features"},{"location":"DeveloperDocs/doc_sample_test/#mkdocs-macros-plugin","text":"This plugin allows providing some variables in mkdocs.yml file and then reference those variables using jinja2 syntax in md files. Most of these variables are populated and created during the DocBuild step and inserted into the yml file. https://github.com/fralau/mkdocs_macros_plugin","title":"mkdocs macros plugin"},{"location":"DeveloperDocs/doc_sample_test/#material-theme","text":"This theme provides the skin for the site. This also provides capabilities thru plugins. https://squidfunk.github.io/mkdocs-material/","title":"Material theme"},{"location":"DeveloperDocs/doc_sample_test/#markdown-extensions","text":"The Material theme supports markdown extensions. Check the yml file for what extensions are currently on. Below is more specific info. https://squidfunk.github.io/mkdocs-material/extensions/permalinks/ https://squidfunk.github.io/mkdocs-material/extensions/pymdown/","title":"Markdown Extensions"},{"location":"DeveloperDocs/doc_sample_test/#admonition-plugin","text":"This plugin in combo with the material theme provides great looking ways for doc developers to highlight parts of their message. Please check out: https://squidfunk.github.io/mkdocs-material/extensions/admonition/ for the capabilities and syntax. One example: Note Sample note here.","title":"Admonition plugin"},{"location":"DeveloperDocs/doc_sample_test/#emoji-support","text":"Who doesn't love using emojis. Icon usage has shown to help communicate directions and cross language barriers. https://facelessuser.github.io/pymdown-extensions/extensions/emoji/ Twitter, github, and emojione tags available.","title":"emoji support"},{"location":"DeveloperDocs/doc_sample_test/#others","text":"Check out the mkdocs.yml file for other extensions and details can be found in the links above.","title":"Others"},{"location":"DeveloperDocs/requirements/","text":"Requirements for contributing documentation \u00b6 Conventions and lessons learned \u00b6 Please update this list as you learn more. filenames should all be lowercase. filenames should use \"_\" to separate words and should not have spaces. all links to pages are case sensitive (when published to GitHub the server is case sensitive) use a code editor like vscode for markdown. It has linting support and will identify issues prior to build. If you markdown has images: Awesome. Images help make docs more informative and easier to understand Path in markdown to image must be relative Suggested to put in same directory as md file image filename must end with _mu. extension . Example my_image_name_mu.png Supported image extensions are gif, jpg, png","title":"Documentation Requirements"},{"location":"DeveloperDocs/requirements/#requirements-for-contributing-documentation","text":"","title":"Requirements for contributing documentation"},{"location":"DeveloperDocs/requirements/#conventions-and-lessons-learned","text":"Please update this list as you learn more. filenames should all be lowercase. filenames should use \"_\" to separate words and should not have spaces. all links to pages are case sensitive (when published to GitHub the server is case sensitive) use a code editor like vscode for markdown. It has linting support and will identify issues prior to build. If you markdown has images: Awesome. Images help make docs more informative and easier to understand Path in markdown to image must be relative Suggested to put in same directory as md file image filename must end with _mu. extension . Example my_image_name_mu.png Supported image extensions are gif, jpg, png","title":"Conventions and lessons learned"},{"location":"How/contributing/","text":"How to contribute \u00b6 There are three common ways to contribute. Participate in discussions using GitHub issues. Contribute documentation by opening a GitHub Pull Request. Contribute code by opening a GitHub Pull Request Issue Tracker Usage \u00b6 https://github.com/Microsoft/mu/issues General feedback and discussions \u00b6 Please start a discussion on the issue tracker. Bugs and feature requests \u00b6 For non-security related bugs please log a new issue on the Project Mu repo issue tracker . The best way to get your bug fixed is to be as detailed as you can be about the problem. Providing a code snippet or sample driver that exposes the issue with steps to reproduce the problem is ideal. Reporting security issues and bugs \u00b6 Security issues and bugs should be reported privately, via email, to the Microsoft Security Response Center (MSRC) secure@microsoft.com . You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Further information, including the MSRC PGP key, can be found in the Security TechCenter . Contributions of Documentation and/or Code \u00b6 Pull Requests \u00b6 If you don't know what a pull request is read this article: https://help.github.com/articles/about-pull-requests . Make sure the repository can build and all tests pass. Familiarize yourself with the project workflow and our coding conventions. General workflow \u00b6 Fork Repository in GitHub Make desired changes. Build it, test it, document it Submit a Pull Request back to the development branch you would like to target. You will be asked to digitally sign a CLA The server will run some builds and tests and report status Community and reviewers will provide feedback in the Pull Request Make changes / adjust based on feedback and discussion Keep your PR branch in-sync with the branch you are targeting and resolve any merge conflicts Once the the PR status is all passing it can be squashed and merged (just press the button in the PR). If the PR is ready the maintainers may complete it for you. That is it. Thanks for contributing. More details on : Code Development Tests Development Documentation Development Contributor License Agreement (CLA) \u00b6 This project welcomes contributions and suggestions. Most (code and documentation) contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com . When you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.","title":"Contributing"},{"location":"How/contributing/#how-to-contribute","text":"There are three common ways to contribute. Participate in discussions using GitHub issues. Contribute documentation by opening a GitHub Pull Request. Contribute code by opening a GitHub Pull Request","title":"How to contribute"},{"location":"How/contributing/#issue-tracker-usage","text":"https://github.com/Microsoft/mu/issues","title":"Issue Tracker Usage"},{"location":"How/contributing/#general-feedback-and-discussions","text":"Please start a discussion on the issue tracker.","title":"General feedback and discussions"},{"location":"How/contributing/#bugs-and-feature-requests","text":"For non-security related bugs please log a new issue on the Project Mu repo issue tracker . The best way to get your bug fixed is to be as detailed as you can be about the problem. Providing a code snippet or sample driver that exposes the issue with steps to reproduce the problem is ideal.","title":"Bugs and feature requests"},{"location":"How/contributing/#reporting-security-issues-and-bugs","text":"Security issues and bugs should be reported privately, via email, to the Microsoft Security Response Center (MSRC) secure@microsoft.com . You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Further information, including the MSRC PGP key, can be found in the Security TechCenter .","title":"Reporting security issues and bugs"},{"location":"How/contributing/#contributions-of-documentation-andor-code","text":"","title":"Contributions of Documentation and/or Code"},{"location":"How/contributing/#pull-requests","text":"If you don't know what a pull request is read this article: https://help.github.com/articles/about-pull-requests . Make sure the repository can build and all tests pass. Familiarize yourself with the project workflow and our coding conventions.","title":"Pull Requests"},{"location":"How/contributing/#general-workflow","text":"Fork Repository in GitHub Make desired changes. Build it, test it, document it Submit a Pull Request back to the development branch you would like to target. You will be asked to digitally sign a CLA The server will run some builds and tests and report status Community and reviewers will provide feedback in the Pull Request Make changes / adjust based on feedback and discussion Keep your PR branch in-sync with the branch you are targeting and resolve any merge conflicts Once the the PR status is all passing it can be squashed and merged (just press the button in the PR). If the PR is ready the maintainers may complete it for you. That is it. Thanks for contributing. More details on : Code Development Tests Development Documentation Development","title":"General workflow"},{"location":"How/contributing/#contributor-license-agreement-cla","text":"This project welcomes contributions and suggestions. Most (code and documentation) contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.microsoft.com . When you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA.","title":"Contributor License Agreement (CLA)"},{"location":"How/release_process/","text":"Overview \u00b6 Contents and Process Under Active Development The basics of this process are identical to those followed by the Project Mu firmware integration and release process internal to Microsoft, but the formal documentation, branch naming, and tagging process is a work in progress. While this is how we expect things to work, there may be changes within the the first few releases driven by feedback within the team and any external consumers/contributors. In the interest of maintaining a close, well-defined relationship with the upstream project, TianoCore, the active release branch of Project Mu is periodically deprecated and all Mu-related changes are rebased onto a selected commit of TianoCore. This keeps Project Mu up to date with TianoCore while highlighting all Project Mu differences in the most recent commits and encouraging the reverse integration of all changes/fixes back into TianoCore In general, the life-cycle of active code follows the following path: All active work in Project Mu is performed on a release/* branch, named sequentially according to the date of TianoCore commit that it's based on (e.g. release/201808 is based on the edk2-stable201808 branch in TianoCore). Work proceeds on that branch until a new TianoCore integration is targeted, at which point a new branch is created and all existing changes are rebased onto the new branch and the new branch is used for all active development going forward. At this point, the previous branch enters a stabilization period where further tests are performed and only bug fixes are allowed to be committed. After stabilization, the branch is labeled as stable and will only receive critical bug fixes either directly to the branch or backported from a more recent release. release/* branches will be maintained in LTS (Long-Term Support) for at least the next two releases. The below diagram illustrates the life-cycle of a single branch and indicates the critical points in its lifetime. These critical points will be applied as tags for reference and documentation. The tags are given a name relative to the target branch and consist of: Upstream base, Rebase complete, Rebase builds, Rebase boots, RCn, and Stable. These tags are discussed in more detail below. Important Due to the impacts of the rebase process on the history of Mu release branches, any downstream consumers will have to follow a similar integration process when upgrading to a new release. Any custom changes made within the Project Mu repos will have to be rebased from one release to the next. This is why we strongly discourage forking Project Mu for direct modification (ie. consumption, not contribution). Instead, leverage the distributed repo management system and override management system to integrate proprietary code/modules. Upstream Integration Phase \u00b6 At this time, we are targeting upstream integrations for roughly once a quarter, attempting to align 1:1 with the TianoCore stable release cadence. Prior to an integration, the status dashboard (not yet created) will be updated with the target date of completion and the target TianoCore commit and/or release. For example, a plan was made to transition off of release/20180529 when TianoCore announced the edk2-stable201808 release. Once a commit is selected, a set of rebase commits will be chosen from the active (previous) release/* branch. Ideally, these commits would include everything from the previous rebase through the most recent *_RC tag. For example, when moving from the release/201808 branch, the commits will be selected from 1808_Upstream (not inclusive) tag to 1808_RC1 . After selection, this list of commits will be evaluated to determine whether any changes are no longer needed in the Mu history. The most likely causes of this action are: A change was submitted to TianoCore and has been accepted since the last rebase. Therefore, the change is no longer needed in Mu history. A change was reverted or modified more recently in Mu history, and the history of this change was squashed to maintain simplicity when comparing with upstream (TianoCore). Once all evaluation is completed, the rebase will be performed in the new release/* branch. This branch will then be built for a reference platform (to be selected by internal team) and booted, at which point it will be considered the active development branch. Integration Milestone Tags \u00b6 During integration, multiple tags are applied to the branch to serve as milestones. They also serve as reference point for changelog documentation that is produced during the integration process. These tags are described below: *_Upstream This tag is placed on the exact TianoCore commit that a given release branch started from. This is used as a reference point between branches and relative to the rebase operation. The documentation produced for this tag contains the differences in TianoCore between this branch and the previous branch. For branches that originated from TianoCore releases, this changelog should be identical to the TianoCore changelog. *_Rebase This tag is placed on the commit at the branch HEAD once the rebase is completed. The only changes to the commits from the last branch should be merge conflict resolutions and any history simplification as described above. The documentation produced for this tag contains a record of these resolutions and simplifications. *_RefBuild This tag is placed on the commit where a reference platform consuming a large portion of the Mu code can successfully build. The documentation produced for this tag contains any changes required to get the reference platform building. It includes a list of changes outside the Mu project that are recommended for any consuming platform. *_RefBoot This tag is placed on the commit where a reference platform consuming a large portion of the Mu code can successfully boot. The documentation produced for this tag contains any changes required to get the reference platform booting. It includes a list of changes outside the Mu project that are recommended for any consuming platform. In each of these cases, the * will be replaced with a corresponding branch name. For example, the tags associated with release/201808 will be prefixed with 1808 (e.g. 1808_Rebase , 1808_RC1 , etc.). Active Development Phase \u00b6 During the active development phase, the release branch is open for comment and contribution both internally and publicly. All work contributed by the Project Mu team will be publicly available after an internal PR review. This commits will automatically be mirrored to the public repos. Similarly, all completed public PRs are mirrored in internal review repos (with preference being given to the public PR in event of a conflict). While this means that there will be times where Project Mu team will make contributions without going through a full public PR review, all code is open to comment and contribution, up to and including a full revert of the internal Mu team contribution. Public Contribution/Commentary \u00b6 For information on the contribution policies and steps, see the How to Contribute document. Upstream Cherry-Picks \u00b6 In the event that a critical change is made in the TianoCore upstream during the Active Development phase, the Project Mu team (with any suggestions or comment from downstream contributors) will evaluate the change for a mid-release cherry pick. If warranted, the commit(s) will be cherry-picked directly from TianoCore and prefixed with a \"CHERRY-PICK\" tag in the commit message so they can be cleaned up in the next rebase. Stabilization Phase \u00b6 When warranted, active development on the active release/* branch will be halted so that it may enter a period of rigorous testing and stabilization. Upon entering the Stabilization phase, the branch will be tagged with a *_RC1 tag and only bug fixes will be accepted from then on. Any defects or regressions found during stabilization will be fixed and documented. Once confidence is built in the stability of the code, the branch will be tagged as *_Stable and it will enter LTS. It is Project Mu's goal that this cadence be aligned with the TianoCore release cadence, with the previous branch stabilizing at the same time a new TianoCore release is available. In this way, development can seamlessly move to the next release/* branch without lapse in availability. Note It is possible that the *_RC1 tag be applied to the same commit as *_Stable if there are no defects found in the branch. (Because that happens all the time.) It is also possible that multiple *_RCn tags may be useful to distinguish between milestones of a particularly protracted Stabilization phase. Transition Branches \u00b6 In the event that it becomes necessary to stabilize a release/* branch prior to the availability of a suitable TianoCore commit for rebasing, all active development will move to a dev/* branch that will branch from the previous *_RC1 tag. If bugs are discovered in the Stabilization phase for the release/* branch, they will also be fixed in the dev/* branch and all changes made in the dev/* branch will be rebased as part of the next release/* branch when it is ready. Long-Term Support (LTS) \u00b6 It is Project Mu's goal that all release/* branches continue to be maintained with active bug fixes -- as necessary -- for at least two full releases after the branch becomes stable. The Project Mu team will serve as the primary deciding body for whether a bug fix to the current release/* branch merits porting back to the prior two branches, but community input or suggestions are always welcome. All release branches that make it to the Stabilization phase will be hosted and kept in the repository in perpetuity. If any change was required to this policy (perhaps for server considerations), the branches will remain archived for posterity and should be available by request. Lifetime of a Single Integration \u00b6 TBD","title":"Release Process"},{"location":"How/release_process/#overview","text":"Contents and Process Under Active Development The basics of this process are identical to those followed by the Project Mu firmware integration and release process internal to Microsoft, but the formal documentation, branch naming, and tagging process is a work in progress. While this is how we expect things to work, there may be changes within the the first few releases driven by feedback within the team and any external consumers/contributors. In the interest of maintaining a close, well-defined relationship with the upstream project, TianoCore, the active release branch of Project Mu is periodically deprecated and all Mu-related changes are rebased onto a selected commit of TianoCore. This keeps Project Mu up to date with TianoCore while highlighting all Project Mu differences in the most recent commits and encouraging the reverse integration of all changes/fixes back into TianoCore In general, the life-cycle of active code follows the following path: All active work in Project Mu is performed on a release/* branch, named sequentially according to the date of TianoCore commit that it's based on (e.g. release/201808 is based on the edk2-stable201808 branch in TianoCore). Work proceeds on that branch until a new TianoCore integration is targeted, at which point a new branch is created and all existing changes are rebased onto the new branch and the new branch is used for all active development going forward. At this point, the previous branch enters a stabilization period where further tests are performed and only bug fixes are allowed to be committed. After stabilization, the branch is labeled as stable and will only receive critical bug fixes either directly to the branch or backported from a more recent release. release/* branches will be maintained in LTS (Long-Term Support) for at least the next two releases. The below diagram illustrates the life-cycle of a single branch and indicates the critical points in its lifetime. These critical points will be applied as tags for reference and documentation. The tags are given a name relative to the target branch and consist of: Upstream base, Rebase complete, Rebase builds, Rebase boots, RCn, and Stable. These tags are discussed in more detail below. Important Due to the impacts of the rebase process on the history of Mu release branches, any downstream consumers will have to follow a similar integration process when upgrading to a new release. Any custom changes made within the Project Mu repos will have to be rebased from one release to the next. This is why we strongly discourage forking Project Mu for direct modification (ie. consumption, not contribution). Instead, leverage the distributed repo management system and override management system to integrate proprietary code/modules.","title":"Overview"},{"location":"How/release_process/#upstream-integration-phase","text":"At this time, we are targeting upstream integrations for roughly once a quarter, attempting to align 1:1 with the TianoCore stable release cadence. Prior to an integration, the status dashboard (not yet created) will be updated with the target date of completion and the target TianoCore commit and/or release. For example, a plan was made to transition off of release/20180529 when TianoCore announced the edk2-stable201808 release. Once a commit is selected, a set of rebase commits will be chosen from the active (previous) release/* branch. Ideally, these commits would include everything from the previous rebase through the most recent *_RC tag. For example, when moving from the release/201808 branch, the commits will be selected from 1808_Upstream (not inclusive) tag to 1808_RC1 . After selection, this list of commits will be evaluated to determine whether any changes are no longer needed in the Mu history. The most likely causes of this action are: A change was submitted to TianoCore and has been accepted since the last rebase. Therefore, the change is no longer needed in Mu history. A change was reverted or modified more recently in Mu history, and the history of this change was squashed to maintain simplicity when comparing with upstream (TianoCore). Once all evaluation is completed, the rebase will be performed in the new release/* branch. This branch will then be built for a reference platform (to be selected by internal team) and booted, at which point it will be considered the active development branch.","title":"Upstream Integration Phase"},{"location":"How/release_process/#integration-milestone-tags","text":"During integration, multiple tags are applied to the branch to serve as milestones. They also serve as reference point for changelog documentation that is produced during the integration process. These tags are described below: *_Upstream This tag is placed on the exact TianoCore commit that a given release branch started from. This is used as a reference point between branches and relative to the rebase operation. The documentation produced for this tag contains the differences in TianoCore between this branch and the previous branch. For branches that originated from TianoCore releases, this changelog should be identical to the TianoCore changelog. *_Rebase This tag is placed on the commit at the branch HEAD once the rebase is completed. The only changes to the commits from the last branch should be merge conflict resolutions and any history simplification as described above. The documentation produced for this tag contains a record of these resolutions and simplifications. *_RefBuild This tag is placed on the commit where a reference platform consuming a large portion of the Mu code can successfully build. The documentation produced for this tag contains any changes required to get the reference platform building. It includes a list of changes outside the Mu project that are recommended for any consuming platform. *_RefBoot This tag is placed on the commit where a reference platform consuming a large portion of the Mu code can successfully boot. The documentation produced for this tag contains any changes required to get the reference platform booting. It includes a list of changes outside the Mu project that are recommended for any consuming platform. In each of these cases, the * will be replaced with a corresponding branch name. For example, the tags associated with release/201808 will be prefixed with 1808 (e.g. 1808_Rebase , 1808_RC1 , etc.).","title":"Integration Milestone Tags"},{"location":"How/release_process/#active-development-phase","text":"During the active development phase, the release branch is open for comment and contribution both internally and publicly. All work contributed by the Project Mu team will be publicly available after an internal PR review. This commits will automatically be mirrored to the public repos. Similarly, all completed public PRs are mirrored in internal review repos (with preference being given to the public PR in event of a conflict). While this means that there will be times where Project Mu team will make contributions without going through a full public PR review, all code is open to comment and contribution, up to and including a full revert of the internal Mu team contribution.","title":"Active Development Phase"},{"location":"How/release_process/#public-contributioncommentary","text":"For information on the contribution policies and steps, see the How to Contribute document.","title":"Public Contribution/Commentary"},{"location":"How/release_process/#upstream-cherry-picks","text":"In the event that a critical change is made in the TianoCore upstream during the Active Development phase, the Project Mu team (with any suggestions or comment from downstream contributors) will evaluate the change for a mid-release cherry pick. If warranted, the commit(s) will be cherry-picked directly from TianoCore and prefixed with a \"CHERRY-PICK\" tag in the commit message so they can be cleaned up in the next rebase.","title":"Upstream Cherry-Picks"},{"location":"How/release_process/#stabilization-phase","text":"When warranted, active development on the active release/* branch will be halted so that it may enter a period of rigorous testing and stabilization. Upon entering the Stabilization phase, the branch will be tagged with a *_RC1 tag and only bug fixes will be accepted from then on. Any defects or regressions found during stabilization will be fixed and documented. Once confidence is built in the stability of the code, the branch will be tagged as *_Stable and it will enter LTS. It is Project Mu's goal that this cadence be aligned with the TianoCore release cadence, with the previous branch stabilizing at the same time a new TianoCore release is available. In this way, development can seamlessly move to the next release/* branch without lapse in availability. Note It is possible that the *_RC1 tag be applied to the same commit as *_Stable if there are no defects found in the branch. (Because that happens all the time.) It is also possible that multiple *_RCn tags may be useful to distinguish between milestones of a particularly protracted Stabilization phase.","title":"Stabilization Phase"},{"location":"How/release_process/#transition-branches","text":"In the event that it becomes necessary to stabilize a release/* branch prior to the availability of a suitable TianoCore commit for rebasing, all active development will move to a dev/* branch that will branch from the previous *_RC1 tag. If bugs are discovered in the Stabilization phase for the release/* branch, they will also be fixed in the dev/* branch and all changes made in the dev/* branch will be rebased as part of the next release/* branch when it is ready.","title":"Transition Branches"},{"location":"How/release_process/#long-term-support-lts","text":"It is Project Mu's goal that all release/* branches continue to be maintained with active bug fixes -- as necessary -- for at least two full releases after the branch becomes stable. The Project Mu team will serve as the primary deciding body for whether a bug fix to the current release/* branch merits porting back to the prior two branches, but community input or suggestions are always welcome. All release branches that make it to the Stabilization phase will be hosted and kept in the repository in perpetuity. If any change was required to this policy (perhaps for server considerations), the branches will remain archived for posterity and should be available by request.","title":"Long-Term Support (LTS)"},{"location":"How/release_process/#lifetime-of-a-single-integration","text":"TBD","title":"Lifetime of a Single Integration"},{"location":"WhatAndWhy/features/","text":"Features \u00b6 Summary \u00b6 Project Mu features will generally be found in a \"MU\" sub-module, for example, \"Common/MU\" or \"Silicon/Intel/MU\". What major features does Project Mu bring to the table above/beyond EDK2? Feature List \u00b6 Pluggable, cross-device, performance-optimized BDS Device Firmware Configuration Interface - enables practical MDM management PBKDF2-based BIOS password example Support for EKU-based trust anchors during signature validation Microsoft unit test framework Audit, function, & performance tests for platform features Scalable Python build environment Build plug in: override tracking tool Build plug in: flash descriptor analysis Binary package management via NuGet Capsule signing via signtool.exe Up-to-date Visual Studio compiler support Base64 encode for binary objects XML Support Package Features Coming Soon \u00b6 Modern BIOS menu example (Surface inspired) On screen keyboard (OSK) with mouse, touch support Graphical end-to-end boot performance analysis library and tool Infineon TPM firmware update via Capsule On screen notifications: color bars to inform users that a device is not in a production configuration Features integrated into Tiano \u00b6 Safe Integer library Heap Guard ESRT DXE driver Scalable device FMP framework Progress bar for Capsule Updates TCG FV pre hashing optimization NVME shutdown","title":"Features"},{"location":"WhatAndWhy/features/#features","text":"","title":"Features"},{"location":"WhatAndWhy/features/#summary","text":"Project Mu features will generally be found in a \"MU\" sub-module, for example, \"Common/MU\" or \"Silicon/Intel/MU\". What major features does Project Mu bring to the table above/beyond EDK2?","title":"Summary"},{"location":"WhatAndWhy/features/#feature-list","text":"Pluggable, cross-device, performance-optimized BDS Device Firmware Configuration Interface - enables practical MDM management PBKDF2-based BIOS password example Support for EKU-based trust anchors during signature validation Microsoft unit test framework Audit, function, & performance tests for platform features Scalable Python build environment Build plug in: override tracking tool Build plug in: flash descriptor analysis Binary package management via NuGet Capsule signing via signtool.exe Up-to-date Visual Studio compiler support Base64 encode for binary objects XML Support Package","title":"Feature List"},{"location":"WhatAndWhy/features/#features-coming-soon","text":"Modern BIOS menu example (Surface inspired) On screen keyboard (OSK) with mouse, touch support Graphical end-to-end boot performance analysis library and tool Infineon TPM firmware update via Capsule On screen notifications: color bars to inform users that a device is not in a production configuration","title":"Features Coming Soon"},{"location":"WhatAndWhy/features/#features-integrated-into-tiano","text":"Safe Integer library Heap Guard ESRT DXE driver Scalable device FMP framework Progress bar for Capsule Updates TCG FV pre hashing optimization NVME shutdown","title":"Features integrated into Tiano"},{"location":"WhatAndWhy/layout/","text":"Dependencies and Layout \u00b6 Conceptual Layers \u00b6 A modern, full-featured, product-ready UEFI firmware codebase combines code from a multitude of sources: TianoCore EDK2 UEFI standard-based code Value-add code from TianoCore Silicon vendor hardware initialization code Silicon vendor value-add code Independent BIOS Vendor code ODM/OEM customization code OS firmware support code Legacy BIOS compatibility code Board-specific code etc. Some of the above components come from closed-source projects (silicon vendors, IBVs, OEMs), others are open source. Each component is supported at its own schedule with new features and bug fixes, creating a problem of stale code if not synced up regularly. Compound the version and source problem with the sheer size: a common UEFI codebase is typically well above 1 million LOC and only goes up from there. What is a dependency \u00b6 To understand the layering you must first understand the terminology. There are two types of code assets. A definition of something. Generally, this is defined in an accessible header file. This is the API provided by some asset. This API can be \"depended\" upon to provide some capability. An implementation of something. Example of a dependency: DxeCore in the Basecore layer includes a TimerLib interface. TimerLib interface is defined in the same Basecore layer as DxeCore, so in this case a Basecore module is depending on a Basecore interface. This is allowed. Another example: Silicon-layer module implements a TimerLib interface defined in Basecore. Here, a Silicon layer module depends on a Basecore interface. This is allowed. Architecture \u00b6 Project Mu is an attempt to create a rigid layering scheme that defines the hierarchy of dependencies. Architectural goal kept in mind when designing this layering scheme is a controlled, limited scope, and allowed dependencies for each module within a given layer. It is important to know, when implementing a module, what the module is allowed to depend on. When creating an interface, it is important to identify the correct layer for it such that all the consuming modules are located in the layers below. Motivation and goals of the layering scheme: Easy component integration Code reuse Only carry relevant code Dependency Block Diagram \u00b6 File Layout \u00b6 To best preserve and delineate these concepts of componentization and unidirectional dependency, we have chosen to lay out our repository files in a structure that reinforces the same mentality. The underlying logic of this layout is to clearly distinguish each layer from the rest. As such, the Basecore -- which is considered foundational -- is broken out on its own, followed by the Common repos, followed by the Silicon, followed by the Platform. As mentioned elsewhere, Project Mu makes liberal use of multiple repositories due to the mixture of requirements in the firmware ecosystem. Some repos are split for technical reasons, some for organizational, and some for legal. One of the goals of Project Mu is to make this seemingly complicated layout easier to work with. Min Platform Example \u00b6 A simple tree might look like this... project_mu/ \u251c\u2500\u2500 Build/ \u251c\u2500\u2500 Common/ \u2502 \u2514\u2500\u2500 ... # Common code optional, but probably not required \u251c\u2500\u2500 Conf/ \u251c\u2500\u2500 MU_BASECORE/ \u251c\u2500\u2500 Platform/ \u2502 \u2514\u2500\u2500 Sample/ \u2502 \u2514\u2500\u2500 MyMinPlatform # Platform-specific build files and code \u251c\u2500\u2500 Silicon/ \u2502 \u2514\u2500\u2500 SiProvider/ \u2502 \u2514\u2500\u2500 REF_CODE/ # Enablement code for your architecture \u251c\u2500\u2500 .gitattributes \u251c\u2500\u2500 .gitignore \u2514\u2500\u2500 .gitmodules Note that this file structure is likely located in a Git repository, and every \"ALL CAPS\" directory in this example is a Git submodule/nested repository. Surface Laptop Example \u00b6 For a real-world example, this is a tree that could build the Surface Laptop product, including both open- and closed-source repositories: project_mu/ \u251c\u2500\u2500 Build/ \u251c\u2500\u2500 Common/ \u2502 \u251c\u2500\u2500 MSCORE_INTERNAL/ # Proprietary code and code not yet approved for public distribution \u2502 \u251c\u2500\u2500 MU/ \u2502 \u251c\u2500\u2500 MU_TIANO/ \u2502 \u2514\u2500\u2500 SURFACE/ # Shared code to enable common features like FrontPage \u251c\u2500\u2500 Conf/ \u251c\u2500\u2500 MU_BASECORE/ \u251c\u2500\u2500 Platform/ \u2502 \u251c\u2500\u2500 Surface/ \u2502 \u2502 \u251c\u2500\u2500 SurfKbl/ \u2502 \u2502 \u2502 \u2514\u2500\u2500 Laptop/ # Surface Laptop-Specific Platform Code \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2514\u2500\u2500 Others/ \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 Silicon/ \u2502 \u251c\u2500\u2500 Intel/ \u2502 \u2502 \u251c\u2500\u2500 KBL/ # Intel KBL Reference Code \u2502 \u2502 \u251c\u2500\u2500 MU/ # Project Mu Intel Common Code \u2502 \u2502 \u251c\u2500\u2500 MU_TIANO/ # Project Mu Intel Code from TianoCore \u2502 \u2502 \u2514\u2500\u2500 SURF_KBL/ # Surface Customizations/Overrides for KBL Ref Code \u2502 \u2514\u2500\u2500 SURFACE/ # Shared code to enable common HW like ECs \u251c\u2500\u2500 .gitattributes \u251c\u2500\u2500 .gitignore \u2514\u2500\u2500 .gitmodules Once again, the \"ALL CAPS\" directories are submodules.","title":"Dependencies and Layout"},{"location":"WhatAndWhy/layout/#dependencies-and-layout","text":"","title":"Dependencies and Layout"},{"location":"WhatAndWhy/layout/#conceptual-layers","text":"A modern, full-featured, product-ready UEFI firmware codebase combines code from a multitude of sources: TianoCore EDK2 UEFI standard-based code Value-add code from TianoCore Silicon vendor hardware initialization code Silicon vendor value-add code Independent BIOS Vendor code ODM/OEM customization code OS firmware support code Legacy BIOS compatibility code Board-specific code etc. Some of the above components come from closed-source projects (silicon vendors, IBVs, OEMs), others are open source. Each component is supported at its own schedule with new features and bug fixes, creating a problem of stale code if not synced up regularly. Compound the version and source problem with the sheer size: a common UEFI codebase is typically well above 1 million LOC and only goes up from there.","title":"Conceptual Layers"},{"location":"WhatAndWhy/layout/#what-is-a-dependency","text":"To understand the layering you must first understand the terminology. There are two types of code assets. A definition of something. Generally, this is defined in an accessible header file. This is the API provided by some asset. This API can be \"depended\" upon to provide some capability. An implementation of something. Example of a dependency: DxeCore in the Basecore layer includes a TimerLib interface. TimerLib interface is defined in the same Basecore layer as DxeCore, so in this case a Basecore module is depending on a Basecore interface. This is allowed. Another example: Silicon-layer module implements a TimerLib interface defined in Basecore. Here, a Silicon layer module depends on a Basecore interface. This is allowed.","title":"What is a dependency"},{"location":"WhatAndWhy/layout/#architecture","text":"Project Mu is an attempt to create a rigid layering scheme that defines the hierarchy of dependencies. Architectural goal kept in mind when designing this layering scheme is a controlled, limited scope, and allowed dependencies for each module within a given layer. It is important to know, when implementing a module, what the module is allowed to depend on. When creating an interface, it is important to identify the correct layer for it such that all the consuming modules are located in the layers below. Motivation and goals of the layering scheme: Easy component integration Code reuse Only carry relevant code","title":"Architecture"},{"location":"WhatAndWhy/layout/#dependency-block-diagram","text":"","title":"Dependency Block Diagram"},{"location":"WhatAndWhy/layout/#file-layout","text":"To best preserve and delineate these concepts of componentization and unidirectional dependency, we have chosen to lay out our repository files in a structure that reinforces the same mentality. The underlying logic of this layout is to clearly distinguish each layer from the rest. As such, the Basecore -- which is considered foundational -- is broken out on its own, followed by the Common repos, followed by the Silicon, followed by the Platform. As mentioned elsewhere, Project Mu makes liberal use of multiple repositories due to the mixture of requirements in the firmware ecosystem. Some repos are split for technical reasons, some for organizational, and some for legal. One of the goals of Project Mu is to make this seemingly complicated layout easier to work with.","title":"File Layout"},{"location":"WhatAndWhy/layout/#min-platform-example","text":"A simple tree might look like this... project_mu/ \u251c\u2500\u2500 Build/ \u251c\u2500\u2500 Common/ \u2502 \u2514\u2500\u2500 ... # Common code optional, but probably not required \u251c\u2500\u2500 Conf/ \u251c\u2500\u2500 MU_BASECORE/ \u251c\u2500\u2500 Platform/ \u2502 \u2514\u2500\u2500 Sample/ \u2502 \u2514\u2500\u2500 MyMinPlatform # Platform-specific build files and code \u251c\u2500\u2500 Silicon/ \u2502 \u2514\u2500\u2500 SiProvider/ \u2502 \u2514\u2500\u2500 REF_CODE/ # Enablement code for your architecture \u251c\u2500\u2500 .gitattributes \u251c\u2500\u2500 .gitignore \u2514\u2500\u2500 .gitmodules Note that this file structure is likely located in a Git repository, and every \"ALL CAPS\" directory in this example is a Git submodule/nested repository.","title":"Min Platform Example"},{"location":"WhatAndWhy/layout/#surface-laptop-example","text":"For a real-world example, this is a tree that could build the Surface Laptop product, including both open- and closed-source repositories: project_mu/ \u251c\u2500\u2500 Build/ \u251c\u2500\u2500 Common/ \u2502 \u251c\u2500\u2500 MSCORE_INTERNAL/ # Proprietary code and code not yet approved for public distribution \u2502 \u251c\u2500\u2500 MU/ \u2502 \u251c\u2500\u2500 MU_TIANO/ \u2502 \u2514\u2500\u2500 SURFACE/ # Shared code to enable common features like FrontPage \u251c\u2500\u2500 Conf/ \u251c\u2500\u2500 MU_BASECORE/ \u251c\u2500\u2500 Platform/ \u2502 \u251c\u2500\u2500 Surface/ \u2502 \u2502 \u251c\u2500\u2500 SurfKbl/ \u2502 \u2502 \u2502 \u2514\u2500\u2500 Laptop/ # Surface Laptop-Specific Platform Code \u2502 \u2502 \u2514\u2500\u2500 ... \u2502 \u2514\u2500\u2500 Others/ \u2502 \u2514\u2500\u2500 ... \u251c\u2500\u2500 Silicon/ \u2502 \u251c\u2500\u2500 Intel/ \u2502 \u2502 \u251c\u2500\u2500 KBL/ # Intel KBL Reference Code \u2502 \u2502 \u251c\u2500\u2500 MU/ # Project Mu Intel Common Code \u2502 \u2502 \u251c\u2500\u2500 MU_TIANO/ # Project Mu Intel Code from TianoCore \u2502 \u2502 \u2514\u2500\u2500 SURF_KBL/ # Surface Customizations/Overrides for KBL Ref Code \u2502 \u2514\u2500\u2500 SURFACE/ # Shared code to enable common HW like ECs \u251c\u2500\u2500 .gitattributes \u251c\u2500\u2500 .gitignore \u2514\u2500\u2500 .gitmodules Once again, the \"ALL CAPS\" directories are submodules.","title":"Surface Laptop Example"},{"location":"WhatAndWhy/overview/","text":"Overview \u00b6 Project Organization \u00b6 This documentation is hosted in the main repository for Project Mu, which is used as a central collection point for community interaction and documentation. The build system and firmware code for the project is hosted in a number of other repositories, grouped/divided by function, partner, license, and dependencies. Several of these repositories are brought together by the build system to create a FW project, but we'll get into those details later. ;) For now, an overview of the repositories and what code you'll find there... Mu Basecore \u00b6 This repository is considered foundational and fundamental to Project Mu. The guiding philosophy is that this code should be one or more of the following: Part of the build system Common to any silicon architecture Part of the \"API layer\" that contains protocol and library definitions including Industry Standards UEFI Specifications ACPI Specifications Part of the \"PI\" layer that contains driver dispatch logic, event/signaling logic, or memory management logic This can also include central technologies like variable services Mu Common Plus \u00b6 The packages found in this repository are contributed entirely by Project Mu. They should be common to all silicon architectures and only depend on Mu Basecore. These packages provide features and functionality that are entirely optional, but may be recommended for PC platform FW. Mu Tiano Plus \u00b6 This repository contains only modules that were originally sourced from TianoCore. They are not essential for any particular platform, but are likely useful to many platforms. The versions contained in this repo are modified and/or improved to work with the rest of Project Mu. Repo Philosophy \u00b6 Project Mu makes liberal use of multiple repositories due to the mixture of requirements in the UEFI ecosystem. Some repos are split for technical reasons, some for organizational, and some for legal. Examples of this are: A downstream contributor wants to add a generic feature with a silicon-specific implementation. This feature would be leveraged by Common code. If all code were in one repository, no barriers would be in place to prevent the contributor from directly calling from Common code into the Silicon implementation. By forcing the API/interface to be published in a separate repository, we can ensure that the unidirectional dependency relationship is maintained. Module A and Module B both provide optional functionality. However, Module A is far more likely to be consume by a wide audience than Module B. To achieve \"Less is More\", Module A may be placed in a different repos to enable downstream consumers to carry as little \"unused\" code as possible, since it's likely they would not need Module B in their code tree. A downstream consumer is producing a product in conjunction with a vendor/partner. While most of the enabling code for the vendor component is open-source, a portion of it is only released under NDA. By having multiple repositories comprise a single workspace, the downstream consumer is able to maximize their open-source consumption (which minimizes forking) while maintaining the legal requirements of closed-source/proprietary partitioning.","title":"Overview"},{"location":"WhatAndWhy/overview/#overview","text":"","title":"Overview"},{"location":"WhatAndWhy/overview/#project-organization","text":"This documentation is hosted in the main repository for Project Mu, which is used as a central collection point for community interaction and documentation. The build system and firmware code for the project is hosted in a number of other repositories, grouped/divided by function, partner, license, and dependencies. Several of these repositories are brought together by the build system to create a FW project, but we'll get into those details later. ;) For now, an overview of the repositories and what code you'll find there...","title":"Project Organization"},{"location":"WhatAndWhy/overview/#mu-basecore","text":"This repository is considered foundational and fundamental to Project Mu. The guiding philosophy is that this code should be one or more of the following: Part of the build system Common to any silicon architecture Part of the \"API layer\" that contains protocol and library definitions including Industry Standards UEFI Specifications ACPI Specifications Part of the \"PI\" layer that contains driver dispatch logic, event/signaling logic, or memory management logic This can also include central technologies like variable services","title":"Mu Basecore"},{"location":"WhatAndWhy/overview/#mu-common-plus","text":"The packages found in this repository are contributed entirely by Project Mu. They should be common to all silicon architectures and only depend on Mu Basecore. These packages provide features and functionality that are entirely optional, but may be recommended for PC platform FW.","title":"Mu Common Plus"},{"location":"WhatAndWhy/overview/#mu-tiano-plus","text":"This repository contains only modules that were originally sourced from TianoCore. They are not essential for any particular platform, but are likely useful to many platforms. The versions contained in this repo are modified and/or improved to work with the rest of Project Mu.","title":"Mu Tiano Plus"},{"location":"WhatAndWhy/overview/#repo-philosophy","text":"Project Mu makes liberal use of multiple repositories due to the mixture of requirements in the UEFI ecosystem. Some repos are split for technical reasons, some for organizational, and some for legal. Examples of this are: A downstream contributor wants to add a generic feature with a silicon-specific implementation. This feature would be leveraged by Common code. If all code were in one repository, no barriers would be in place to prevent the contributor from directly calling from Common code into the Silicon implementation. By forcing the API/interface to be published in a separate repository, we can ensure that the unidirectional dependency relationship is maintained. Module A and Module B both provide optional functionality. However, Module A is far more likely to be consume by a wide audience than Module B. To achieve \"Less is More\", Module A may be placed in a different repos to enable downstream consumers to carry as little \"unused\" code as possible, since it's likely they would not need Module B in their code tree. A downstream consumer is producing a product in conjunction with a vendor/partner. While most of the enabling code for the vendor component is open-source, a portion of it is only released under NDA. By having multiple repositories comprise a single workspace, the downstream consumer is able to maximize their open-source consumption (which minimizes forking) while maintaining the legal requirements of closed-source/proprietary partitioning.","title":"Repo Philosophy"},{"location":"Where/external_resources/","text":"External Resources \u00b6 UEFI Industry Organization \u00b6 UEFI is the industry standards body that develops and distributes the UEFI, PI, and ACPI specifications. These specifications govern the firmware interfaces between OS, OEM/Device Manufacturer, and Silicon partner. This is a great site to download the industry specifications and if you are a member you can join working groups for future specifications. TianoCore Project \u00b6 Tianocore is an existing open source project. Their EDK2 repository is the basis for many/most UEFI implementations used on products today. It provides UEFI spec compliant code modules, supports industry standard hardware, and a multi-platform build environment. This is a great site to download specifications for the different file types and build process. It also has links to repositories that Project Mu tracks as \"upstreams\". MkDocs \u00b6 Great tool for creating documentation websites based on markdown. In fact it was used to generate this documentation. Markdown Help \u00b6 Quick link for common markdown support.","title":"External Resources"},{"location":"Where/external_resources/#external-resources","text":"","title":"External Resources"},{"location":"Where/external_resources/#uefi-industry-organization","text":"UEFI is the industry standards body that develops and distributes the UEFI, PI, and ACPI specifications. These specifications govern the firmware interfaces between OS, OEM/Device Manufacturer, and Silicon partner. This is a great site to download the industry specifications and if you are a member you can join working groups for future specifications.","title":"UEFI Industry Organization"},{"location":"Where/external_resources/#tianocore-project","text":"Tianocore is an existing open source project. Their EDK2 repository is the basis for many/most UEFI implementations used on products today. It provides UEFI spec compliant code modules, supports industry standard hardware, and a multi-platform build environment. This is a great site to download specifications for the different file types and build process. It also has links to repositories that Project Mu tracks as \"upstreams\".","title":"TianoCore Project"},{"location":"Where/external_resources/#mkdocs","text":"Great tool for creating documentation websites based on markdown. In fact it was used to generate this documentation.","title":"MkDocs"},{"location":"Where/external_resources/#markdown-help","text":"Quick link for common markdown support.","title":"Markdown Help"},{"location":"Where/project_resources/","text":"Project Resources \u00b6 Public Source Code Repositories \u00b6 Listed here: GitHub Project Mu Repo List Issue/Bug/Feature Tracking \u00b6 https://github.com/Microsoft/mu/issues Builds \u00b6 https://dev.azure.com/projectmu/mu/_build Docs \u00b6 https://microsoft.github.io/mu/ Collaborate \u00b6 Send an email request to join the discussion on our Teams channels. Help \u00b6 For one-off questions, feel free to open an Issue against the Mu repo with the \"question\" tag https://github.com/Microsoft/mu/issues For deeper discussion & faster communication, join our Microsoft Teams channels. To join send an email request .","title":"Project Resources"},{"location":"Where/project_resources/#project-resources","text":"","title":"Project Resources"},{"location":"Where/project_resources/#public-source-code-repositories","text":"Listed here: GitHub Project Mu Repo List","title":"Public Source Code Repositories"},{"location":"Where/project_resources/#issuebugfeature-tracking","text":"https://github.com/Microsoft/mu/issues","title":"Issue/Bug/Feature Tracking"},{"location":"Where/project_resources/#builds","text":"https://dev.azure.com/projectmu/mu/_build","title":"Builds"},{"location":"Where/project_resources/#docs","text":"https://microsoft.github.io/mu/","title":"Docs"},{"location":"Where/project_resources/#collaborate","text":"Send an email request to join the discussion on our Teams channels.","title":"Collaborate"},{"location":"Where/project_resources/#help","text":"For one-off questions, feel free to open an Issue against the Mu repo with the \"question\" tag https://github.com/Microsoft/mu/issues For deeper discussion & faster communication, join our Microsoft Teams channels. To join send an email request .","title":"Help"},{"location":"dyn/mu_basecore/RepoDetails/","text":"Project Mu Basecore Repository \u00b6 Git Details Repository Url: https://github.com/Microsoft/mu_basecore.git Branch: release/201808 Commit: 04733fa49199f06481688fa88e2fd47475d35865 Commit Date: 2019-04-12 12:07:05 -0700 This repository is considered foundational and fundamental to Project Mu. The guiding philosophy is that this any code within this repository should be one or more of the following Part of the build system Common to any silicon architecture Part of the \"API layer\" that contains protocol and library definitions including Industry Standards UEFI Specifications ACPI Specifications Part of the \"PI\" layer that contains driver dispatch logic, event/signaling logic, or memory management logic This can also include central technologies like variable services More Info \u00b6 Please see the Project Mu docs ( https://github.com/Microsoft/mu ) for more information. This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments. Issues \u00b6 Please open any issues in the Project Mu GitHub tracker. More Details Contributing Code or Docs \u00b6 Please follow the general Project Mu Pull Request process. More Details Code Requirements Doc Requirements Builds \u00b6 pip install mu_build mu_build -c corebuild.mu.json More info Copyright & License \u00b6 Copyright \u00a9 2016-2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Upstream License (TianoCore) \u00b6 Copyright \u00a9 2004 - 2016, Intel Corporation. All rights reserved. Copyright \u00a9 2008 - 2010, Apple Inc. All rights reserved. Copyright \u00a9 2011 - 2015, ARM Limited. All rights reserved. Copyright \u00a9 2014 - 2015, Linaro Limited. All rights reserved. Copyright \u00a9 2013 - 2015, Red Hat, Inc. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Repo Details"},{"location":"dyn/mu_basecore/RepoDetails/#project-mu-basecore-repository","text":"Git Details Repository Url: https://github.com/Microsoft/mu_basecore.git Branch: release/201808 Commit: 04733fa49199f06481688fa88e2fd47475d35865 Commit Date: 2019-04-12 12:07:05 -0700 This repository is considered foundational and fundamental to Project Mu. The guiding philosophy is that this any code within this repository should be one or more of the following Part of the build system Common to any silicon architecture Part of the \"API layer\" that contains protocol and library definitions including Industry Standards UEFI Specifications ACPI Specifications Part of the \"PI\" layer that contains driver dispatch logic, event/signaling logic, or memory management logic This can also include central technologies like variable services","title":"Project Mu Basecore Repository"},{"location":"dyn/mu_basecore/RepoDetails/#more-info","text":"Please see the Project Mu docs ( https://github.com/Microsoft/mu ) for more information. This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.","title":"More Info"},{"location":"dyn/mu_basecore/RepoDetails/#issues","text":"Please open any issues in the Project Mu GitHub tracker. More Details","title":"Issues"},{"location":"dyn/mu_basecore/RepoDetails/#contributing-code-or-docs","text":"Please follow the general Project Mu Pull Request process. More Details Code Requirements Doc Requirements","title":"Contributing Code or Docs"},{"location":"dyn/mu_basecore/RepoDetails/#builds","text":"pip install mu_build mu_build -c corebuild.mu.json More info","title":"Builds"},{"location":"dyn/mu_basecore/RepoDetails/#copyright-license","text":"Copyright \u00a9 2016-2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Copyright &amp; License"},{"location":"dyn/mu_basecore/RepoDetails/#upstream-license-tianocore","text":"Copyright \u00a9 2004 - 2016, Intel Corporation. All rights reserved. Copyright \u00a9 2008 - 2010, Apple Inc. All rights reserved. Copyright \u00a9 2011 - 2015, ARM Limited. All rights reserved. Copyright \u00a9 2014 - 2015, Linaro Limited. All rights reserved. Copyright \u00a9 2013 - 2015, Red Hat, Inc. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Upstream License (TianoCore)"},{"location":"dyn/mu_basecore/BaseTools/NugetPublishing/Mu-Basetools-Win32/","text":"Mu BaseTools Win32 Notes \u00b6 This is a set of compiled tools for Edk2 development on Windows. This set has both the standard Edk2 tools as well as additional tools created for Project Mu. Where \u00b6 Information about the TianoCore Edk2 Basetools can be found here: * https://tianocore.org * https://github.com/tianocore/edk2 * https://github.com/tianocore/edk2-BaseTools-win32 Information about Project Mu can be found here: * https://microsoft.github.io/mu/ * https://github.com/Microsoft/mu * https://github.com/microsoft/mu_basecore What \u00b6 TianoCore/Project Mu Edk2 Build tools Version \u00b6 ====== TODO ====== Nuget version is AA.BB.CC If the version is a single number then make it the AA field and use zeros for BB.CC Example: version command is 20160912 then NuGet version is 20160912.0.0 If a version has two numbers partitioned by a \"-\" then make those the AA.BB fields and use zero for the CC Example: version command is 1234-56 then NuGet version is 1234.56.0 Process to publish new version of tool \u00b6 Download desired version from Unzip Make a new folder (for my example I will call it \"new\") Copy the assets to publish into this new folder Run the < TOOL > -v command to see the version. Open cmd prompt in the NugetPublishing dir Pack and push NugetProducerSupport.py --Operation PackAndPush --ConfigFilePath Mu-Basetools-Win32.config.json --Version <nuget version here> --InputFolderPath <path to newly created folder here> --ApiKey <your key here>","title":"Mu-Basetools-Win32"},{"location":"dyn/mu_basecore/BaseTools/NugetPublishing/Mu-Basetools-Win32/#mu-basetools-win32-notes","text":"This is a set of compiled tools for Edk2 development on Windows. This set has both the standard Edk2 tools as well as additional tools created for Project Mu.","title":"Mu BaseTools Win32 Notes"},{"location":"dyn/mu_basecore/BaseTools/NugetPublishing/Mu-Basetools-Win32/#where","text":"Information about the TianoCore Edk2 Basetools can be found here: * https://tianocore.org * https://github.com/tianocore/edk2 * https://github.com/tianocore/edk2-BaseTools-win32 Information about Project Mu can be found here: * https://microsoft.github.io/mu/ * https://github.com/Microsoft/mu * https://github.com/microsoft/mu_basecore","title":"Where"},{"location":"dyn/mu_basecore/BaseTools/NugetPublishing/Mu-Basetools-Win32/#what","text":"TianoCore/Project Mu Edk2 Build tools","title":"What"},{"location":"dyn/mu_basecore/BaseTools/NugetPublishing/Mu-Basetools-Win32/#version","text":"====== TODO ====== Nuget version is AA.BB.CC If the version is a single number then make it the AA field and use zeros for BB.CC Example: version command is 20160912 then NuGet version is 20160912.0.0 If a version has two numbers partitioned by a \"-\" then make those the AA.BB fields and use zero for the CC Example: version command is 1234-56 then NuGet version is 1234.56.0","title":"Version"},{"location":"dyn/mu_basecore/BaseTools/NugetPublishing/Mu-Basetools-Win32/#process-to-publish-new-version-of-tool","text":"Download desired version from Unzip Make a new folder (for my example I will call it \"new\") Copy the assets to publish into this new folder Run the < TOOL > -v command to see the version. Open cmd prompt in the NugetPublishing dir Pack and push NugetProducerSupport.py --Operation PackAndPush --ConfigFilePath Mu-Basetools-Win32.config.json --Version <nuget version here> --InputFolderPath <path to newly created folder here> --ApiKey <your key here>","title":"Process to publish new version of tool"},{"location":"dyn/mu_basecore/BaseTools/NugetPublishing/Mu-Nasm/","text":"Mu-Nasm Notes \u00b6 This tool is the open source NASM assembler. More information can be found at https://nasm.us/ Where \u00b6 Go to https://nasm.us and find the desired download. What \u00b6 nasm.exe is the assembler. Version \u00b6 nasm.exe -v Nuget version is AA.BB.CC The version command generally outputs a version in AA.BB.CC format. Process to publish new version of tool \u00b6 Download desired version from nasm.us Unzip Make a new folder (for my example I will call it \"new\") Copy the assets to publish into this new folder (in this case just nasm.exe and ndisasm.exe) Run the nasm.exe -v command to see the version. Open cmd prompt in the NugetPublishing dir Pack and push NugetProducerSupport.py --Operation PackAndPush --ConfigFilePath Mu-Nasm.config.json --Version <nuget version here> --InputFolderPath <path to newly created folder here> --ApiKey <your key here>","title":"Mu-Nasm"},{"location":"dyn/mu_basecore/BaseTools/NugetPublishing/Mu-Nasm/#mu-nasm-notes","text":"This tool is the open source NASM assembler. More information can be found at https://nasm.us/","title":"Mu-Nasm Notes"},{"location":"dyn/mu_basecore/BaseTools/NugetPublishing/Mu-Nasm/#where","text":"Go to https://nasm.us and find the desired download.","title":"Where"},{"location":"dyn/mu_basecore/BaseTools/NugetPublishing/Mu-Nasm/#what","text":"nasm.exe is the assembler.","title":"What"},{"location":"dyn/mu_basecore/BaseTools/NugetPublishing/Mu-Nasm/#version","text":"nasm.exe -v Nuget version is AA.BB.CC The version command generally outputs a version in AA.BB.CC format.","title":"Version"},{"location":"dyn/mu_basecore/BaseTools/NugetPublishing/Mu-Nasm/#process-to-publish-new-version-of-tool","text":"Download desired version from nasm.us Unzip Make a new folder (for my example I will call it \"new\") Copy the assets to publish into this new folder (in this case just nasm.exe and ndisasm.exe) Run the nasm.exe -v command to see the version. Open cmd prompt in the NugetPublishing dir Pack and push NugetProducerSupport.py --Operation PackAndPush --ConfigFilePath Mu-Nasm.config.json --Version <nuget version here> --InputFolderPath <path to newly created folder here> --ApiKey <your key here>","title":"Process to publish new version of tool"},{"location":"dyn/mu_basecore/BaseTools/NugetPublishing/ReadMe/","text":"NugetPublishing \u00b6 Tool to help create and publish nuget packages for Project Mu resources Usage \u00b6 See NugetPublishing.py -h Authentication \u00b6 For publishing most service providers require authentication. The --ApiKey parameter allows the caller to supply a unique key for authorization. There are numerous ways to authenticate. For example * Azure Dev Ops: * VSTS credential manager. In an interactive session a dialog will popup for the user to login * Tokens can also be used as the API key. Go to your account page to generate a token that can push packages * NuGet.org * Must use an API key. Go to your account page and generate a key. Example: Creating new config file for first use \u00b6 TODO Example: Publishing new version of tool \u00b6 Using an existing config file publish a new iasl.exe. See the example file iasl.config.json 1. Download version from acpica.org 2. Unzip 3. Make a new folder (for my example I will call it \"new\") 4. Copy the assets to publish into this new folder (in this case just iasl.exe) 5. Run the iasl.exe -v command to see the version. 6. Open cmd prompt in the NugetPublishing dir 7. Pack and push (here is my example command. ) NugetProducerSupport.py --Operation PackAndPush --ConfigFilePath iasl.config.json --Version 20180209.0.0 --InputFolderPath \"C:\\temp\\iasl-win-20180209\\new\" --ApiKey <your key here>","title":"Read Me"},{"location":"dyn/mu_basecore/BaseTools/NugetPublishing/ReadMe/#nugetpublishing","text":"Tool to help create and publish nuget packages for Project Mu resources","title":"NugetPublishing"},{"location":"dyn/mu_basecore/BaseTools/NugetPublishing/ReadMe/#usage","text":"See NugetPublishing.py -h","title":"Usage"},{"location":"dyn/mu_basecore/BaseTools/NugetPublishing/ReadMe/#authentication","text":"For publishing most service providers require authentication. The --ApiKey parameter allows the caller to supply a unique key for authorization. There are numerous ways to authenticate. For example * Azure Dev Ops: * VSTS credential manager. In an interactive session a dialog will popup for the user to login * Tokens can also be used as the API key. Go to your account page to generate a token that can push packages * NuGet.org * Must use an API key. Go to your account page and generate a key.","title":"Authentication"},{"location":"dyn/mu_basecore/BaseTools/NugetPublishing/ReadMe/#example-creating-new-config-file-for-first-use","text":"TODO","title":"Example: Creating new config file for first use"},{"location":"dyn/mu_basecore/BaseTools/NugetPublishing/ReadMe/#example-publishing-new-version-of-tool","text":"Using an existing config file publish a new iasl.exe. See the example file iasl.config.json 1. Download version from acpica.org 2. Unzip 3. Make a new folder (for my example I will call it \"new\") 4. Copy the assets to publish into this new folder (in this case just iasl.exe) 5. Run the iasl.exe -v command to see the version. 6. Open cmd prompt in the NugetPublishing dir 7. Pack and push (here is my example command. ) NugetProducerSupport.py --Operation PackAndPush --ConfigFilePath iasl.config.json --Version 20180209.0.0 --InputFolderPath \"C:\\temp\\iasl-win-20180209\\new\" --ApiKey <your key here>","title":"Example: Publishing new version of tool"},{"location":"dyn/mu_basecore/BaseTools/NugetPublishing/iasl/","text":"IASL Notes \u00b6 This tool is the open source ACPI compiler. More information can be found at https://acpica.org/ Where \u00b6 For Windows Binary tools: https://acpica.org/downloads/binary-tools What \u00b6 iasl.exe is the compiler. Version \u00b6 iasl.exe -v Nuget version is AA.BB.CC If the version is a single number then make it the AA field and use zeros for BB.CC Example: version command is 20160912 then NuGet version is 20160912.0.0 If a version has two numbers partitioned by a \"-\" then make those the AA.BB fields and use zero for the CC Example: version command is 1234-56 then NuGet version is 1234.56.0 Process to publish new version of tool \u00b6 Download desired version from acpica.org Unzip Make a new folder (for my example I will call it \"new\") Copy the assets to publish into this new folder (in this case just iasl.exe) Run the iasl.exe -v command to see the version. Open cmd prompt in the NugetPublishing dir Pack and push NugetProducerSupport.py --Operation PackAndPush --ConfigFilePath iasl.config.json --Version <nuget version here> --InputFolderPath <path to newly created folder here> --ApiKey <your key here>","title":"iasl"},{"location":"dyn/mu_basecore/BaseTools/NugetPublishing/iasl/#iasl-notes","text":"This tool is the open source ACPI compiler. More information can be found at https://acpica.org/","title":"IASL Notes"},{"location":"dyn/mu_basecore/BaseTools/NugetPublishing/iasl/#where","text":"For Windows Binary tools: https://acpica.org/downloads/binary-tools","title":"Where"},{"location":"dyn/mu_basecore/BaseTools/NugetPublishing/iasl/#what","text":"iasl.exe is the compiler.","title":"What"},{"location":"dyn/mu_basecore/BaseTools/NugetPublishing/iasl/#version","text":"iasl.exe -v Nuget version is AA.BB.CC If the version is a single number then make it the AA field and use zeros for BB.CC Example: version command is 20160912 then NuGet version is 20160912.0.0 If a version has two numbers partitioned by a \"-\" then make those the AA.BB fields and use zero for the CC Example: version command is 1234-56 then NuGet version is 1234.56.0","title":"Version"},{"location":"dyn/mu_basecore/BaseTools/NugetPublishing/iasl/#process-to-publish-new-version-of-tool","text":"Download desired version from acpica.org Unzip Make a new folder (for my example I will call it \"new\") Copy the assets to publish into this new folder (in this case just iasl.exe) Run the iasl.exe -v command to see the version. Open cmd prompt in the NugetPublishing dir Pack and push NugetProducerSupport.py --Operation PackAndPush --ConfigFilePath iasl.config.json --Version <nuget version here> --InputFolderPath <path to newly created folder here> --ApiKey <your key here>","title":"Process to publish new version of tool"},{"location":"dyn/mu_basecore/BaseTools/Plugin/FdSizeReport/ReadMe/","text":"Flash Descriptor Size Report Generator Plugin and Command Line Tool \u00b6 Copyright \u00b6 Copyright \u00a9 2018 Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. About \u00b6 FdSizeReportGenerator is a UEFI Build Plugin and Command Line Tool used to parse EDK2 build reports and FDF files and then produce an HTML report of the module sizes and fd sizes. The HTML report then allows deeper analysis of the Flash Usage, the Module Sizes, and overall breakdown of usage. UEFI Build Plugin \u00b6 When used in the plugin capacity this plugin will do its work in the do_post_build function. This plugin uses the following variables from the build environment: 1. BUILDREPORTING - [REQUIRED] - must be True otherwise plugin will not run 1. FLASH_DEFINITION - [REQUIRED] - must point to the platform FDF file 1. BUILDREPORT_FILE - [REQUIRED] - must point to the build report file 1. FDSIZEREPORT_FILE - [OPTIONAL] - should be path for output HTML report. If not set default path will be set based on BUILD_OUTPUT_BASE variable 1. PRODUCT_NAME - [OPTIONAL] - should give friendly product name 1. BUILDID_STRING - [OPTIONAL] - should give friendly version string of firmware version Command Line Tool \u00b6 When used as a command line tool check the required parameters by using the -h option.","title":"Fd Size Report"},{"location":"dyn/mu_basecore/BaseTools/Plugin/FdSizeReport/ReadMe/#flash-descriptor-size-report-generator-plugin-and-command-line-tool","text":"","title":"Flash Descriptor Size Report Generator Plugin and Command Line Tool"},{"location":"dyn/mu_basecore/BaseTools/Plugin/FdSizeReport/ReadMe/#copyright","text":"Copyright \u00a9 2018 Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Copyright"},{"location":"dyn/mu_basecore/BaseTools/Plugin/FdSizeReport/ReadMe/#about","text":"FdSizeReportGenerator is a UEFI Build Plugin and Command Line Tool used to parse EDK2 build reports and FDF files and then produce an HTML report of the module sizes and fd sizes. The HTML report then allows deeper analysis of the Flash Usage, the Module Sizes, and overall breakdown of usage.","title":"About"},{"location":"dyn/mu_basecore/BaseTools/Plugin/FdSizeReport/ReadMe/#uefi-build-plugin","text":"When used in the plugin capacity this plugin will do its work in the do_post_build function. This plugin uses the following variables from the build environment: 1. BUILDREPORTING - [REQUIRED] - must be True otherwise plugin will not run 1. FLASH_DEFINITION - [REQUIRED] - must point to the platform FDF file 1. BUILDREPORT_FILE - [REQUIRED] - must point to the build report file 1. FDSIZEREPORT_FILE - [OPTIONAL] - should be path for output HTML report. If not set default path will be set based on BUILD_OUTPUT_BASE variable 1. PRODUCT_NAME - [OPTIONAL] - should give friendly product name 1. BUILDID_STRING - [OPTIONAL] - should give friendly version string of firmware version","title":"UEFI Build Plugin"},{"location":"dyn/mu_basecore/BaseTools/Plugin/FdSizeReport/ReadMe/#command-line-tool","text":"When used as a command line tool check the required parameters by using the -h option.","title":"Command Line Tool"},{"location":"dyn/mu_basecore/BaseTools/Plugin/OverrideValidation/ReadMe/","text":"Override Validation Plugin \u00b6 Module Level Override Validation Plugin and Linkage Creation Command Line Tool About \u00b6 OverrideValidation is a UEFI Build Plugin and Command Line Tool used to create linkage between overriding and overridden modules and parse INF files referenced in platform DSC files during build process and then produce a TXT report of the module overriding status. The TXT report then allows deeper analysis of the Overriding Hierarchy, the Override Linkage Validity, the Override Linkage Ages, and overall breakdown of usage. UEFI Build Plugin \u00b6 When used in the plugin capacity this plugin will do its override linkage validation work in the do_pre_build function. This plugin uses the following variables from the build environment: ACTIVE_PLATFORM - [REQUIRED] - must be workspace relative or package path relative pointing to the target platform dsc file, otherwise this validation will not run BUILD_OUTPUT_BASE - [REQUIRED] - must be an absolute path specified to store override log at $(BUILD_OUTPUT_BASE)/OVERRIDELOG.TXT, otherwise no report will be generated BUILDSHA - [OPTIONAL] - should have valid commit sha value for report purpose, if not provided, 'None' will be used for the corresponding field PRODUCT_NAME - [OPTIONAL] - should give friendly product name, if not provided, 'None' will be used for the corresponding field BUILDID_STRING - [OPTIONAL] - should give friendly version string of firmware version, if not provided, 'None' will be used for the corresponding field Command Line Tool \u00b6 When used as a command line tool, this tool takes the absolute path of workspace (the root directory of Devices repo) as well as the absolute path of overridden module's inf file and then generate a screen-print line for users to include in overriding modules in order to create override linkage. Check the required parameters by using the -h option for command line argument details. Example \u00b6 Command to generate an override record: OverrideValidation.py -w C:\\Repo -m C:\\Repo\\SM_UDK\\MdePkg\\Library\\BaseMemoryLib\\BaseMemoryLib.inf Override record to be included in overriding module's inf: #Override : 00000001 | MdePkg/Library/BaseMemoryLib/BaseMemoryLib.inf | cc255d9de141fccbdfca9ad02e0daa47 | 2018-05-09T17-54-17 Override log generated during pre-build process: Platform : PlatformName Version : 123.456 . 7890 Date : 2018 - 05 - 11 T17 - 56 - 27 Commit : _SHA_2c9def7a4ce84ef26ed6597afcc60cee4e5c92c0 State : 3 / 4 Overrides ---------------------------------------------------------------- OVERRIDER : MdePkg /Library/BaseMemoryLibOptDxe/ BaseMemoryLibOptDxe . inf ORIGINALS : + MdePkg /Library/BaseMemoryLib/ BaseMemoryLib . inf | SUCCESS | 2 days OVERRIDER : PlatformNamePkg /Library/NvmConfigLib/ NvmConfigLib . inf ORIGINALS : + MdeModulePkg /Bus/Pci/NvmExpressDxe/ NvmExpressDxe . inf | MISMATCH | 35 days | Current State : 62929532257365 b261080b7e7b1c4e7a | Last Fingerprint : dc9f5e3af1efbac6cf5485b672291903 + MdePkg /Library/BaseMemoryLibOptDxe/ BaseMemoryLibOptDxe . inf | SUCCESS | 0 days + MdePkg /Library/BaseMemoryLib/ BaseMemoryLib . inf | SUCCESS | 2 days Copyright \u00b6 Copyright \u00a9 2018 Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Override Validation"},{"location":"dyn/mu_basecore/BaseTools/Plugin/OverrideValidation/ReadMe/#override-validation-plugin","text":"Module Level Override Validation Plugin and Linkage Creation Command Line Tool","title":"Override Validation Plugin"},{"location":"dyn/mu_basecore/BaseTools/Plugin/OverrideValidation/ReadMe/#about","text":"OverrideValidation is a UEFI Build Plugin and Command Line Tool used to create linkage between overriding and overridden modules and parse INF files referenced in platform DSC files during build process and then produce a TXT report of the module overriding status. The TXT report then allows deeper analysis of the Overriding Hierarchy, the Override Linkage Validity, the Override Linkage Ages, and overall breakdown of usage.","title":"About"},{"location":"dyn/mu_basecore/BaseTools/Plugin/OverrideValidation/ReadMe/#uefi-build-plugin","text":"When used in the plugin capacity this plugin will do its override linkage validation work in the do_pre_build function. This plugin uses the following variables from the build environment: ACTIVE_PLATFORM - [REQUIRED] - must be workspace relative or package path relative pointing to the target platform dsc file, otherwise this validation will not run BUILD_OUTPUT_BASE - [REQUIRED] - must be an absolute path specified to store override log at $(BUILD_OUTPUT_BASE)/OVERRIDELOG.TXT, otherwise no report will be generated BUILDSHA - [OPTIONAL] - should have valid commit sha value for report purpose, if not provided, 'None' will be used for the corresponding field PRODUCT_NAME - [OPTIONAL] - should give friendly product name, if not provided, 'None' will be used for the corresponding field BUILDID_STRING - [OPTIONAL] - should give friendly version string of firmware version, if not provided, 'None' will be used for the corresponding field","title":"UEFI Build Plugin"},{"location":"dyn/mu_basecore/BaseTools/Plugin/OverrideValidation/ReadMe/#command-line-tool","text":"When used as a command line tool, this tool takes the absolute path of workspace (the root directory of Devices repo) as well as the absolute path of overridden module's inf file and then generate a screen-print line for users to include in overriding modules in order to create override linkage. Check the required parameters by using the -h option for command line argument details.","title":"Command Line Tool"},{"location":"dyn/mu_basecore/BaseTools/Plugin/OverrideValidation/ReadMe/#example","text":"Command to generate an override record: OverrideValidation.py -w C:\\Repo -m C:\\Repo\\SM_UDK\\MdePkg\\Library\\BaseMemoryLib\\BaseMemoryLib.inf Override record to be included in overriding module's inf: #Override : 00000001 | MdePkg/Library/BaseMemoryLib/BaseMemoryLib.inf | cc255d9de141fccbdfca9ad02e0daa47 | 2018-05-09T17-54-17 Override log generated during pre-build process: Platform : PlatformName Version : 123.456 . 7890 Date : 2018 - 05 - 11 T17 - 56 - 27 Commit : _SHA_2c9def7a4ce84ef26ed6597afcc60cee4e5c92c0 State : 3 / 4 Overrides ---------------------------------------------------------------- OVERRIDER : MdePkg /Library/BaseMemoryLibOptDxe/ BaseMemoryLibOptDxe . inf ORIGINALS : + MdePkg /Library/BaseMemoryLib/ BaseMemoryLib . inf | SUCCESS | 2 days OVERRIDER : PlatformNamePkg /Library/NvmConfigLib/ NvmConfigLib . inf ORIGINALS : + MdeModulePkg /Bus/Pci/NvmExpressDxe/ NvmExpressDxe . inf | MISMATCH | 35 days | Current State : 62929532257365 b261080b7e7b1c4e7a | Last Fingerprint : dc9f5e3af1efbac6cf5485b672291903 + MdePkg /Library/BaseMemoryLibOptDxe/ BaseMemoryLibOptDxe . inf | SUCCESS | 0 days + MdePkg /Library/BaseMemoryLib/ BaseMemoryLib . inf | SUCCESS | 2 days","title":"Example"},{"location":"dyn/mu_basecore/BaseTools/Plugin/OverrideValidation/ReadMe/#copyright","text":"Copyright \u00a9 2018 Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Copyright"},{"location":"dyn/mu_basecore/BaseTools/Scripts/PackageDocumentTools/Readme/","text":"Prerequisite Tools: 1. Install Python 3.6.6 from https://www.python.org/downloads/release/python-366/ 2. Install wxPython 4.0.3 from https://pypi.org/project/wxPython/#files generally the libraries will be installed at python's subfolder, for example in windows: c:\\python27\\Lib\\site-packages\\ 3. Install DoxyGen 1.8.6 from https://sourceforge.net/projects/doxygen/files/rel-1.8.6/ 4. (Windows only) Install Htmlhelp tool from https://msdn.microsoft.com/en-us/library/windows/desktop/ms669985(v=vs.85).aspx Limitation: 1. Current tool doesn't work on latest wxPython and DoxyGen tool. Please use the sepecific version in above. Run the Tool: a) Run with GUI: 1. Enter src folder, double click \"packagedocapp.pyw\" or run command \"python packagedocapp.pyw\" to open the GUI. 2. Make sure all the information in blank are correct. 3. Click \"Generate Package Document!\" b) Run with command line: 1. Open command line window 2. Enter src folder, for example: \"cd C:\\PackageDocumentTools\\src\" 3. Run \"python packagedoc_cli.py --help\" for detail command.","title":"Package Document Tools"},{"location":"dyn/mu_basecore/BaseTools/Source/C/BrotliCompress/","text":"Introduction \u00b6 Brotli is a generic-purpose lossless compression algorithm that compresses data using a combination of a modern variant of the LZ77 algorithm, Huffman coding and 2 nd order context modeling, with a compression ratio comparable to the best currently available general-purpose compression methods. It is similar in speed with deflate but offers more dense compression. The specification of the Brotli Compressed Data Format is defined in RFC 7932 . Brotli is open-sourced under the MIT License, see the LICENSE file. Brotli mailing list: https://groups.google.com/forum/#!forum/brotli Benchmarks \u00b6 Squash Compression Benchmark / Unstable Squash Compression Benchmark Large Text Compression Benchmark Lzturbo Benchmark Related projects \u00b6 Independent decoder implementation by Mark Adler, based entirely on format specification. JavaScript port of brotli decoder . Could be used directly via npm install brotli","title":"README"},{"location":"dyn/mu_basecore/BaseTools/Source/C/BrotliCompress/#introduction","text":"Brotli is a generic-purpose lossless compression algorithm that compresses data using a combination of a modern variant of the LZ77 algorithm, Huffman coding and 2 nd order context modeling, with a compression ratio comparable to the best currently available general-purpose compression methods. It is similar in speed with deflate but offers more dense compression. The specification of the Brotli Compressed Data Format is defined in RFC 7932 . Brotli is open-sourced under the MIT License, see the LICENSE file. Brotli mailing list: https://groups.google.com/forum/#!forum/brotli","title":"Introduction"},{"location":"dyn/mu_basecore/BaseTools/Source/C/BrotliCompress/#benchmarks","text":"Squash Compression Benchmark / Unstable Squash Compression Benchmark Large Text Compression Benchmark Lzturbo Benchmark","title":"Benchmarks"},{"location":"dyn/mu_basecore/BaseTools/Source/C/BrotliCompress/#related-projects","text":"Independent decoder implementation by Mark Adler, based entirely on format specification. JavaScript port of brotli decoder . Could be used directly via npm install brotli","title":"Related projects"},{"location":"dyn/mu_basecore/BaseTools/Source/C/BrotliCompress/tools/brotli/","text":"brotli(1) -- brotli, unbrotli - compress or decompress files \u00b6 SYNOPSIS \u00b6 brotli [ OPTION|FILE ]... unbrotli is equivalent to brotli --decompress DESCRIPTION \u00b6 brotli is a generic-purpose lossless compression algorithm that compresses data using a combination of a modern variant of the LZ77 algorithm, Huffman coding and 2-nd order context modeling, with a compression ratio comparable to the best currently available general-purpose compression methods. It is similar in speed with deflate but offers more dense compression. brotli command line syntax similar to gzip (1) and zstd (1) . Unlike gzip (1) , source files are preserved by default. It is possible to remove them after processing by using the --rm option . Arguments that look like \" --name \" or \" --name=value \" are options . Every option has a short form \" -x \" or \" -x value \". Multiple short form options could be coalesced: \" --decompress --stdout --suffix=.b \" works the same as \" -d -s -S .b \" and \" -dsS .b \" brotli has 3 operation modes: default mode is compression; --decompress option activates decompression mode; --test option switches to integrity test mode; this option is equivalent to \" --decompress --stdout \" except that the decompressed data is discarded instead of being written to standard output. Every non-option argument is a file entry. If no files are given or file is \" - \", brotli reads from standard input. All arguments after \" -- \" are file entries. Unless --stdout or --output is specified, files are written to a new file whose name is derived from the source file name: when compressing, a suffix is appended to the source filename to get the target filename when decompressing, a suffix is removed from the source filename to get the target filename Default suffix is .br , but it could be specified with --suffix option. Conflicting or duplicate options are not allowed. OPTIONS \u00b6 -# : compression level (0-9); bigger values cause denser, but slower compression -c , --stdout : write on standard output -d , --decompress : decompress mode -f , --force : force output file overwrite -h , --help : display this help and exit -j , --rm : remove source file(s); gzip (1) -like behaviour -k , --keep : keep source file(s); zstd (1) -like behaviour -n , --no-copy-stat : do not copy source file(s) attributes -o FILE , --output=FILE output file; valid only if there is a single input entry -q NUM , --quality=NUM : compression level (0-11); bigger values cause denser, but slower compression -t , --test : test file integrity mode -v , --verbose : increase output verbosity -w NUM , --lgwin=NUM : set LZ77 window size (0, 10-24) (default: 22); window size is (2**NUM - 16) ; 0 lets compressor decide over the optimal value; bigger windows size improve density; decoder might require up to window size memory to operate -S SUF , --suffix=SUF : output file suffix (default: .br ) -V , --version : display version and exit -Z , --best : use best compression level (default); same as \" -q 11 \" SEE ALSO \u00b6 brotli file format is defined in RFC 7932 . brotli is open-sourced under the MIT License . Mailing list: https://groups.google.com/forum/#!forum/brotli BUGS \u00b6 Report bugs at: https://github.com/google/brotli/issues","title":"tools"},{"location":"dyn/mu_basecore/BaseTools/Source/C/BrotliCompress/tools/brotli/#brotli1-brotli-unbrotli-compress-or-decompress-files","text":"","title":"brotli(1) -- brotli, unbrotli - compress or decompress files"},{"location":"dyn/mu_basecore/BaseTools/Source/C/BrotliCompress/tools/brotli/#synopsis","text":"brotli [ OPTION|FILE ]... unbrotli is equivalent to brotli --decompress","title":"SYNOPSIS"},{"location":"dyn/mu_basecore/BaseTools/Source/C/BrotliCompress/tools/brotli/#description","text":"brotli is a generic-purpose lossless compression algorithm that compresses data using a combination of a modern variant of the LZ77 algorithm, Huffman coding and 2-nd order context modeling, with a compression ratio comparable to the best currently available general-purpose compression methods. It is similar in speed with deflate but offers more dense compression. brotli command line syntax similar to gzip (1) and zstd (1) . Unlike gzip (1) , source files are preserved by default. It is possible to remove them after processing by using the --rm option . Arguments that look like \" --name \" or \" --name=value \" are options . Every option has a short form \" -x \" or \" -x value \". Multiple short form options could be coalesced: \" --decompress --stdout --suffix=.b \" works the same as \" -d -s -S .b \" and \" -dsS .b \" brotli has 3 operation modes: default mode is compression; --decompress option activates decompression mode; --test option switches to integrity test mode; this option is equivalent to \" --decompress --stdout \" except that the decompressed data is discarded instead of being written to standard output. Every non-option argument is a file entry. If no files are given or file is \" - \", brotli reads from standard input. All arguments after \" -- \" are file entries. Unless --stdout or --output is specified, files are written to a new file whose name is derived from the source file name: when compressing, a suffix is appended to the source filename to get the target filename when decompressing, a suffix is removed from the source filename to get the target filename Default suffix is .br , but it could be specified with --suffix option. Conflicting or duplicate options are not allowed.","title":"DESCRIPTION"},{"location":"dyn/mu_basecore/BaseTools/Source/C/BrotliCompress/tools/brotli/#options","text":"-# : compression level (0-9); bigger values cause denser, but slower compression -c , --stdout : write on standard output -d , --decompress : decompress mode -f , --force : force output file overwrite -h , --help : display this help and exit -j , --rm : remove source file(s); gzip (1) -like behaviour -k , --keep : keep source file(s); zstd (1) -like behaviour -n , --no-copy-stat : do not copy source file(s) attributes -o FILE , --output=FILE output file; valid only if there is a single input entry -q NUM , --quality=NUM : compression level (0-11); bigger values cause denser, but slower compression -t , --test : test file integrity mode -v , --verbose : increase output verbosity -w NUM , --lgwin=NUM : set LZ77 window size (0, 10-24) (default: 22); window size is (2**NUM - 16) ; 0 lets compressor decide over the optimal value; bigger windows size improve density; decoder might require up to window size memory to operate -S SUF , --suffix=SUF : output file suffix (default: .br ) -V , --version : display version and exit -Z , --best : use best compression level (default); same as \" -q 11 \"","title":"OPTIONS"},{"location":"dyn/mu_basecore/BaseTools/Source/C/BrotliCompress/tools/brotli/#see-also","text":"brotli file format is defined in RFC 7932 . brotli is open-sourced under the MIT License . Mailing list: https://groups.google.com/forum/#!forum/brotli","title":"SEE ALSO"},{"location":"dyn/mu_basecore/BaseTools/Source/C/BrotliCompress/tools/brotli/#bugs","text":"Report bugs at: https://github.com/google/brotli/issues","title":"BUGS"},{"location":"dyn/mu_basecore/BaseTools/Source/Python/Pkcs7Sign/Readme/","text":"Step by step to generate sample self-signed X.509 certificate chain and sign data with PKCS7 structure \u00b6 This readme demonstrates how to generate 3-layer X.509 certificate chain (RootCA -> IntermediateCA -> SigningCert) with OpenSSL commands, and user MUST set a UNIQUE Subject Name (\"Common Name\") on these three different certificates. How to generate a self-signed X.509 certificate chain via OPENSSL \u00b6 Set OPENSSL environment. NOTE: Below steps are required for Windows. Linux may already have the OPENSSL environment correctly. set OPENSSL_HOME=c:\\home\\openssl\\openssl-[version] set OPENSSL_CONF=%OPENSSL_HOME%\\apps\\openssl.cnf When a user uses OpenSSL (req or ca command) to generate the certificates, OpenSSL will use the openssl.cnf file as the configuration data (can use \"-config path/to/openssl.cnf\" to describe the specific config file). The user need check the openssl.cnf file, to find your CA path setting, e.g. check if the path exists in [ CA_default ] section. [ CA_default ] dir = ./demoCA # Where everything is kept You may need the following steps for initialization: rd ./demoCA /S/Q mkdir ./demoCA echo.>./demoCA/index.txt echo 01 > ./demoCA/serial mkdir ./demoCA/newcerts OpenSSL will apply the options from the specified sections in openssl.cnf when creating certificates or certificate signing requests. Make sure your configuration in openssl.cnf is correct and rational for certificate constraints. The following sample sections were used when generating test certificates in this readme. ... [ req ] default_bits = 2048 default_keyfile = privkey.pem distinguished_name = req_distinguished_name attributes = req_attributes x509_extensions = v3_ca # The extensions to add to the self signed cert ... [ v3_ca ] # Extensions for a typical Root CA. subjectKeyIdentifier=hash authorityKeyIdentifier=keyid:always,issuer basicConstraints = critical,CA:true keyUsage = critical, digitalSignature, cRLSign, keyCertSign ... [ v3_intermediate_ca ] # Extensions for a typical intermediate CA. subjectKeyIdentifier = hash authorityKeyIdentifier = keyid:always,issuer basicConstraints = critical, CA:true keyUsage = critical, digitalSignature, cRLSign, keyCertSign ... [ usr_cert ] # Extensions for user end certificates. basicConstraints = CA:FALSE nsCertType = client, email subjectKeyIdentifier = hash authorityKeyIdentifier = keyid,issuer keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment extendedKeyUsage = clientAuth, emailProtection ... Generate the certificate chain: NOTE: User MUST set a UNIQUE \"Common Name\" on the different certificate 1) Generate the Root Pair: Generate a root key: openssl genrsa -aes256 -out TestRoot.key 2048 Generate a self-signed root certificate: openssl req -extensions v3_ca -new -x509 -days 3650 -key TestRoot.key -out TestRoot.crt openssl x509 -in TestRoot.crt -out TestRoot.cer -outform DER openssl x509 -inform DER -in TestRoot.cer -outform PEM -out TestRoot.pub.pem 2) Generate the Intermediate Pair: Generate the intermediate key: openssl genrsa -aes256 -out TestSub.key 2048 Generate the intermediate certificate: openssl req -new -days 3650 -key TestSub.key -out TestSub.csr openssl ca -extensions v3_intermediate_ca -in TestSub.csr -days 3650 -out TestSub.crt -cert TestRoot.crt -keyfile TestRoot.key openssl x509 -in TestSub.crt -out TestSub.cer -outform DER openssl x509 -inform DER -in TestSub.cer -outform PEM -out TestSub.pub.pem 3) Generate User Key Pair for Data Signing: Generate User key: openssl genrsa -aes256 -out TestCert.key 2048 Generate User certificate: openssl req -new -days 3650 -key TestCert.key -out TestCert.csr openssl ca -extensions usr_cert -in TestCert.csr -days 3650 -out TestCert.crt -cert TestSub.crt -keyfile TestSub.key openssl x509 -in TestCert.crt -out TestCert.cer -outform DER openssl x509 -inform DER -in TestCert.cer -outform PEM -out TestCert.pub.pem Convert Key and Certificate for signing. Password is removed with -nodes flag for convenience in this sample. openssl pkcs12 -export -out TestCert.pfx -inkey TestCert.key -in TestCert.crt openssl pkcs12 -in TestCert.pfx -nodes -out TestCert.pem Verify Data Signing & Verification with new X.509 Certificate Chain 1) Sign a Binary File to generate a detached PKCS7 signature: openssl smime -sign -binary -signer TestCert.pem -outform DER -md sha256 -certfile TestSub.pub.pem -out test.bin.p7 -in test.bin 2) Verify PKCS7 Signature of a Binary File: openssl smime -verify -inform DER -in test.bin.p7 -content test.bin -CAfile TestRoot.pub.pem -out test.org.bin Generate DSC PCD include files for Certificate \u00b6 The BinToPcd utility can be used to convert the binary Certificate file to a text file can be included from a DSC file to set a PCD to the contents of the Certificate file. The following 2 PCDs can be set to the PKCS7 Certificate value. The first one supports a single certificate. The second one supports multiple certificate values using the XDR format. * gEfiSecurityPkgTokenSpaceGuid.PcdPkcs7CertBuffer * gFmpDevicePkgTokenSpaceGuid.PcdFmpDevicePkcs7CertBufferXdr Generate DSC PCD include files: BinToPcd.py -i TestRoot.cer -p gEfiSecurityPkgTokenSpaceGuid.PcdPkcs7CertBuffer -o TestRoot.cer.gEfiSecurityPkgTokenSpaceGuid.PcdPkcs7CertBuffer.inc BinToPcd.py -i TestRoot.cer -p gFmpDevicePkgTokenSpaceGuid.PcdFmpDevicePkcs7CertBufferXdr -x -o TestRoot.cer.gFmpDevicePkgTokenSpaceGuid.PcdFmpDevicePkcs7CertBufferXdr.inc These files can be used in !include statements in DSC file PCD sections. For example: Platform scoped fixed at build PCD section [PcdsFixedAtBuild] !include BaseTools/Source/Python/Pkcs7Sign/TestRoot.cer.gEfiSecurityPkgTokenSpaceGuid.PcdPkcs7CertBuffer.inc Platform scoped patchable in module PCD section [PcdsPatchableInModule] !include BaseTools/Source/Python/Pkcs7Sign/TestRoot.cer.gFmpDevicePkgTokenSpaceGuid.PcdFmpDevicePkcs7CertBufferXdr.inc Module scoped fixed at build PCD section [Components] FmpDevicePkg/FmpDxe/FmpDxe.inf { <PcdsFixedAtBuild> !include BaseTools/Source/Python/Pkcs7Sign/TestRoot.cer.gFmpDevicePkgTokenSpaceGuid.PcdFmpDevicePkcs7CertBufferXdr.inc }","title":"Pkcs7Sign"},{"location":"dyn/mu_basecore/BaseTools/Source/Python/Pkcs7Sign/Readme/#step-by-step-to-generate-sample-self-signed-x509-certificate-chain-and-sign-data-with-pkcs7-structure","text":"This readme demonstrates how to generate 3-layer X.509 certificate chain (RootCA -> IntermediateCA -> SigningCert) with OpenSSL commands, and user MUST set a UNIQUE Subject Name (\"Common Name\") on these three different certificates.","title":"Step by step to generate sample self-signed X.509 certificate chain and sign data with PKCS7 structure"},{"location":"dyn/mu_basecore/BaseTools/Source/Python/Pkcs7Sign/Readme/#how-to-generate-a-self-signed-x509-certificate-chain-via-openssl","text":"Set OPENSSL environment. NOTE: Below steps are required for Windows. Linux may already have the OPENSSL environment correctly. set OPENSSL_HOME=c:\\home\\openssl\\openssl-[version] set OPENSSL_CONF=%OPENSSL_HOME%\\apps\\openssl.cnf When a user uses OpenSSL (req or ca command) to generate the certificates, OpenSSL will use the openssl.cnf file as the configuration data (can use \"-config path/to/openssl.cnf\" to describe the specific config file). The user need check the openssl.cnf file, to find your CA path setting, e.g. check if the path exists in [ CA_default ] section. [ CA_default ] dir = ./demoCA # Where everything is kept You may need the following steps for initialization: rd ./demoCA /S/Q mkdir ./demoCA echo.>./demoCA/index.txt echo 01 > ./demoCA/serial mkdir ./demoCA/newcerts OpenSSL will apply the options from the specified sections in openssl.cnf when creating certificates or certificate signing requests. Make sure your configuration in openssl.cnf is correct and rational for certificate constraints. The following sample sections were used when generating test certificates in this readme. ... [ req ] default_bits = 2048 default_keyfile = privkey.pem distinguished_name = req_distinguished_name attributes = req_attributes x509_extensions = v3_ca # The extensions to add to the self signed cert ... [ v3_ca ] # Extensions for a typical Root CA. subjectKeyIdentifier=hash authorityKeyIdentifier=keyid:always,issuer basicConstraints = critical,CA:true keyUsage = critical, digitalSignature, cRLSign, keyCertSign ... [ v3_intermediate_ca ] # Extensions for a typical intermediate CA. subjectKeyIdentifier = hash authorityKeyIdentifier = keyid:always,issuer basicConstraints = critical, CA:true keyUsage = critical, digitalSignature, cRLSign, keyCertSign ... [ usr_cert ] # Extensions for user end certificates. basicConstraints = CA:FALSE nsCertType = client, email subjectKeyIdentifier = hash authorityKeyIdentifier = keyid,issuer keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment extendedKeyUsage = clientAuth, emailProtection ... Generate the certificate chain: NOTE: User MUST set a UNIQUE \"Common Name\" on the different certificate 1) Generate the Root Pair: Generate a root key: openssl genrsa -aes256 -out TestRoot.key 2048 Generate a self-signed root certificate: openssl req -extensions v3_ca -new -x509 -days 3650 -key TestRoot.key -out TestRoot.crt openssl x509 -in TestRoot.crt -out TestRoot.cer -outform DER openssl x509 -inform DER -in TestRoot.cer -outform PEM -out TestRoot.pub.pem 2) Generate the Intermediate Pair: Generate the intermediate key: openssl genrsa -aes256 -out TestSub.key 2048 Generate the intermediate certificate: openssl req -new -days 3650 -key TestSub.key -out TestSub.csr openssl ca -extensions v3_intermediate_ca -in TestSub.csr -days 3650 -out TestSub.crt -cert TestRoot.crt -keyfile TestRoot.key openssl x509 -in TestSub.crt -out TestSub.cer -outform DER openssl x509 -inform DER -in TestSub.cer -outform PEM -out TestSub.pub.pem 3) Generate User Key Pair for Data Signing: Generate User key: openssl genrsa -aes256 -out TestCert.key 2048 Generate User certificate: openssl req -new -days 3650 -key TestCert.key -out TestCert.csr openssl ca -extensions usr_cert -in TestCert.csr -days 3650 -out TestCert.crt -cert TestSub.crt -keyfile TestSub.key openssl x509 -in TestCert.crt -out TestCert.cer -outform DER openssl x509 -inform DER -in TestCert.cer -outform PEM -out TestCert.pub.pem Convert Key and Certificate for signing. Password is removed with -nodes flag for convenience in this sample. openssl pkcs12 -export -out TestCert.pfx -inkey TestCert.key -in TestCert.crt openssl pkcs12 -in TestCert.pfx -nodes -out TestCert.pem Verify Data Signing & Verification with new X.509 Certificate Chain 1) Sign a Binary File to generate a detached PKCS7 signature: openssl smime -sign -binary -signer TestCert.pem -outform DER -md sha256 -certfile TestSub.pub.pem -out test.bin.p7 -in test.bin 2) Verify PKCS7 Signature of a Binary File: openssl smime -verify -inform DER -in test.bin.p7 -content test.bin -CAfile TestRoot.pub.pem -out test.org.bin","title":"How to generate a self-signed X.509 certificate chain via OPENSSL"},{"location":"dyn/mu_basecore/BaseTools/Source/Python/Pkcs7Sign/Readme/#generate-dsc-pcd-include-files-for-certificate","text":"The BinToPcd utility can be used to convert the binary Certificate file to a text file can be included from a DSC file to set a PCD to the contents of the Certificate file. The following 2 PCDs can be set to the PKCS7 Certificate value. The first one supports a single certificate. The second one supports multiple certificate values using the XDR format. * gEfiSecurityPkgTokenSpaceGuid.PcdPkcs7CertBuffer * gFmpDevicePkgTokenSpaceGuid.PcdFmpDevicePkcs7CertBufferXdr Generate DSC PCD include files: BinToPcd.py -i TestRoot.cer -p gEfiSecurityPkgTokenSpaceGuid.PcdPkcs7CertBuffer -o TestRoot.cer.gEfiSecurityPkgTokenSpaceGuid.PcdPkcs7CertBuffer.inc BinToPcd.py -i TestRoot.cer -p gFmpDevicePkgTokenSpaceGuid.PcdFmpDevicePkcs7CertBufferXdr -x -o TestRoot.cer.gFmpDevicePkgTokenSpaceGuid.PcdFmpDevicePkcs7CertBufferXdr.inc These files can be used in !include statements in DSC file PCD sections. For example: Platform scoped fixed at build PCD section [PcdsFixedAtBuild] !include BaseTools/Source/Python/Pkcs7Sign/TestRoot.cer.gEfiSecurityPkgTokenSpaceGuid.PcdPkcs7CertBuffer.inc Platform scoped patchable in module PCD section [PcdsPatchableInModule] !include BaseTools/Source/Python/Pkcs7Sign/TestRoot.cer.gFmpDevicePkgTokenSpaceGuid.PcdFmpDevicePkcs7CertBufferXdr.inc Module scoped fixed at build PCD section [Components] FmpDevicePkg/FmpDxe/FmpDxe.inf { <PcdsFixedAtBuild> !include BaseTools/Source/Python/Pkcs7Sign/TestRoot.cer.gFmpDevicePkgTokenSpaceGuid.PcdFmpDevicePkcs7CertBufferXdr.inc }","title":"Generate DSC PCD include files for Certificate"},{"location":"dyn/mu_basecore/MdeModulePkg/Library/BrotliCustomDecompressLib/","text":"Introduction \u00b6 Brotli is a generic-purpose lossless compression algorithm that compresses data using a combination of a modern variant of the LZ77 algorithm, Huffman coding and 2 nd order context modeling, with a compression ratio comparable to the best currently available general-purpose compression methods. It is similar in speed with deflate but offers more dense compression. The specification of the Brotli Compressed Data Format is defined in RFC 7932 . Brotli is open-sourced under the MIT License, see the LICENSE file. Brotli mailing list: https://groups.google.com/forum/#!forum/brotli Benchmarks \u00b6 Squash Compression Benchmark / Unstable Squash Compression Benchmark Large Text Compression Benchmark Lzturbo Benchmark Related projects \u00b6 Independent decoder implementation by Mark Adler, based entirely on format specification. JavaScript port of brotli decoder . Could be used directly via npm install brotli","title":"Brotli Custom Decompress Lib"},{"location":"dyn/mu_basecore/MdeModulePkg/Library/BrotliCustomDecompressLib/#introduction","text":"Brotli is a generic-purpose lossless compression algorithm that compresses data using a combination of a modern variant of the LZ77 algorithm, Huffman coding and 2 nd order context modeling, with a compression ratio comparable to the best currently available general-purpose compression methods. It is similar in speed with deflate but offers more dense compression. The specification of the Brotli Compressed Data Format is defined in RFC 7932 . Brotli is open-sourced under the MIT License, see the LICENSE file. Brotli mailing list: https://groups.google.com/forum/#!forum/brotli","title":"Introduction"},{"location":"dyn/mu_basecore/MdeModulePkg/Library/BrotliCustomDecompressLib/#benchmarks","text":"Squash Compression Benchmark / Unstable Squash Compression Benchmark Large Text Compression Benchmark Lzturbo Benchmark","title":"Benchmarks"},{"location":"dyn/mu_basecore/MdeModulePkg/Library/BrotliCustomDecompressLib/#related-projects","text":"Independent decoder implementation by Mark Adler, based entirely on format specification. JavaScript port of brotli decoder . Could be used directly via npm install brotli","title":"Related projects"},{"location":"dyn/mu_basecore/MsUnitTestPkg/ReadMe/","text":"Ms Unit Test Support Package \u00b6 About \u00b6 This package adds a unit test framework targeted at the UEFI shell environment. It allows for unit test development to focus on the tests and leave, error logging, result formatting, context persistance, and test running to the framework. The unit test framework works well for low level unit tests as well as system level tests and fits easily in automation frameworks. The code is designed for a unit test application to leverage the framework which is made up of a number of libraries which allow for easy customization of the different elements. A few different instances are created to both show how easy some behaviors can be customized as well as provide different implementations that support different use cases. UnitTestLib \u00b6 The main \"framework\" library. This provides the framework init, suite init, and add test case functionality. It also supports the running of the suites and logging/reporting of results. UnitTestAssetLib \u00b6 The UnitTestAssetLib provides helper macros and functions for checking test conditions and reporting errors. Status and error info will be logged into the test context. There are a number of Assert macros that make the unit test code friendly to view and easy to understand. UnitTestBootUsbLib \u00b6 One of the unique features of the unit test framework is to be able to save text context and reboot the system. Since unit tests are generally run from a bootable usb key the framework has library calls to set boot next for usb. There is numerous ways this could be done on a given platform / BDS implementation and therefore this simple library allows customization if needed. This package supplies two instances: UsbClass Lib: This uses the Usb Class boot option as defined in the UEFI spec and leveraged by industry standard USB applications. UsbMicrosoft Lib: This uses a private boot option found in Microsoft UEFI to boot to usb UnitTestLogLib \u00b6 Library to support logging information during the test execution. This data is logged to the test context and will be available in the test reporting phase. This should be used for logging test details and helpful messages to resolve test failures. UnitTestResultReportLib \u00b6 Library provides function to run at the end of a framework test run and handles formatting the report. This is a common customization point and allows the unit test framework to fit its output reports into other test infrastructure. In this package a simple library instances has been supplied to output test results to the console as plain text. UnitTestPersistenceLib \u00b6 Persistence lib has the main job of saving and restoring test context to a storage medium so that for tests that require exiting the active process and then resuming state can be maintained. This is critical in supporting a system reboot in the middle of a test run. Samples \u00b6 There is a sample unit test provided as both an example of how to write a unit test and leverage many of the features of the framework. This sample can be found in the SampleUnitTestApp directory. Copyright \u00b6 Copyright \u00a9 2017, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Ms Unit Test Pkg"},{"location":"dyn/mu_basecore/MsUnitTestPkg/ReadMe/#ms-unit-test-support-package","text":"","title":"Ms Unit Test Support Package"},{"location":"dyn/mu_basecore/MsUnitTestPkg/ReadMe/#about","text":"This package adds a unit test framework targeted at the UEFI shell environment. It allows for unit test development to focus on the tests and leave, error logging, result formatting, context persistance, and test running to the framework. The unit test framework works well for low level unit tests as well as system level tests and fits easily in automation frameworks. The code is designed for a unit test application to leverage the framework which is made up of a number of libraries which allow for easy customization of the different elements. A few different instances are created to both show how easy some behaviors can be customized as well as provide different implementations that support different use cases.","title":"About"},{"location":"dyn/mu_basecore/MsUnitTestPkg/ReadMe/#unittestlib","text":"The main \"framework\" library. This provides the framework init, suite init, and add test case functionality. It also supports the running of the suites and logging/reporting of results.","title":"UnitTestLib"},{"location":"dyn/mu_basecore/MsUnitTestPkg/ReadMe/#unittestassetlib","text":"The UnitTestAssetLib provides helper macros and functions for checking test conditions and reporting errors. Status and error info will be logged into the test context. There are a number of Assert macros that make the unit test code friendly to view and easy to understand.","title":"UnitTestAssetLib"},{"location":"dyn/mu_basecore/MsUnitTestPkg/ReadMe/#unittestbootusblib","text":"One of the unique features of the unit test framework is to be able to save text context and reboot the system. Since unit tests are generally run from a bootable usb key the framework has library calls to set boot next for usb. There is numerous ways this could be done on a given platform / BDS implementation and therefore this simple library allows customization if needed. This package supplies two instances: UsbClass Lib: This uses the Usb Class boot option as defined in the UEFI spec and leveraged by industry standard USB applications. UsbMicrosoft Lib: This uses a private boot option found in Microsoft UEFI to boot to usb","title":"UnitTestBootUsbLib"},{"location":"dyn/mu_basecore/MsUnitTestPkg/ReadMe/#unittestloglib","text":"Library to support logging information during the test execution. This data is logged to the test context and will be available in the test reporting phase. This should be used for logging test details and helpful messages to resolve test failures.","title":"UnitTestLogLib"},{"location":"dyn/mu_basecore/MsUnitTestPkg/ReadMe/#unittestresultreportlib","text":"Library provides function to run at the end of a framework test run and handles formatting the report. This is a common customization point and allows the unit test framework to fit its output reports into other test infrastructure. In this package a simple library instances has been supplied to output test results to the console as plain text.","title":"UnitTestResultReportLib"},{"location":"dyn/mu_basecore/MsUnitTestPkg/ReadMe/#unittestpersistencelib","text":"Persistence lib has the main job of saving and restoring test context to a storage medium so that for tests that require exiting the active process and then resuming state can be maintained. This is critical in supporting a system reboot in the middle of a test run.","title":"UnitTestPersistenceLib"},{"location":"dyn/mu_basecore/MsUnitTestPkg/ReadMe/#samples","text":"There is a sample unit test provided as both an example of how to write a unit test and leverage many of the features of the framework. This sample can be found in the SampleUnitTestApp directory.","title":"Samples"},{"location":"dyn/mu_basecore/MsUnitTestPkg/ReadMe/#copyright","text":"Copyright \u00a9 2017, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Copyright"},{"location":"dyn/mu_oem_sample/RepoDetails/","text":"Project Mu Oem Sample Repository \u00b6 Git Details Repository Url: https://github.com/Microsoft/mu_oem_sample.git Branch: release/201808 Commit: 7b6933df02f0d85a559f9d41005e80bee4cd4c52 Commit Date: 2019-02-22 23:15:12 +0000 This repository is considered sample code for any entity building devices using Project Mu. It is likely that any device manufacturer will want to customize the device behavior by changing the modules in this package. Numerous libraries to support UEFI Boot Device Selection phase (BDS) Firmware Version information UI App / \"Frontpage\" application support as well as example More Info \u00b6 Please see the Project Mu docs ( https://github.com/Microsoft/mu ) for more information. This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments. Issues \u00b6 Please open any issues in the Project Mu GitHub tracker. More Details Contributing Code or Docs \u00b6 Please follow the general Project Mu Pull Request process. More Details Code Requirements Doc Requirements PR-Gate Builds \u00b6 pip install --upgrade -r requirements.txt mu_build -c corebuild.mu.json Copyright & License \u00b6 Copyright \u00a9 2016-2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"mu oem sample"},{"location":"dyn/mu_oem_sample/RepoDetails/#project-mu-oem-sample-repository","text":"Git Details Repository Url: https://github.com/Microsoft/mu_oem_sample.git Branch: release/201808 Commit: 7b6933df02f0d85a559f9d41005e80bee4cd4c52 Commit Date: 2019-02-22 23:15:12 +0000 This repository is considered sample code for any entity building devices using Project Mu. It is likely that any device manufacturer will want to customize the device behavior by changing the modules in this package. Numerous libraries to support UEFI Boot Device Selection phase (BDS) Firmware Version information UI App / \"Frontpage\" application support as well as example","title":"Project Mu Oem Sample Repository"},{"location":"dyn/mu_oem_sample/RepoDetails/#more-info","text":"Please see the Project Mu docs ( https://github.com/Microsoft/mu ) for more information. This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.","title":"More Info"},{"location":"dyn/mu_oem_sample/RepoDetails/#issues","text":"Please open any issues in the Project Mu GitHub tracker. More Details","title":"Issues"},{"location":"dyn/mu_oem_sample/RepoDetails/#contributing-code-or-docs","text":"Please follow the general Project Mu Pull Request process. More Details Code Requirements Doc Requirements","title":"Contributing Code or Docs"},{"location":"dyn/mu_oem_sample/RepoDetails/#pr-gate-builds","text":"pip install --upgrade -r requirements.txt mu_build -c corebuild.mu.json","title":"PR-Gate Builds"},{"location":"dyn/mu_oem_sample/RepoDetails/#copyright-license","text":"Copyright \u00a9 2016-2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Copyright &amp; License"},{"location":"dyn/mu_pip_build/RepoDetails/","text":"Project Mu Pip Build \u00b6 Git Details Repository Url: https://github.com/Microsoft/mu_pip_build.git Branch: master Commit: 630920254fe10e41845c98efe0acaddb06fe5351 Commit Date: 2019-03-19 17:27:57 +0000 Provided with config file, mu_build fetches/clones dependencies then compiles every module in each package. This is the entrypoint into the CI / Pull Request build and test infrastructure. More Info \u00b6 Please see the Project Mu docs ( https://github.com/Microsoft/mu ) for more information. This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments. Issues \u00b6 Please open any issues in the Project Mu GitHub tracker. More Details Contributing Code or Docs \u00b6 Please follow the general Project Mu Pull Request process. More Details Additionally make sure all testing described in the \"Development\" section passes. Using \u00b6 Usage Details Development \u00b6 Development Details Publish \u00b6 Publish Details Copyright & License \u00b6 Copyright \u00a9 2016-2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Repo Details"},{"location":"dyn/mu_pip_build/RepoDetails/#project-mu-pip-build","text":"Git Details Repository Url: https://github.com/Microsoft/mu_pip_build.git Branch: master Commit: 630920254fe10e41845c98efe0acaddb06fe5351 Commit Date: 2019-03-19 17:27:57 +0000 Provided with config file, mu_build fetches/clones dependencies then compiles every module in each package. This is the entrypoint into the CI / Pull Request build and test infrastructure.","title":"Project Mu Pip Build"},{"location":"dyn/mu_pip_build/RepoDetails/#more-info","text":"Please see the Project Mu docs ( https://github.com/Microsoft/mu ) for more information. This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.","title":"More Info"},{"location":"dyn/mu_pip_build/RepoDetails/#issues","text":"Please open any issues in the Project Mu GitHub tracker. More Details","title":"Issues"},{"location":"dyn/mu_pip_build/RepoDetails/#contributing-code-or-docs","text":"Please follow the general Project Mu Pull Request process. More Details Additionally make sure all testing described in the \"Development\" section passes.","title":"Contributing Code or Docs"},{"location":"dyn/mu_pip_build/RepoDetails/#using","text":"Usage Details","title":"Using"},{"location":"dyn/mu_pip_build/RepoDetails/#development","text":"Development Details","title":"Development"},{"location":"dyn/mu_pip_build/RepoDetails/#publish","text":"Publish Details","title":"Publish"},{"location":"dyn/mu_pip_build/RepoDetails/#copyright-license","text":"Copyright \u00a9 2016-2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Copyright &amp; License"},{"location":"dyn/mu_pip_build/developing/","text":"Developing Project Mu Pip Build \u00b6 Pre-Requisites \u00b6 Get the code git clone https://github.com/Microsoft/mu_pip_build.git Install development dependencies pip install --upgrade -r requirements.txt Uninstall any copy of mu_build pip uninstall mu_build Install from local source (run command from root of repo) pip install -e . Testing \u00b6 Run a Basic Syntax/Lint Check (using flake8) and resolve any issues flake8 MuBuild Info Newer editors are very helpful in resolving source formatting errors (whitespace, indentation, etc). In VSCode open the py file and use ++alt+shift+f++ to auto format. Run pytest with coverage data collected pytest -v --junitxml=test.junit.xml --html=pytest_MuBuild_report.html --self-contained-html --cov=MuBuild --cov-report html:cov_html --cov-report xml:cov.xml --cov-config .coveragerc Look at the reports pytest_MuBuild_report.html cov_html/index.html","title":"developing"},{"location":"dyn/mu_pip_build/developing/#developing-project-mu-pip-build","text":"","title":"Developing Project Mu Pip Build"},{"location":"dyn/mu_pip_build/developing/#pre-requisites","text":"Get the code git clone https://github.com/Microsoft/mu_pip_build.git Install development dependencies pip install --upgrade -r requirements.txt Uninstall any copy of mu_build pip uninstall mu_build Install from local source (run command from root of repo) pip install -e .","title":"Pre-Requisites"},{"location":"dyn/mu_pip_build/developing/#testing","text":"Run a Basic Syntax/Lint Check (using flake8) and resolve any issues flake8 MuBuild Info Newer editors are very helpful in resolving source formatting errors (whitespace, indentation, etc). In VSCode open the py file and use ++alt+shift+f++ to auto format. Run pytest with coverage data collected pytest -v --junitxml=test.junit.xml --html=pytest_MuBuild_report.html --self-contained-html --cov=MuBuild --cov-report html:cov_html --cov-report xml:cov.xml --cov-config .coveragerc Look at the reports pytest_MuBuild_report.html cov_html/index.html","title":"Testing"},{"location":"dyn/mu_pip_build/publishing/","text":"Publishing Project Mu Pip Build \u00b6 The MuBuild is published as a pypi (pip) module. The pip module is named mu_build . Pypi allows for easy version management, dependency management, and sharing. Publishing/releasing a new version is generally handled thru a server based build process but for completeness the process is documented here. Steps \u00b6 Info These directions assume you have already configured your workspace for developing. If not please first do that. Directions on the developing page. Pass all development tests and check. Update the readme with info on changes for this version. Get your changes into master branch (official releases should only be done from the master branch) Make a git tag for the version that will be released. Tag format is v . . Do the release process (Use the server process for this but for documentation sake these are the steps) Install tools pip install --upgrade -r requirements.publisher.txt Build a wheel python setup.py sdist bdist_wheel Confirm wheel version is aligned with git tag ConfirmVersionAndTag.py Publish the wheel/distribution to pypi twine upload dist/*","title":"publishing"},{"location":"dyn/mu_pip_build/publishing/#publishing-project-mu-pip-build","text":"The MuBuild is published as a pypi (pip) module. The pip module is named mu_build . Pypi allows for easy version management, dependency management, and sharing. Publishing/releasing a new version is generally handled thru a server based build process but for completeness the process is documented here.","title":"Publishing Project Mu Pip Build"},{"location":"dyn/mu_pip_build/publishing/#steps","text":"Info These directions assume you have already configured your workspace for developing. If not please first do that. Directions on the developing page. Pass all development tests and check. Update the readme with info on changes for this version. Get your changes into master branch (official releases should only be done from the master branch) Make a git tag for the version that will be released. Tag format is v . . Do the release process (Use the server process for this but for documentation sake these are the steps) Install tools pip install --upgrade -r requirements.publisher.txt Build a wheel python setup.py sdist bdist_wheel Confirm wheel version is aligned with git tag ConfirmVersionAndTag.py Publish the wheel/distribution to pypi twine upload dist/*","title":"Steps"},{"location":"dyn/mu_pip_build/using/","text":"Using Project Mu Pip Build \u00b6 Install from pip pip install mu_build Usage Docs \u00b6 TBD","title":"using"},{"location":"dyn/mu_pip_build/using/#using-project-mu-pip-build","text":"Install from pip pip install mu_build","title":"Using Project Mu Pip Build"},{"location":"dyn/mu_pip_build/using/#usage-docs","text":"TBD","title":"Usage Docs"},{"location":"dyn/mu_pip_environment/RepoDetails/","text":"Project Mu Pip Environment \u00b6 Git Details Repository Url: https://github.com/Microsoft/mu_pip_environment.git Branch: master Commit: 4039db6109b213f702a2ed78c2e555e0bce58131 Commit Date: 2019-04-19 21:52:54 +0000 Entry point into Self Describing Environment (SDE). Sets up and parses state of workspace before calling into build. More Info \u00b6 Please see the Project Mu docs ( https://github.com/Microsoft/mu ) for more information. This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments. Issues \u00b6 Please open any issues in the Project Mu GitHub tracker. More Details Contributing Code or Docs \u00b6 Please follow the general Project Mu Pull Request process. More Details Additionally make sure all testing described in the \"Development\" section passes. Using \u00b6 Usage Details Development \u00b6 Development Details Publish \u00b6 Publish Details Copyright & License \u00b6 Copyright \u00a9 2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Repo Details"},{"location":"dyn/mu_pip_environment/RepoDetails/#project-mu-pip-environment","text":"Git Details Repository Url: https://github.com/Microsoft/mu_pip_environment.git Branch: master Commit: 4039db6109b213f702a2ed78c2e555e0bce58131 Commit Date: 2019-04-19 21:52:54 +0000 Entry point into Self Describing Environment (SDE). Sets up and parses state of workspace before calling into build.","title":"Project Mu Pip Environment"},{"location":"dyn/mu_pip_environment/RepoDetails/#more-info","text":"Please see the Project Mu docs ( https://github.com/Microsoft/mu ) for more information. This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.","title":"More Info"},{"location":"dyn/mu_pip_environment/RepoDetails/#issues","text":"Please open any issues in the Project Mu GitHub tracker. More Details","title":"Issues"},{"location":"dyn/mu_pip_environment/RepoDetails/#contributing-code-or-docs","text":"Please follow the general Project Mu Pull Request process. More Details Additionally make sure all testing described in the \"Development\" section passes.","title":"Contributing Code or Docs"},{"location":"dyn/mu_pip_environment/RepoDetails/#using","text":"Usage Details","title":"Using"},{"location":"dyn/mu_pip_environment/RepoDetails/#development","text":"Development Details","title":"Development"},{"location":"dyn/mu_pip_environment/RepoDetails/#publish","text":"Publish Details","title":"Publish"},{"location":"dyn/mu_pip_environment/RepoDetails/#copyright-license","text":"Copyright \u00a9 2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Copyright &amp; License"},{"location":"dyn/mu_pip_environment/developing/","text":"Developing Project Mu Pip Environment \u00b6 Pre-Requisites \u00b6 Get the code git clone https://github.com/Microsoft/mu_pip_environment.git Install development dependencies pip install --upgrade -r requirements.txt Uninstall any copy of mu_environment pip uninstall mu_environment Install from local source (run command from root of repo) pip install -e . Testing \u00b6 Run a Basic Syntax/Lint Check (using flake8) and resolve any issues flake8 MuEnvironment Info Newer editors are very helpful in resolving source formatting errors (whitespace, indentation, etc). In VSCode open the py file and use ++alt+shift+f++ to auto format. Run pytest with coverage data collected pytest -v --junitxml=test.junit.xml --html=pytest_MuEnvironment_report.html --self-contained-html --cov=MuEnvironment --cov-report html:cov_html --cov-report xml:cov.xml --cov-config .coveragerc Look at the reports pytest_MuEnvironment_report.html cov_html/index.html","title":"developing"},{"location":"dyn/mu_pip_environment/developing/#developing-project-mu-pip-environment","text":"","title":"Developing Project Mu Pip Environment"},{"location":"dyn/mu_pip_environment/developing/#pre-requisites","text":"Get the code git clone https://github.com/Microsoft/mu_pip_environment.git Install development dependencies pip install --upgrade -r requirements.txt Uninstall any copy of mu_environment pip uninstall mu_environment Install from local source (run command from root of repo) pip install -e .","title":"Pre-Requisites"},{"location":"dyn/mu_pip_environment/developing/#testing","text":"Run a Basic Syntax/Lint Check (using flake8) and resolve any issues flake8 MuEnvironment Info Newer editors are very helpful in resolving source formatting errors (whitespace, indentation, etc). In VSCode open the py file and use ++alt+shift+f++ to auto format. Run pytest with coverage data collected pytest -v --junitxml=test.junit.xml --html=pytest_MuEnvironment_report.html --self-contained-html --cov=MuEnvironment --cov-report html:cov_html --cov-report xml:cov.xml --cov-config .coveragerc Look at the reports pytest_MuEnvironment_report.html cov_html/index.html","title":"Testing"},{"location":"dyn/mu_pip_environment/publishing/","text":"Publishing Project Mu Pip Environment \u00b6 The MuEnvironment is published as a pypi (pip) module. The pip module is named mu_environment . Pypi allows for easy version management, dependency management, and sharing. Publishing/releasing a new version is generally handled thru a server based build process but for completeness the process is documented here. Steps \u00b6 Info These directions assume you have already configured your workspace for developing. If not please first do that. Directions on the developing page. Pass all development tests and check. Update the readme with info on changes for this version. Get your changes into master branch (official releases should only be done from the master branch) Make a git tag for the version that will be released. Tag format is v . . Do the release process Install tools pip install --upgrade -r requirements.publisher.txt Build a wheel python setup.py sdist bdist_wheel Confirm wheel version is aligned with git tag ConfirmVersionAndTag.py Publish the wheel/distribution to pypi twine upload dist/*","title":"publishing"},{"location":"dyn/mu_pip_environment/publishing/#publishing-project-mu-pip-environment","text":"The MuEnvironment is published as a pypi (pip) module. The pip module is named mu_environment . Pypi allows for easy version management, dependency management, and sharing. Publishing/releasing a new version is generally handled thru a server based build process but for completeness the process is documented here.","title":"Publishing Project Mu Pip Environment"},{"location":"dyn/mu_pip_environment/publishing/#steps","text":"Info These directions assume you have already configured your workspace for developing. If not please first do that. Directions on the developing page. Pass all development tests and check. Update the readme with info on changes for this version. Get your changes into master branch (official releases should only be done from the master branch) Make a git tag for the version that will be released. Tag format is v . . Do the release process Install tools pip install --upgrade -r requirements.publisher.txt Build a wheel python setup.py sdist bdist_wheel Confirm wheel version is aligned with git tag ConfirmVersionAndTag.py Publish the wheel/distribution to pypi twine upload dist/*","title":"Steps"},{"location":"dyn/mu_pip_environment/using/","text":"Using Project Mu Pip Environment \u00b6 Install from pip pip install mu_environment Usage Docs \u00b6 TBD","title":"using"},{"location":"dyn/mu_pip_environment/using/#using-project-mu-pip-environment","text":"Install from pip pip install mu_environment","title":"Using Project Mu Pip Environment"},{"location":"dyn/mu_pip_environment/using/#usage-docs","text":"TBD","title":"Usage Docs"},{"location":"dyn/mu_pip_environment/MuEnvironment/feature_MuLogging/","text":"Mu Logging \u00b6 MuLogging is a collection of utilities to manage logging in Project Mu. There are four different ways to create handlers. 1. setup_txt_logger - a handler that outputs a txt file 2. setup_markdown_logger - a handler that outputs a markdown file with an output file 3. setup_console_logging - a handler that logs to the console with optional colors 4. create_output_stream - a handler that has an in-memory stream that you can later read from setup_logging is a helper function that creates 1-3 of the handlers. The output_stream is used for plugins in mu_build so they can keep track of compiler output General Practice \u00b6 All modules that are not PlatformBuilder or MuBuild should request a named logger like this: logging . getLogger ( \"MuGit\" ) Modules that are not the root module get downgraded a level (ie. critical -> warning)","title":"feature Mu Logging"},{"location":"dyn/mu_pip_environment/MuEnvironment/feature_MuLogging/#mu-logging","text":"MuLogging is a collection of utilities to manage logging in Project Mu. There are four different ways to create handlers. 1. setup_txt_logger - a handler that outputs a txt file 2. setup_markdown_logger - a handler that outputs a markdown file with an output file 3. setup_console_logging - a handler that logs to the console with optional colors 4. create_output_stream - a handler that has an in-memory stream that you can later read from setup_logging is a helper function that creates 1-3 of the handlers. The output_stream is used for plugins in mu_build so they can keep track of compiler output","title":"Mu Logging"},{"location":"dyn/mu_pip_environment/MuEnvironment/feature_MuLogging/#general-practice","text":"All modules that are not PlatformBuilder or MuBuild should request a named logger like this: logging . getLogger ( \"MuGit\" ) Modules that are not the root module get downgraded a level (ie. critical -> warning)","title":"General Practice"},{"location":"dyn/mu_pip_environment/MuEnvironment/feature_Omnicache/","text":"Omnicache \u00b6 Omnicache, the tool, is a command line tool that helps setup and update a Project Mu Omnicache. An Omnicache is just a bare repo with lots of remotes fetched so that if configured the Project Mu tools will use it as a reference when updating or cloning a repo. This saves a lot of network bandwidth, disk space, and time if you develop with many workspaces on a single PC and can also be used to speed up CI. Creating your Omnicache \u00b6 You can setup your Omnicache many ways. You can add config entries from numerous files or thru command line. Try Omnicache -h for help. Here are the steps for a simple empty installation. Make sure you have installed mu_environment using Pip Open cmd prompt Create one omnicache --init <path> At the end of the creation it will suggest setting the OMNICACHE_PATH environment variable. For best results do this. Adding Config Entries \u00b6 Config entries can be added when first creating the cache as well as any time by using the tool. Config entries can be added 1-by-1 from the command line or thru a config file. Example of adding config entry \u00b6 omnicache -a tianocore_edk2 https://github.com/tianocore/edk2.git --init %OMNICACHE_PATH% omnicache -a openssl https://github.com/openssl/openssl.git True --init %OMNICACHE_PATH% Example Config for Project Mu repos \u00b6 Copy the below sample and save it as abc.yml remotes: - name: mu_basecore url: https://github.com/Microsoft/mu_basecore.git - name: common_mu url: https://github.com/Microsoft/mu_plus.git - name: common_mu_tiano2 url: https://github.com/Microsoft/mu_tiano_plus.git - name: mu_silicon_intel_tiano url: https://github.com/Microsoft/mu_silicon_intel_tiano.git - name: mu_silicon_arm_tiano url: https://github.com/Microsoft/mu_silicon_arm_tiano.git - name: mu_oem_sample url: https://github.com/Microsoft/mu_oem_sample.git - name: openssl url: https://github.com/openssl/openssl.git tag: true - name: tianocore_edk2 url: https://github.com/tianocore/edk2.git Then run omnicache command to add the new entries. omnicache -c abc.yml --init %OMNICACHE_PATH% Keeping your Omnicache Current \u00b6 The Omnicache doesn't have to always be current. If it gets stale it will still help but there will be more \"cache misses\". Since the Omnicache is just a git repo it can easily be updated by running git commands and since it is a bare repo it is trouble free to update. The Omicache tool attempts to make this even easier. Windows Scheduled Task \u00b6 If you want to use a scheduled task here is one way to do it on Windows. Set the OMNICACHE_PATH environment variable to your path Create an omnicache_update.bat file in your omnicache directory that contains omnicache --init --fetch %OMNICACHE_PATH% Create a temporary XML file on your desktop with the contents below named \"O_U.xml\" <?xml version=\"1.0\" encoding=\"UTF-16\"?> <Task version= \"1.4\" xmlns= \"http://schemas.microsoft.com/windows/2004/02/mit/task\" > <Triggers> <CalendarTrigger> <StartBoundary> 2019-01-04T8:00:00 </StartBoundary> <ExecutionTimeLimit> PT2H </ExecutionTimeLimit> <Enabled> true </Enabled> <ScheduleByDay> <DaysInterval> 1 </DaysInterval> </ScheduleByDay> </CalendarTrigger> </Triggers> <Settings> <MultipleInstancesPolicy> IgnoreNew </MultipleInstancesPolicy> <DisallowStartIfOnBatteries> false </DisallowStartIfOnBatteries> <StopIfGoingOnBatteries> false </StopIfGoingOnBatteries> <AllowHardTerminate> true </AllowHardTerminate> <StartWhenAvailable> false </StartWhenAvailable> <RunOnlyIfNetworkAvailable> false </RunOnlyIfNetworkAvailable> <IdleSettings> <StopOnIdleEnd> true </StopOnIdleEnd> <RestartOnIdle> false </RestartOnIdle> </IdleSettings> <AllowStartOnDemand> true </AllowStartOnDemand> <Enabled> true </Enabled> <Hidden> false </Hidden> <RunOnlyIfIdle> false </RunOnlyIfIdle> <DisallowStartOnRemoteAppSession> false </DisallowStartOnRemoteAppSession> <UseUnifiedSchedulingEngine> true </UseUnifiedSchedulingEngine> <WakeToRun> false </WakeToRun> <ExecutionTimeLimit> PT72H </ExecutionTimeLimit> <Priority> 7 </Priority> </Settings> <Actions Context= \"Author\" > <Exec> <Command> cmd.exe </Command> <Arguments> /c omnicache_update.bat </Arguments> <WorkingDirectory> %OMNICACHE_PATH% </WorkingDirectory> </Exec> </Actions> </Task> 4. Open Cmd prompt and use SCHTASKS to create a task. SCHTASKS /Create /XML \"O_U.xml\" /TN \"Omnicache Updater\" Using Omnicache for update \u00b6 Set the environment variable OMNICACHE_PATH for automatic usage. Project Mu tools when running platformbuild.py --setup or platformbuild.py --update will use the cache. Using Omnicache for git clone \u00b6 Current best practice is to setup a bashrc alias if using git for windows in gitbash. alias gcl = ' git clone --reference ${ OMNICACHE_PATH } \u2019 Then every git clone you want to do you can call gcl <url> <folder> instead of git clone <url> <folder> Warnings \u00b6 Removing the omnicache from your PC can cause problems in your repos. Read up on --reference in git for methods to resolve this before deleting the omnicache. Bug in git submodule update --recursive --reference <path> . This doesn't work as git appends the recursive submodule path to the reference path. Contacting git maintainers for clarity. Tags: tags are not namespaced by remote therefore conflicts could occur. Suggestion is to not pull tags unless required. Stack exchange has a few other ideas but nothing implemented yet. Older versions of the omnicache tool used -u true to update. Newer versions just require -u or --fetch . Since -a is a varable length argument list it is best to always add the --init parameter as the last parameter before the cache_dir positional argument. This way python argparse knows positional args from the -a optional args.","title":"feature Omnicache"},{"location":"dyn/mu_pip_environment/MuEnvironment/feature_Omnicache/#omnicache","text":"Omnicache, the tool, is a command line tool that helps setup and update a Project Mu Omnicache. An Omnicache is just a bare repo with lots of remotes fetched so that if configured the Project Mu tools will use it as a reference when updating or cloning a repo. This saves a lot of network bandwidth, disk space, and time if you develop with many workspaces on a single PC and can also be used to speed up CI.","title":"Omnicache"},{"location":"dyn/mu_pip_environment/MuEnvironment/feature_Omnicache/#creating-your-omnicache","text":"You can setup your Omnicache many ways. You can add config entries from numerous files or thru command line. Try Omnicache -h for help. Here are the steps for a simple empty installation. Make sure you have installed mu_environment using Pip Open cmd prompt Create one omnicache --init <path> At the end of the creation it will suggest setting the OMNICACHE_PATH environment variable. For best results do this.","title":"Creating your Omnicache"},{"location":"dyn/mu_pip_environment/MuEnvironment/feature_Omnicache/#adding-config-entries","text":"Config entries can be added when first creating the cache as well as any time by using the tool. Config entries can be added 1-by-1 from the command line or thru a config file.","title":"Adding Config Entries"},{"location":"dyn/mu_pip_environment/MuEnvironment/feature_Omnicache/#example-of-adding-config-entry","text":"omnicache -a tianocore_edk2 https://github.com/tianocore/edk2.git --init %OMNICACHE_PATH% omnicache -a openssl https://github.com/openssl/openssl.git True --init %OMNICACHE_PATH%","title":"Example of adding config entry"},{"location":"dyn/mu_pip_environment/MuEnvironment/feature_Omnicache/#example-config-for-project-mu-repos","text":"Copy the below sample and save it as abc.yml remotes: - name: mu_basecore url: https://github.com/Microsoft/mu_basecore.git - name: common_mu url: https://github.com/Microsoft/mu_plus.git - name: common_mu_tiano2 url: https://github.com/Microsoft/mu_tiano_plus.git - name: mu_silicon_intel_tiano url: https://github.com/Microsoft/mu_silicon_intel_tiano.git - name: mu_silicon_arm_tiano url: https://github.com/Microsoft/mu_silicon_arm_tiano.git - name: mu_oem_sample url: https://github.com/Microsoft/mu_oem_sample.git - name: openssl url: https://github.com/openssl/openssl.git tag: true - name: tianocore_edk2 url: https://github.com/tianocore/edk2.git Then run omnicache command to add the new entries. omnicache -c abc.yml --init %OMNICACHE_PATH%","title":"Example Config for Project Mu repos"},{"location":"dyn/mu_pip_environment/MuEnvironment/feature_Omnicache/#keeping-your-omnicache-current","text":"The Omnicache doesn't have to always be current. If it gets stale it will still help but there will be more \"cache misses\". Since the Omnicache is just a git repo it can easily be updated by running git commands and since it is a bare repo it is trouble free to update. The Omicache tool attempts to make this even easier.","title":"Keeping your Omnicache Current"},{"location":"dyn/mu_pip_environment/MuEnvironment/feature_Omnicache/#windows-scheduled-task","text":"If you want to use a scheduled task here is one way to do it on Windows. Set the OMNICACHE_PATH environment variable to your path Create an omnicache_update.bat file in your omnicache directory that contains omnicache --init --fetch %OMNICACHE_PATH% Create a temporary XML file on your desktop with the contents below named \"O_U.xml\" <?xml version=\"1.0\" encoding=\"UTF-16\"?> <Task version= \"1.4\" xmlns= \"http://schemas.microsoft.com/windows/2004/02/mit/task\" > <Triggers> <CalendarTrigger> <StartBoundary> 2019-01-04T8:00:00 </StartBoundary> <ExecutionTimeLimit> PT2H </ExecutionTimeLimit> <Enabled> true </Enabled> <ScheduleByDay> <DaysInterval> 1 </DaysInterval> </ScheduleByDay> </CalendarTrigger> </Triggers> <Settings> <MultipleInstancesPolicy> IgnoreNew </MultipleInstancesPolicy> <DisallowStartIfOnBatteries> false </DisallowStartIfOnBatteries> <StopIfGoingOnBatteries> false </StopIfGoingOnBatteries> <AllowHardTerminate> true </AllowHardTerminate> <StartWhenAvailable> false </StartWhenAvailable> <RunOnlyIfNetworkAvailable> false </RunOnlyIfNetworkAvailable> <IdleSettings> <StopOnIdleEnd> true </StopOnIdleEnd> <RestartOnIdle> false </RestartOnIdle> </IdleSettings> <AllowStartOnDemand> true </AllowStartOnDemand> <Enabled> true </Enabled> <Hidden> false </Hidden> <RunOnlyIfIdle> false </RunOnlyIfIdle> <DisallowStartOnRemoteAppSession> false </DisallowStartOnRemoteAppSession> <UseUnifiedSchedulingEngine> true </UseUnifiedSchedulingEngine> <WakeToRun> false </WakeToRun> <ExecutionTimeLimit> PT72H </ExecutionTimeLimit> <Priority> 7 </Priority> </Settings> <Actions Context= \"Author\" > <Exec> <Command> cmd.exe </Command> <Arguments> /c omnicache_update.bat </Arguments> <WorkingDirectory> %OMNICACHE_PATH% </WorkingDirectory> </Exec> </Actions> </Task> 4. Open Cmd prompt and use SCHTASKS to create a task. SCHTASKS /Create /XML \"O_U.xml\" /TN \"Omnicache Updater\"","title":"Windows Scheduled Task"},{"location":"dyn/mu_pip_environment/MuEnvironment/feature_Omnicache/#using-omnicache-for-update","text":"Set the environment variable OMNICACHE_PATH for automatic usage. Project Mu tools when running platformbuild.py --setup or platformbuild.py --update will use the cache.","title":"Using Omnicache for update"},{"location":"dyn/mu_pip_environment/MuEnvironment/feature_Omnicache/#using-omnicache-for-git-clone","text":"Current best practice is to setup a bashrc alias if using git for windows in gitbash. alias gcl = ' git clone --reference ${ OMNICACHE_PATH } \u2019 Then every git clone you want to do you can call gcl <url> <folder> instead of git clone <url> <folder>","title":"Using Omnicache for git clone"},{"location":"dyn/mu_pip_environment/MuEnvironment/feature_Omnicache/#warnings","text":"Removing the omnicache from your PC can cause problems in your repos. Read up on --reference in git for methods to resolve this before deleting the omnicache. Bug in git submodule update --recursive --reference <path> . This doesn't work as git appends the recursive submodule path to the reference path. Contacting git maintainers for clarity. Tags: tags are not namespaced by remote therefore conflicts could occur. Suggestion is to not pull tags unless required. Stack exchange has a few other ideas but nothing implemented yet. Older versions of the omnicache tool used -u true to update. Newer versions just require -u or --fetch . Since -a is a varable length argument list it is best to always add the --init parameter as the last parameter before the cache_dir positional argument. This way python argparse knows positional args from the -a optional args.","title":"Warnings"},{"location":"dyn/mu_pip_environment/MuEnvironment/docs/feature_omnicache/","text":"The Omnicache or how I learned to stop worrying and love the allrepo \u00b6 The Genesis \u00b6 Many repos in the Project Mu tree have common roots and share a very similar codebase. In order to speed up clone times for our CI builds as well as for personal use, we realized you can clone a repo using a reference repository. git clone --reference ../some-directory Another feature that came to light is that you can use git to create an omnirepostitory. You can have all the objects stored into one place and git will query this repo for any objects it wishes to fetch and if they aren't found, it will then request them from upstream. We created some helper functions to wrap around this. It can be called by omnicache. Creating a new omnicache \u00b6 omnicache --init ../omnicache You can optionally use omnicache --new ../omnicache The difference between the two is that new will fail if something exists there, init does not. Feeding- I mean, Adding to the omnicache \u00b6 omnicache -a <name> <url> <Sync tags optional default = False> ../omnicache omnicache --add <name> <url> <Sync tags optional default = False> ../omnicache (Either of these will work) Updating the omnicache \u00b6 Now that you're a proud owner of an omnicache, you need to take care to update it semi-regularly. omnicache --update ../omnicache omnicache -u ../omnicache (Either of these will work) Know what's in the cache \u00b6 You can find out what is in your cache by listing it's contents. omnicache --list ../omnicache Assimilation into the Omnicache \u00b6 Sometimes you have a folder where all the repos are already cloned (either as submodules or seperate folders). You can scan them all into the omnicache by using the scan feature. omnicache --scan ../folder ../omnicache This will add unique repos/submodules that it finds in the top level folders in ../folder. Unique is determined by URL. Fighting back against the Omnicache \u00b6 If your omnicache has grown a touch too powerful, you can take control back in your life by removing items from the cache. omnicache --remove ../omnicache omnicache -r ../omnicache Using the Omnicache \u00b6 Many of the tools in Project Mu are equipped to handle the omnicache and details on how to use them can be found in their respective documentations or help menus.","title":"docs"},{"location":"dyn/mu_pip_environment/MuEnvironment/docs/feature_omnicache/#the-omnicache-or-how-i-learned-to-stop-worrying-and-love-the-allrepo","text":"","title":"The Omnicache or how I learned to stop worrying and love the allrepo"},{"location":"dyn/mu_pip_environment/MuEnvironment/docs/feature_omnicache/#the-genesis","text":"Many repos in the Project Mu tree have common roots and share a very similar codebase. In order to speed up clone times for our CI builds as well as for personal use, we realized you can clone a repo using a reference repository. git clone --reference ../some-directory Another feature that came to light is that you can use git to create an omnirepostitory. You can have all the objects stored into one place and git will query this repo for any objects it wishes to fetch and if they aren't found, it will then request them from upstream. We created some helper functions to wrap around this. It can be called by omnicache.","title":"The Genesis"},{"location":"dyn/mu_pip_environment/MuEnvironment/docs/feature_omnicache/#creating-a-new-omnicache","text":"omnicache --init ../omnicache You can optionally use omnicache --new ../omnicache The difference between the two is that new will fail if something exists there, init does not.","title":"Creating a new omnicache"},{"location":"dyn/mu_pip_environment/MuEnvironment/docs/feature_omnicache/#feeding-i-mean-adding-to-the-omnicache","text":"omnicache -a <name> <url> <Sync tags optional default = False> ../omnicache omnicache --add <name> <url> <Sync tags optional default = False> ../omnicache (Either of these will work)","title":"Feeding- I mean, Adding to the omnicache"},{"location":"dyn/mu_pip_environment/MuEnvironment/docs/feature_omnicache/#updating-the-omnicache","text":"Now that you're a proud owner of an omnicache, you need to take care to update it semi-regularly. omnicache --update ../omnicache omnicache -u ../omnicache (Either of these will work)","title":"Updating the omnicache"},{"location":"dyn/mu_pip_environment/MuEnvironment/docs/feature_omnicache/#know-whats-in-the-cache","text":"You can find out what is in your cache by listing it's contents. omnicache --list ../omnicache","title":"Know what's in the cache"},{"location":"dyn/mu_pip_environment/MuEnvironment/docs/feature_omnicache/#assimilation-into-the-omnicache","text":"Sometimes you have a folder where all the repos are already cloned (either as submodules or seperate folders). You can scan them all into the omnicache by using the scan feature. omnicache --scan ../folder ../omnicache This will add unique repos/submodules that it finds in the top level folders in ../folder. Unique is determined by URL.","title":"Assimilation into the Omnicache"},{"location":"dyn/mu_pip_environment/MuEnvironment/docs/feature_omnicache/#fighting-back-against-the-omnicache","text":"If your omnicache has grown a touch too powerful, you can take control back in your life by removing items from the cache. omnicache --remove ../omnicache omnicache -r ../omnicache","title":"Fighting back against the Omnicache"},{"location":"dyn/mu_pip_environment/MuEnvironment/docs/feature_omnicache/#using-the-omnicache","text":"Many of the tools in Project Mu are equipped to handle the omnicache and details on how to use them can be found in their respective documentations or help menus.","title":"Using the Omnicache"},{"location":"dyn/mu_pip_python_library/RepoDetails/","text":"Project Mu Pip Python Library \u00b6 Git Details Repository Url: https://github.com/Microsoft/mu_pip_python_library.git Branch: master Commit: 6bbcb0bec63fe64611e71a5494f96a2070a93cc8 Commit Date: 2019-03-26 16:48:52 +0000 Python files describing various miscellaneous components from the TPM and EDKII specs. More Info \u00b6 Please see the Project Mu docs ( https://github.com/Microsoft/mu ) for more information. This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments. Issues \u00b6 Please open any issues in the Project Mu GitHub tracker. More Details Contributing Code or Docs \u00b6 Please follow the general Project Mu Pull Request process. More Details Additionally make sure all testing described in the \"Development\" section passes. Using \u00b6 Usage Details Development \u00b6 Development Details Publish \u00b6 Publish Details Copyright & License \u00b6 Copyright \u00a9 2016-2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Repo Details"},{"location":"dyn/mu_pip_python_library/RepoDetails/#project-mu-pip-python-library","text":"Git Details Repository Url: https://github.com/Microsoft/mu_pip_python_library.git Branch: master Commit: 6bbcb0bec63fe64611e71a5494f96a2070a93cc8 Commit Date: 2019-03-26 16:48:52 +0000 Python files describing various miscellaneous components from the TPM and EDKII specs.","title":"Project Mu Pip Python Library"},{"location":"dyn/mu_pip_python_library/RepoDetails/#more-info","text":"Please see the Project Mu docs ( https://github.com/Microsoft/mu ) for more information. This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.","title":"More Info"},{"location":"dyn/mu_pip_python_library/RepoDetails/#issues","text":"Please open any issues in the Project Mu GitHub tracker. More Details","title":"Issues"},{"location":"dyn/mu_pip_python_library/RepoDetails/#contributing-code-or-docs","text":"Please follow the general Project Mu Pull Request process. More Details Additionally make sure all testing described in the \"Development\" section passes.","title":"Contributing Code or Docs"},{"location":"dyn/mu_pip_python_library/RepoDetails/#using","text":"Usage Details","title":"Using"},{"location":"dyn/mu_pip_python_library/RepoDetails/#development","text":"Development Details","title":"Development"},{"location":"dyn/mu_pip_python_library/RepoDetails/#publish","text":"Publish Details","title":"Publish"},{"location":"dyn/mu_pip_python_library/RepoDetails/#copyright-license","text":"Copyright \u00a9 2016-2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Copyright &amp; License"},{"location":"dyn/mu_pip_python_library/developing/","text":"Developing Project Mu Pip Python Library \u00b6 Pre-Requisites \u00b6 Get the code git clone https://github.com/Microsoft/mu_pip_python_library.git Install development dependencies pip install --upgrade -r requirements.txt Uninstall any copy of mu_python_library pip uninstall mu_python_library Install from local source (run command from root of repo) pip install -e . Testing \u00b6 Run a Basic Syntax/Lint Check (using flake8) and resolve any issues flake8 MuPythonLibrary Info Newer editors are very helpful in resolving source formatting errors (whitespace, indentation, etc). In VSCode open the py file and use ++alt+shift+f++ to auto format. Run pytest with coverage data collected pytest -v --junitxml=test.junit.xml --html=pytest_MuPythonLibrary_report.html --self-contained-html --cov=MuPythonLibrary --cov-report html:cov_html --cov-report xml:cov.xml --cov-config .coveragerc Look at the reports pytest_MuPythonLibrary_report.html cov_html/index.html","title":"developing"},{"location":"dyn/mu_pip_python_library/developing/#developing-project-mu-pip-python-library","text":"","title":"Developing Project Mu Pip Python Library"},{"location":"dyn/mu_pip_python_library/developing/#pre-requisites","text":"Get the code git clone https://github.com/Microsoft/mu_pip_python_library.git Install development dependencies pip install --upgrade -r requirements.txt Uninstall any copy of mu_python_library pip uninstall mu_python_library Install from local source (run command from root of repo) pip install -e .","title":"Pre-Requisites"},{"location":"dyn/mu_pip_python_library/developing/#testing","text":"Run a Basic Syntax/Lint Check (using flake8) and resolve any issues flake8 MuPythonLibrary Info Newer editors are very helpful in resolving source formatting errors (whitespace, indentation, etc). In VSCode open the py file and use ++alt+shift+f++ to auto format. Run pytest with coverage data collected pytest -v --junitxml=test.junit.xml --html=pytest_MuPythonLibrary_report.html --self-contained-html --cov=MuPythonLibrary --cov-report html:cov_html --cov-report xml:cov.xml --cov-config .coveragerc Look at the reports pytest_MuPythonLibrary_report.html cov_html/index.html","title":"Testing"},{"location":"dyn/mu_pip_python_library/publishing/","text":"Publishing Project Mu Pip Python Library \u00b6 The MuPythonLibrary is published as a pypi (pip) module. The pip module is named mu_python_library . Pypi allows for easy version management, dependency management, and sharing. Publishing/releasing a new version is generally handled thru a server based build process but for completeness the process is documented here. Steps \u00b6 Info These directions assume you have already configured your workspace for developing. If not please first do that. Directions on the developing page. Pass all development tests and check. Update the readme with info on changes for this version. Get your changes into master branch (official releases should only be done from the master branch) Make a git tag for the version that will be released. Tag format is v . . Do the release process Install tools pip install --upgrade -r requirements.publisher.txt Build a wheel python setup.py sdist bdist_wheel Confirm wheel version is aligned with git tag ConfirmVersionAndTag.py Publish the wheel/distribution to pypi twine upload dist/*","title":"publishing"},{"location":"dyn/mu_pip_python_library/publishing/#publishing-project-mu-pip-python-library","text":"The MuPythonLibrary is published as a pypi (pip) module. The pip module is named mu_python_library . Pypi allows for easy version management, dependency management, and sharing. Publishing/releasing a new version is generally handled thru a server based build process but for completeness the process is documented here.","title":"Publishing Project Mu Pip Python Library"},{"location":"dyn/mu_pip_python_library/publishing/#steps","text":"Info These directions assume you have already configured your workspace for developing. If not please first do that. Directions on the developing page. Pass all development tests and check. Update the readme with info on changes for this version. Get your changes into master branch (official releases should only be done from the master branch) Make a git tag for the version that will be released. Tag format is v . . Do the release process Install tools pip install --upgrade -r requirements.publisher.txt Build a wheel python setup.py sdist bdist_wheel Confirm wheel version is aligned with git tag ConfirmVersionAndTag.py Publish the wheel/distribution to pypi twine upload dist/*","title":"Steps"},{"location":"dyn/mu_pip_python_library/using/","text":"Using Project Mu Pip Python Library \u00b6 Install from pip pip install mu_python_library Usage Docs \u00b6 TBD","title":"using"},{"location":"dyn/mu_pip_python_library/using/#using-project-mu-pip-python-library","text":"Install from pip pip install mu_python_library","title":"Using Project Mu Pip Python Library"},{"location":"dyn/mu_pip_python_library/using/#usage-docs","text":"TBD","title":"Usage Docs"},{"location":"dyn/mu_pip_python_library/MuPythonLibrary/feature_GetHostInfo/","text":"GetHostInfo \u00b6 This document details the utility function called GetHostInfo. This function was written because NuGet needed a way to determine attributes about the host system to determine what parts of a dependency to use. How to Use \u00b6 from MuPythonLibrary.UtilityFunctions import GetHostInfo host_info = GetHostInfo () Usage info \u00b6 GetHostInfo() will return a namedtuple with 3 attributes describing the host machine. Below for each is the name of the field, description of the field and possible contents therein. 1. os - OS Name \u00b6 Windows, Linux, or Java 2. arch - Processor architecture \u00b6 ARM or x86 3. bit - Highest order bit \u00b6 32 or 64 Purpose \u00b6 Since there are multiple different ways one could derive these values, it is necessary provide a common implementation of that logic to ensure it is uniform.","title":"Mu Python Library"},{"location":"dyn/mu_pip_python_library/MuPythonLibrary/feature_GetHostInfo/#gethostinfo","text":"This document details the utility function called GetHostInfo. This function was written because NuGet needed a way to determine attributes about the host system to determine what parts of a dependency to use.","title":"GetHostInfo"},{"location":"dyn/mu_pip_python_library/MuPythonLibrary/feature_GetHostInfo/#how-to-use","text":"from MuPythonLibrary.UtilityFunctions import GetHostInfo host_info = GetHostInfo ()","title":"How to Use"},{"location":"dyn/mu_pip_python_library/MuPythonLibrary/feature_GetHostInfo/#usage-info","text":"GetHostInfo() will return a namedtuple with 3 attributes describing the host machine. Below for each is the name of the field, description of the field and possible contents therein.","title":"Usage info"},{"location":"dyn/mu_pip_python_library/MuPythonLibrary/feature_GetHostInfo/#1-os-os-name","text":"Windows, Linux, or Java","title":"1. os - OS Name"},{"location":"dyn/mu_pip_python_library/MuPythonLibrary/feature_GetHostInfo/#2-arch-processor-architecture","text":"ARM or x86","title":"2. arch - Processor architecture"},{"location":"dyn/mu_pip_python_library/MuPythonLibrary/feature_GetHostInfo/#3-bit-highest-order-bit","text":"32 or 64","title":"3. bit - Highest order bit"},{"location":"dyn/mu_pip_python_library/MuPythonLibrary/feature_GetHostInfo/#purpose","text":"Since there are multiple different ways one could derive these values, it is necessary provide a common implementation of that logic to ensure it is uniform.","title":"Purpose"},{"location":"dyn/mu_plus/RepoDetails/","text":"Project Mu Common Plus \u00b6 Git Details Repository Url: https://github.com/Microsoft/mu_plus.git Branch: release/201808 Commit: a8544881f561c02612e8ca762c5519902e27bb4e Commit Date: 2019-04-01 21:58:45 -0700 About \u00b6 This repo contains Project Mu common code that should only take Basecore as a dependency and be applicable to almost any FW project. For full documentation. Please see the Project Mu docs ( https://github.com/Microsoft/mu ) for more information. This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments. This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments. Copyright \u00b6 Copyright \u00a9 2016-2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Repo Details"},{"location":"dyn/mu_plus/RepoDetails/#project-mu-common-plus","text":"Git Details Repository Url: https://github.com/Microsoft/mu_plus.git Branch: release/201808 Commit: a8544881f561c02612e8ca762c5519902e27bb4e Commit Date: 2019-04-01 21:58:45 -0700","title":"Project Mu Common Plus"},{"location":"dyn/mu_plus/RepoDetails/#about","text":"This repo contains Project Mu common code that should only take Basecore as a dependency and be applicable to almost any FW project. For full documentation. Please see the Project Mu docs ( https://github.com/Microsoft/mu ) for more information. This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments. This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.","title":"About"},{"location":"dyn/mu_plus/RepoDetails/#copyright","text":"Copyright \u00a9 2016-2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Copyright"},{"location":"dyn/mu_plus/DfciPkg/Dfci_Feature/","text":"Device Firmware Configuration Interface (DFCI) \u00b6 BETA Note that this feature is currently in Beta . Interfaces and implementation may change. About \u00b6 The Device Firmware Configuration Interface ( DFCI ) is a standard for managing UEFI firmware settings. It is designed to enable management by device owners who are authenticated via public key infrastructure (PKI). DFCI provides multiple levels of delegated ownership, permissions, & PKI to enable a central device ownership authority to provision (and re-provision) to delegated owners as well as to provide multiple layers of recovery in case a delegated PKI either becomes unavailable or is compromised. DFCI can be configured to enable Zero-touch UEFI Management ( ZUM ). In this configuration, no consent prompt is presented to the physically-present user during enrollment of ownership authorities, as they are presumed to not be the device owner. This enables practical, zero-touch, end-to-end management by modern management solutions , sometimes referred to as MDM, EMM, or UEM. Note that for management of servers in a datacenter, DFCI does not presume to be the solution. Redfish may be a more suitable solution for this environment. More content is in the works... \u00b6","title":"Dfci Feature"},{"location":"dyn/mu_plus/DfciPkg/Dfci_Feature/#device-firmware-configuration-interface-dfci","text":"BETA Note that this feature is currently in Beta . Interfaces and implementation may change.","title":"Device Firmware Configuration Interface (DFCI)"},{"location":"dyn/mu_plus/DfciPkg/Dfci_Feature/#about","text":"The Device Firmware Configuration Interface ( DFCI ) is a standard for managing UEFI firmware settings. It is designed to enable management by device owners who are authenticated via public key infrastructure (PKI). DFCI provides multiple levels of delegated ownership, permissions, & PKI to enable a central device ownership authority to provision (and re-provision) to delegated owners as well as to provide multiple layers of recovery in case a delegated PKI either becomes unavailable or is compromised. DFCI can be configured to enable Zero-touch UEFI Management ( ZUM ). In this configuration, no consent prompt is presented to the physically-present user during enrollment of ownership authorities, as they are presumed to not be the device owner. This enables practical, zero-touch, end-to-end management by modern management solutions , sometimes referred to as MDM, EMM, or UEM. Note that for management of servers in a datacenter, DFCI does not presume to be the solution. Redfish may be a more suitable solution for this environment.","title":"About"},{"location":"dyn/mu_plus/DfciPkg/Dfci_Feature/#more-content-is-in-the-works","text":"","title":"More content is in the works..."},{"location":"dyn/mu_plus/DfciPkg/IdentityAndAuthManager/ReadMe/","text":"Identity and Authentication Manager \u00b6 Basic overview of the IdentityAndAuthManager module. File Overview \u00b6 IdentityAndAuthManager.H \u00b6 Private header file defining private functions for use across module Define the internal structure that holds the auth handle to identity mapping IdentityAndAuthManagerDxe \u00b6 Implement the Dxe specific parts of this. Including: Event handling Protocol access Protocol installation AuthManager.C \u00b6 Provide the implementation for the auth protocol functions AuthManagerProvision.C \u00b6 Support using Variable to set, change, or remove the AuthManager Key based identities AuthManagerProvisionedData.C \u00b6 Support NV storage of Provisioned Data. This manages loading internal store and saving changes to internal store. This differs from the Provision.c file in that this has nothing to do with User input or applying user changes. This is internal to the module only. IdentityManager.C \u00b6 Support the get identity functionality Dispose Auth Handle Private Identity / auth token map management (Add, Free, Find) Add security TODO IdentityAndAuthManagerDxe.INF \u00b6 Dxe Module inf file DfciAuthentication.h PUBLIC HEADER FILE \u00b6 Defines the DXE protocol to access Identity and Auth management","title":"Identity And Auth Manager"},{"location":"dyn/mu_plus/DfciPkg/IdentityAndAuthManager/ReadMe/#identity-and-authentication-manager","text":"Basic overview of the IdentityAndAuthManager module.","title":"Identity and Authentication Manager"},{"location":"dyn/mu_plus/DfciPkg/IdentityAndAuthManager/ReadMe/#file-overview","text":"","title":"File Overview"},{"location":"dyn/mu_plus/DfciPkg/IdentityAndAuthManager/ReadMe/#identityandauthmanagerh","text":"Private header file defining private functions for use across module Define the internal structure that holds the auth handle to identity mapping","title":"IdentityAndAuthManager.H"},{"location":"dyn/mu_plus/DfciPkg/IdentityAndAuthManager/ReadMe/#identityandauthmanagerdxe","text":"Implement the Dxe specific parts of this. Including: Event handling Protocol access Protocol installation","title":"IdentityAndAuthManagerDxe"},{"location":"dyn/mu_plus/DfciPkg/IdentityAndAuthManager/ReadMe/#authmanagerc","text":"Provide the implementation for the auth protocol functions","title":"AuthManager.C"},{"location":"dyn/mu_plus/DfciPkg/IdentityAndAuthManager/ReadMe/#authmanagerprovisionc","text":"Support using Variable to set, change, or remove the AuthManager Key based identities","title":"AuthManagerProvision.C"},{"location":"dyn/mu_plus/DfciPkg/IdentityAndAuthManager/ReadMe/#authmanagerprovisioneddatac","text":"Support NV storage of Provisioned Data. This manages loading internal store and saving changes to internal store. This differs from the Provision.c file in that this has nothing to do with User input or applying user changes. This is internal to the module only.","title":"AuthManagerProvisionedData.C"},{"location":"dyn/mu_plus/DfciPkg/IdentityAndAuthManager/ReadMe/#identitymanagerc","text":"Support the get identity functionality Dispose Auth Handle Private Identity / auth token map management (Add, Free, Find) Add security TODO","title":"IdentityManager.C"},{"location":"dyn/mu_plus/DfciPkg/IdentityAndAuthManager/ReadMe/#identityandauthmanagerdxeinf","text":"Dxe Module inf file","title":"IdentityAndAuthManagerDxe.INF"},{"location":"dyn/mu_plus/DfciPkg/IdentityAndAuthManager/ReadMe/#dfciauthenticationh-public-header-file","text":"Defines the DXE protocol to access Identity and Auth management","title":"DfciAuthentication.h  PUBLIC HEADER FILE"},{"location":"dyn/mu_plus/MsCorePkg/Feature_DebugRouting_Readme/","text":"Debugging with DxeDebugLibRouter \u00b6 Copyright \u00b6 Copyright \u00a9 2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. About \u00b6 DxeDebugLibRouter \u00b6 The DxeDebugLibRouter is an implementation of DebugLib that routes the DebugPrint and DebugAssert messages depending on what the platform is capable of and what has been set-up. In the example below we show how to use DxeDebugLibRouter to route debug messages through either the serial interface or the report status code interface, depending on what protocols and libraries are being used. StatusCodeHandler \u00b6 If you wish to make use of the Report Status Code debugging feature you will need to set up a status code handler and install the gMsSerialStatusCodeHandlerDxeProtocolGuid tag GUID. The MsCorePkg version of StatusCodeHandler is setup to do this. DebugPortProtocolInstallLib \u00b6 The DebugPortProtocolInstallLib is a shim library whos only purpose is to install a protocol that points to the currently linked DebugLib being used by the module. You can see how this is used in the DSC example shown below. ReportStatusCodeRouter \u00b6 This library handles the routing of ReportStatusCode if the DxeDebugLibRouter is set-up to use the ReportStatusCode debug path. We have only implemented the serial output for report status code, but there are many ways you can implement a RSC observer including Serial Port Listener Save Debug To File System Save Debug To Memory ... How To Use \u00b6 To make full use of the DxeDebugLibRouter each Dxe Driver will need to use the DebugPort implementation of DebugLib to route their messages through the DxeDebugLibRouter. The Flowchart below shows how this would work. To set up DxeCore to work as the router you will need to set up the DSC as below: [LibraryClasses.X64] DebugLib|MdePkg/Library/UefiDebugLibDebugPortProtocol/UefiDebugLibDebugPortProtocol.inf [Components.X64] MdeModulePkg/Core/Dxe/DxeMain.inf { <LibraryClasses> NULL|MsCorePkg/Library/DebugPortProtocolInstallLib/DebugPortProtocolInstallLib.inf DebugLib|MsCorePkg/Library/DxeDebugLibRouter/DxeDebugLibRouter.inf } Debug Flow \u00b6 1: The NULL library responsible for publishing the DebugPort protocol is linked against DxeMain. This allows the DebugLib used by Dxe drivers to locate the DebugLib used by Dxe Main 2: Dxe Driver makes a DebugPrint which is routed to the DebugLib linked to DxeMain 3: DebugLib routes the DebugPrint through either Serial or Report Status Code depending on what is installed at the time A: This step can happen at any time. When the StatusCodeHandler is dispatched it installs a tag GUID letting the DebugLib know that Report Status Code is now available","title":"Feature Debug Routing Readme"},{"location":"dyn/mu_plus/MsCorePkg/Feature_DebugRouting_Readme/#debugging-with-dxedebuglibrouter","text":"","title":"Debugging with DxeDebugLibRouter"},{"location":"dyn/mu_plus/MsCorePkg/Feature_DebugRouting_Readme/#copyright","text":"Copyright \u00a9 2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Copyright"},{"location":"dyn/mu_plus/MsCorePkg/Feature_DebugRouting_Readme/#about","text":"","title":"About"},{"location":"dyn/mu_plus/MsCorePkg/Feature_DebugRouting_Readme/#dxedebuglibrouter","text":"The DxeDebugLibRouter is an implementation of DebugLib that routes the DebugPrint and DebugAssert messages depending on what the platform is capable of and what has been set-up. In the example below we show how to use DxeDebugLibRouter to route debug messages through either the serial interface or the report status code interface, depending on what protocols and libraries are being used.","title":"DxeDebugLibRouter"},{"location":"dyn/mu_plus/MsCorePkg/Feature_DebugRouting_Readme/#statuscodehandler","text":"If you wish to make use of the Report Status Code debugging feature you will need to set up a status code handler and install the gMsSerialStatusCodeHandlerDxeProtocolGuid tag GUID. The MsCorePkg version of StatusCodeHandler is setup to do this.","title":"StatusCodeHandler"},{"location":"dyn/mu_plus/MsCorePkg/Feature_DebugRouting_Readme/#debugportprotocolinstalllib","text":"The DebugPortProtocolInstallLib is a shim library whos only purpose is to install a protocol that points to the currently linked DebugLib being used by the module. You can see how this is used in the DSC example shown below.","title":"DebugPortProtocolInstallLib"},{"location":"dyn/mu_plus/MsCorePkg/Feature_DebugRouting_Readme/#reportstatuscoderouter","text":"This library handles the routing of ReportStatusCode if the DxeDebugLibRouter is set-up to use the ReportStatusCode debug path. We have only implemented the serial output for report status code, but there are many ways you can implement a RSC observer including Serial Port Listener Save Debug To File System Save Debug To Memory ...","title":"ReportStatusCodeRouter"},{"location":"dyn/mu_plus/MsCorePkg/Feature_DebugRouting_Readme/#how-to-use","text":"To make full use of the DxeDebugLibRouter each Dxe Driver will need to use the DebugPort implementation of DebugLib to route their messages through the DxeDebugLibRouter. The Flowchart below shows how this would work. To set up DxeCore to work as the router you will need to set up the DSC as below: [LibraryClasses.X64] DebugLib|MdePkg/Library/UefiDebugLibDebugPortProtocol/UefiDebugLibDebugPortProtocol.inf [Components.X64] MdeModulePkg/Core/Dxe/DxeMain.inf { <LibraryClasses> NULL|MsCorePkg/Library/DebugPortProtocolInstallLib/DebugPortProtocolInstallLib.inf DebugLib|MsCorePkg/Library/DxeDebugLibRouter/DxeDebugLibRouter.inf }","title":"How To Use"},{"location":"dyn/mu_plus/MsCorePkg/Feature_DebugRouting_Readme/#debug-flow","text":"1: The NULL library responsible for publishing the DebugPort protocol is linked against DxeMain. This allows the DebugLib used by Dxe drivers to locate the DebugLib used by Dxe Main 2: Dxe Driver makes a DebugPrint which is routed to the DebugLib linked to DxeMain 3: DebugLib routes the DebugPrint through either Serial or Report Status Code depending on what is installed at the time A: This step can happen at any time. When the StatusCodeHandler is dispatched it installs a tag GUID letting the DebugLib know that Report Status Code is now available","title":"Debug Flow"},{"location":"dyn/mu_plus/MsCorePkg/ReadMe/","text":"MS Core Package \u00b6 About \u00b6 This package has shared drivers and libraries that are silicon and platform independent. Testing \u00b6 There are UEFI shell application based unit tests for each library. These tests attempt to verify basic functionality of public interfaces. Check the UntTests folder at the root of the package. Copyright \u00b6 Copyright \u00a9 2017, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Read Me"},{"location":"dyn/mu_plus/MsCorePkg/ReadMe/#ms-core-package","text":"","title":"MS Core Package"},{"location":"dyn/mu_plus/MsCorePkg/ReadMe/#about","text":"This package has shared drivers and libraries that are silicon and platform independent.","title":"About"},{"location":"dyn/mu_plus/MsCorePkg/ReadMe/#testing","text":"There are UEFI shell application based unit tests for each library. These tests attempt to verify basic functionality of public interfaces. Check the UntTests folder at the root of the package.","title":"Testing"},{"location":"dyn/mu_plus/MsCorePkg/ReadMe/#copyright","text":"Copyright \u00a9 2017, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Copyright"},{"location":"dyn/mu_plus/MsCorePkg/Library/DeviceStateLib/Readme/","text":"DeviceStateLib \u00b6 About \u00b6 The MsCorePkg provides the necessary functions to store platform specific device states. These device states can then be quired by any element within the boot environment to enable special code paths. In this library implementation a bitmask is stored in a PCD to signify what modes are active. The default bits in the bitmask are set in DeviceStateLib.h - but each platform is expected to implement its own header to define the platform specific device states or to define any of the unused bits: BIT 0: DEVICE_STATE_SECUREBOOT_OFF - UEFI Secure Boot disabled BIT 1: DEVICE_STATE_MANUFACTURING_MODE - Device is in an OEM defined manufacturing mode BIT 2: DEVICE_STATE_DEVELOPMENT_BUILD_ENABLED - Device is a development build. Non-production features might be enabled BIT 3: DEVICE_STATE_SOURCE_DEBUG_ENABLED - Source debug mode is enabled allowing a user to connect and control the device BIT 4: DEVICE_STATE_UNDEFINED - Set by the platform BIT 24: DEVICE_STATE_PLATFORM_MODE_0 BIT 25: DEVICE_STATE_PLATFORM_MODE_1 BIT 26: DEVICE_STATE_PLATFORM_MODE_2 BIT 27: DEVICE_STATE_PLATFORM_MODE_3 Copyright \u00b6 Copyright \u00a9 2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Device State Lib"},{"location":"dyn/mu_plus/MsCorePkg/Library/DeviceStateLib/Readme/#devicestatelib","text":"","title":"DeviceStateLib"},{"location":"dyn/mu_plus/MsCorePkg/Library/DeviceStateLib/Readme/#about","text":"The MsCorePkg provides the necessary functions to store platform specific device states. These device states can then be quired by any element within the boot environment to enable special code paths. In this library implementation a bitmask is stored in a PCD to signify what modes are active. The default bits in the bitmask are set in DeviceStateLib.h - but each platform is expected to implement its own header to define the platform specific device states or to define any of the unused bits: BIT 0: DEVICE_STATE_SECUREBOOT_OFF - UEFI Secure Boot disabled BIT 1: DEVICE_STATE_MANUFACTURING_MODE - Device is in an OEM defined manufacturing mode BIT 2: DEVICE_STATE_DEVELOPMENT_BUILD_ENABLED - Device is a development build. Non-production features might be enabled BIT 3: DEVICE_STATE_SOURCE_DEBUG_ENABLED - Source debug mode is enabled allowing a user to connect and control the device BIT 4: DEVICE_STATE_UNDEFINED - Set by the platform BIT 24: DEVICE_STATE_PLATFORM_MODE_0 BIT 25: DEVICE_STATE_PLATFORM_MODE_1 BIT 26: DEVICE_STATE_PLATFORM_MODE_2 BIT 27: DEVICE_STATE_PLATFORM_MODE_3","title":"About"},{"location":"dyn/mu_plus/MsCorePkg/Library/DeviceStateLib/Readme/#copyright","text":"Copyright \u00a9 2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Copyright"},{"location":"dyn/mu_plus/MsCorePkg/MuCryptoDxe/Readme/","text":"MuCryptoDxe \u00b6 Copyright \u00b6 Copyright \u00a9 2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. About \u00b6 MuCryptoDxe is a DXE_DRIVER you can include in your platform to have a protocol that can call Crypto functions without having to staticly link against the crypto library in many places Supported Architectures \u00b6 This package is not architecturally dependent. Methods supported \u00b6 There are two protocols exposed in this GUID _MU_PKCS5_PASSWORD_HASH_PROTOCOL \u00b6 HashPassword \u00b6 Hashes a password by passing through to the BaseCryptLib. Returns EFI_STATUS NOTE: DigestSize will be used to determine the hash algorithm and must correspond to a known hash digest size. Use standards. @retval EFI_SUCCESS Congratulations! Your hash is in the output buffer. @retval EFI_INVALID_PARAMETER One of the pointers was NULL or one of the sizes was too large. @retval EFI_INVALID_PARAMETER The hash algorithm could not be determined from the digest size. @retval EFI_ABORTED An error occurred in the OpenSSL subroutines. Inputs : IN CONST MU_PKCS5_PASSWORD_HASH_PROTOCOL IN UINTN PasswordSize IN CONST CHAR8 *Password IN UINTN SaltSize IN CONST UINT8 *Salt IN UINTN IterationCount IN UINTN DigestSize IN UINTN OutputSize OUT UINT8 *Output _MU_PKCS7_PROTOCOL \u00b6 Verify \u00b6 Verifies the validility of a PKCS#7 signed data as described in \"PKCS #7: Cryptographic Message Syntax Standard\". The input signed data could be wrapped in a ContentInfo structure. If P7Data, TrustedCert or InData is NULL, then return EFI_INVALID_PARAMETER. If P7Length, CertLength or DataLength overflow, then return EFI_INVALID_PARAMETER. If this interface is not supported, then return EFI_UNSUPPORTED. @retval EFI_SUCCESS The specified PKCS#7 signed data is valid. @retval EFI_SECURITY_VIOLATION Invalid PKCS#7 signed data. @retval EFI_UNSUPPORTED This interface is not supported. Inputs: IN CONST MU_PKCS7_PROTOCOL IN CONST UINT8 *P7Data, IN UINTN P7DataLength, IN CONST UINT8 *TrustedCert, IN UINTN TrustedCertLength, IN CONST UINT8 *Data, IN UINTN DataLength (in bytes) VerifyEKU \u00b6 This function receives a PKCS7 formatted signature, and then verifies that the specified Enhanced or Extended Key Usages (EKU's) are present in the end-entity leaf signing certificate. Note that this function does not validate the certificate chain. Applications for custom EKU's are quite flexible. For example, a policy EKU may be present in an Issuing Certificate Authority (CA), and any sub-ordinate certificate issued might also contain this EKU, thus constraining the sub-ordinate certificate. Other applications might allow a certificate embedded in a device to specify that other Object Identifiers (OIDs) are present which contains binary data specifying custom capabilities that the device is able to do. @retval EFI_SUCCESS - The required EKUs were found in the signature. @retval EFI_INVALID_PARAMETER - A parameter was invalid. @retval EFI_NOT_FOUND - One or more EKU's were not found in the signature. Inputs: IN CONST MU_PKCS7_PROTOCOL IN CONST UINT8 *Pkcs7Signature, IN CONST UINT32 SignatureSize, (in bytes) IN CONST CHAR8 *RequiredEKUs[], null-terminated strings listing OIDs of required EKUs IN CONST UINT32 RequiredEKUsSize, IN BOOLEAN RequireAllPresent Including in your platform \u00b6 Sample DSC change \u00b6 [Components.<arch>] ... ... MsCorePkg/MuCryptoDxe/MuCryptoDxe.inf Sample FDF change \u00b6 [FV.<a DXE firmware volume>] ... ... INF MsCorePkg/MuCryptoDxe/MuCryptoDxe.inf","title":"Mu Crypto Dxe"},{"location":"dyn/mu_plus/MsCorePkg/MuCryptoDxe/Readme/#mucryptodxe","text":"","title":"MuCryptoDxe"},{"location":"dyn/mu_plus/MsCorePkg/MuCryptoDxe/Readme/#copyright","text":"Copyright \u00a9 2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Copyright"},{"location":"dyn/mu_plus/MsCorePkg/MuCryptoDxe/Readme/#about","text":"MuCryptoDxe is a DXE_DRIVER you can include in your platform to have a protocol that can call Crypto functions without having to staticly link against the crypto library in many places","title":"About"},{"location":"dyn/mu_plus/MsCorePkg/MuCryptoDxe/Readme/#supported-architectures","text":"This package is not architecturally dependent.","title":"Supported Architectures"},{"location":"dyn/mu_plus/MsCorePkg/MuCryptoDxe/Readme/#methods-supported","text":"There are two protocols exposed in this GUID","title":"Methods supported"},{"location":"dyn/mu_plus/MsCorePkg/MuCryptoDxe/Readme/#_mu_pkcs5_password_hash_protocol","text":"","title":"_MU_PKCS5_PASSWORD_HASH_PROTOCOL"},{"location":"dyn/mu_plus/MsCorePkg/MuCryptoDxe/Readme/#hashpassword","text":"Hashes a password by passing through to the BaseCryptLib. Returns EFI_STATUS NOTE: DigestSize will be used to determine the hash algorithm and must correspond to a known hash digest size. Use standards. @retval EFI_SUCCESS Congratulations! Your hash is in the output buffer. @retval EFI_INVALID_PARAMETER One of the pointers was NULL or one of the sizes was too large. @retval EFI_INVALID_PARAMETER The hash algorithm could not be determined from the digest size. @retval EFI_ABORTED An error occurred in the OpenSSL subroutines. Inputs : IN CONST MU_PKCS5_PASSWORD_HASH_PROTOCOL IN UINTN PasswordSize IN CONST CHAR8 *Password IN UINTN SaltSize IN CONST UINT8 *Salt IN UINTN IterationCount IN UINTN DigestSize IN UINTN OutputSize OUT UINT8 *Output","title":"HashPassword"},{"location":"dyn/mu_plus/MsCorePkg/MuCryptoDxe/Readme/#_mu_pkcs7_protocol","text":"","title":"_MU_PKCS7_PROTOCOL"},{"location":"dyn/mu_plus/MsCorePkg/MuCryptoDxe/Readme/#verify","text":"Verifies the validility of a PKCS#7 signed data as described in \"PKCS #7: Cryptographic Message Syntax Standard\". The input signed data could be wrapped in a ContentInfo structure. If P7Data, TrustedCert or InData is NULL, then return EFI_INVALID_PARAMETER. If P7Length, CertLength or DataLength overflow, then return EFI_INVALID_PARAMETER. If this interface is not supported, then return EFI_UNSUPPORTED. @retval EFI_SUCCESS The specified PKCS#7 signed data is valid. @retval EFI_SECURITY_VIOLATION Invalid PKCS#7 signed data. @retval EFI_UNSUPPORTED This interface is not supported. Inputs: IN CONST MU_PKCS7_PROTOCOL IN CONST UINT8 *P7Data, IN UINTN P7DataLength, IN CONST UINT8 *TrustedCert, IN UINTN TrustedCertLength, IN CONST UINT8 *Data, IN UINTN DataLength (in bytes)","title":"Verify"},{"location":"dyn/mu_plus/MsCorePkg/MuCryptoDxe/Readme/#verifyeku","text":"This function receives a PKCS7 formatted signature, and then verifies that the specified Enhanced or Extended Key Usages (EKU's) are present in the end-entity leaf signing certificate. Note that this function does not validate the certificate chain. Applications for custom EKU's are quite flexible. For example, a policy EKU may be present in an Issuing Certificate Authority (CA), and any sub-ordinate certificate issued might also contain this EKU, thus constraining the sub-ordinate certificate. Other applications might allow a certificate embedded in a device to specify that other Object Identifiers (OIDs) are present which contains binary data specifying custom capabilities that the device is able to do. @retval EFI_SUCCESS - The required EKUs were found in the signature. @retval EFI_INVALID_PARAMETER - A parameter was invalid. @retval EFI_NOT_FOUND - One or more EKU's were not found in the signature. Inputs: IN CONST MU_PKCS7_PROTOCOL IN CONST UINT8 *Pkcs7Signature, IN CONST UINT32 SignatureSize, (in bytes) IN CONST CHAR8 *RequiredEKUs[], null-terminated strings listing OIDs of required EKUs IN CONST UINT32 RequiredEKUsSize, IN BOOLEAN RequireAllPresent","title":"VerifyEKU"},{"location":"dyn/mu_plus/MsCorePkg/MuCryptoDxe/Readme/#including-in-your-platform","text":"","title":"Including in your platform"},{"location":"dyn/mu_plus/MsCorePkg/MuCryptoDxe/Readme/#sample-dsc-change","text":"[Components.<arch>] ... ... MsCorePkg/MuCryptoDxe/MuCryptoDxe.inf","title":"Sample DSC change"},{"location":"dyn/mu_plus/MsCorePkg/MuCryptoDxe/Readme/#sample-fdf-change","text":"[FV.<a DXE firmware volume>] ... ... INF MsCorePkg/MuCryptoDxe/MuCryptoDxe.inf","title":"Sample FDF change"},{"location":"dyn/mu_plus/MsCorePkg/UnitTests/JsonTest/readme/","text":"Verify Json Lite library functionality \u00b6 The Json Lite Library parses json strings in to tuples and encodes tuples into a json string. About \u00b6 These tests verify that the Json Lite Library functions properly. JsonTestApp \u00b6 This application consumes the UnitTestLib and implements various test cases for the verification of the Json Lite Library. Copyright \u00b6 Copyright \u00a9 2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Json Test"},{"location":"dyn/mu_plus/MsCorePkg/UnitTests/JsonTest/readme/#verify-json-lite-library-functionality","text":"The Json Lite Library parses json strings in to tuples and encodes tuples into a json string.","title":"Verify Json Lite library functionality"},{"location":"dyn/mu_plus/MsCorePkg/UnitTests/JsonTest/readme/#about","text":"These tests verify that the Json Lite Library functions properly.","title":"About"},{"location":"dyn/mu_plus/MsCorePkg/UnitTests/JsonTest/readme/#jsontestapp","text":"This application consumes the UnitTestLib and implements various test cases for the verification of the Json Lite Library.","title":"JsonTestApp"},{"location":"dyn/mu_plus/MsCorePkg/UnitTests/JsonTest/readme/#copyright","text":"Copyright \u00a9 2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Copyright"},{"location":"dyn/mu_plus/MsGraphicsPkg/PrintScreenLogger/Readme/","text":"PrintScreenLogger \u00b6 About \u00b6 PrintScreenLogger is a DXE_DRIVER you can include in your platform to obtain Screen Captures during the preboot environment by pressing the Ctrl-PrtScn key combination. This action will creates a 24bbp (Bits Per Pixel) .BMP file of the screen's contents and write it to a enabled USB drive. Supported Architectures \u00b6 This package is not architecturally dependent. This package is dependent upon the Gop pixel format, and only supports these two pixel formats: 1. PixelRedGreenBlueReserved8BitPerColor 2. PixelBlueGreenRedReserved8BitPerColor PrintScreenLogger operation \u00b6 During initialization, the Print Screen Loggger registers for notification of the Ctrl-PrtScn key combination is pressed. When a Print Screen callback occurs: Looks for a mounted USB drive that contains a file in the root directory called PrintScreenEnable.txt . This limits PrintScreenLogger to only write to enabled USB devices. Looks for the next available filename in the form PrtScreen####.bmp , starting with 0000. Creates the new PrtScreen####.bmp file. Call GraphicsOutput->Blt to obtain the complete screen. Converts the BLT buffer to a 24bbp BMP structure. Writes the BMP structure to the new PrtScreen####.bmp file. Including in your platform \u00b6 Sample DSC change \u00b6 [Components.<arch>] ... ... MsGraphicsPkg/PrintScreenFileLogger/PrintScreenFileLogger.inf Sample FDF change \u00b6 [FV.<a DXE firmware volume>] ... ... INF MsGraphicsPkg/PrintScreenFileLogger/PrintScreenFileLogger.inf Copyright \u00b6 Copyright \u00a9 2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Print Screen Logger"},{"location":"dyn/mu_plus/MsGraphicsPkg/PrintScreenLogger/Readme/#printscreenlogger","text":"","title":"PrintScreenLogger"},{"location":"dyn/mu_plus/MsGraphicsPkg/PrintScreenLogger/Readme/#about","text":"PrintScreenLogger is a DXE_DRIVER you can include in your platform to obtain Screen Captures during the preboot environment by pressing the Ctrl-PrtScn key combination. This action will creates a 24bbp (Bits Per Pixel) .BMP file of the screen's contents and write it to a enabled USB drive.","title":"About"},{"location":"dyn/mu_plus/MsGraphicsPkg/PrintScreenLogger/Readme/#supported-architectures","text":"This package is not architecturally dependent. This package is dependent upon the Gop pixel format, and only supports these two pixel formats: 1. PixelRedGreenBlueReserved8BitPerColor 2. PixelBlueGreenRedReserved8BitPerColor","title":"Supported Architectures"},{"location":"dyn/mu_plus/MsGraphicsPkg/PrintScreenLogger/Readme/#printscreenlogger-operation","text":"During initialization, the Print Screen Loggger registers for notification of the Ctrl-PrtScn key combination is pressed. When a Print Screen callback occurs: Looks for a mounted USB drive that contains a file in the root directory called PrintScreenEnable.txt . This limits PrintScreenLogger to only write to enabled USB devices. Looks for the next available filename in the form PrtScreen####.bmp , starting with 0000. Creates the new PrtScreen####.bmp file. Call GraphicsOutput->Blt to obtain the complete screen. Converts the BLT buffer to a 24bbp BMP structure. Writes the BMP structure to the new PrtScreen####.bmp file.","title":"PrintScreenLogger operation"},{"location":"dyn/mu_plus/MsGraphicsPkg/PrintScreenLogger/Readme/#including-in-your-platform","text":"","title":"Including in your platform"},{"location":"dyn/mu_plus/MsGraphicsPkg/PrintScreenLogger/Readme/#sample-dsc-change","text":"[Components.<arch>] ... ... MsGraphicsPkg/PrintScreenFileLogger/PrintScreenFileLogger.inf","title":"Sample DSC change"},{"location":"dyn/mu_plus/MsGraphicsPkg/PrintScreenLogger/Readme/#sample-fdf-change","text":"[FV.<a DXE firmware volume>] ... ... INF MsGraphicsPkg/PrintScreenFileLogger/PrintScreenFileLogger.inf","title":"Sample FDF change"},{"location":"dyn/mu_plus/MsGraphicsPkg/PrintScreenLogger/Readme/#copyright","text":"Copyright \u00a9 2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Copyright"},{"location":"dyn/mu_plus/MsWheaPkg/readme/","text":"MS WHEA Package \u00b6 About \u00b6 This package contains drivers and infrastructure for reporting errors and telemetry through the CPER (Common Platform Error Record) HwErrRecord interface, specifically targeting systems that also leverage WHEA (Windows Hardware Error Architecture). The MsWhea drivers provide the same functionality at different stages of UEFI by binding to the REPORT_STATUS_CODE interface. Together, they store hardware errors and corrected faults into non-volatile memory that is later picked up by Windows. In Windows, this can be emitted as telemetry which is then used to idenitfy errors and patterns for devices (as of time of writing any event besides EFI_GENERIC_ERROR_INFO will be sent). This package also contains optional solutions for persisting error records in the pre-memory space. In early boot stages, drivers need to emit events as critical in order for them to be logged. More information about CPER can be found in Appendix N of the UEFI spec. How to include this driver \u00b6 This driver must be included via DSC by including the EarlyStorageLib: MsWheaEarlyStorageLib|MsWheaPkg/Library/MsWheaEarlyStorageLib/MsWheaEarlyStorageLib.inf Then the PEI stage driver will be included in the DSC Components.IA32 or PEI section: MsWheaPkg/MsWheaReport/Pei/MsWheaReportPei.inf Then the DXE stage driver will be included in the Components.X64 or DXE section: MsWheaPkg/MsWheaReport/Dxe/MsWheaReportDxe.inf Important Notes \u00b6 The PCD value of gMsWheaPkgTokenSpaceGuid.PcdDeviceIdentifierGuid must be overriden by each platform as this is later used in the CPER as the Platform ID (byte offset 32 in the record). In the DXE phase, errors will be picked up by MsWhea for you. In early phases of boot, the errors must be explicitly logged. To do so, first add the library into your INF: MsWheaPkg/MsWheaPkg.dec These headers must be included: - MsWheaErrorStatus.h - Library/BaseLib.h You also must define the WheaHeader you will write to. MS_WHEA_ERROR_HDR mMsWheaHdr; //create a header for the hardware error record we might create SetMem(&mMsWheaHdr, sizeof(MS_WHEA_ERROR_HDR), 0); mMsWheaHdr.Signature = MS_WHEA_ERROR_SIGNATURE; // Fixed by design mMsWheaHdr.Rev = MS_WHEA_REV_1; // Support extended CMOS Support // mMsWheaHdr.Phase = 0; // Leave alone, filled by MsWhea RSC Handler mMsWheaHdr.ErrorSeverity = EFI_GENERIC_ERROR_FATAL; // So it can survie any immediate reboot Once you're ready to log your error, you can set the CriticalInfo (UINT64) and ReporterID (UINT64) and report the StatusCode. The failure type is of type EFI_STATUS_CODE_VALUE. ReportStatusCodeWithExtendedData( MS_WHEA_ERROR_STATUS_TYPE, , &mMsWheaHdr, sizeof(MS_WHEA_ERROR_HDR) ); Testing \u00b6 There is a UEFI shell application based unit test for WHEA reports. This test attempts to verify basic functionality of public interfaces. Check the UnitTests folder at the root of the package. There is also a feature flag that can inject reports on each boot during various uefi stages. This flag should be off in production. Copyright \u00b6 Copyright \u00a9 2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Ms Whea Pkg"},{"location":"dyn/mu_plus/MsWheaPkg/readme/#ms-whea-package","text":"","title":"MS WHEA Package"},{"location":"dyn/mu_plus/MsWheaPkg/readme/#about","text":"This package contains drivers and infrastructure for reporting errors and telemetry through the CPER (Common Platform Error Record) HwErrRecord interface, specifically targeting systems that also leverage WHEA (Windows Hardware Error Architecture). The MsWhea drivers provide the same functionality at different stages of UEFI by binding to the REPORT_STATUS_CODE interface. Together, they store hardware errors and corrected faults into non-volatile memory that is later picked up by Windows. In Windows, this can be emitted as telemetry which is then used to idenitfy errors and patterns for devices (as of time of writing any event besides EFI_GENERIC_ERROR_INFO will be sent). This package also contains optional solutions for persisting error records in the pre-memory space. In early boot stages, drivers need to emit events as critical in order for them to be logged. More information about CPER can be found in Appendix N of the UEFI spec.","title":"About"},{"location":"dyn/mu_plus/MsWheaPkg/readme/#how-to-include-this-driver","text":"This driver must be included via DSC by including the EarlyStorageLib: MsWheaEarlyStorageLib|MsWheaPkg/Library/MsWheaEarlyStorageLib/MsWheaEarlyStorageLib.inf Then the PEI stage driver will be included in the DSC Components.IA32 or PEI section: MsWheaPkg/MsWheaReport/Pei/MsWheaReportPei.inf Then the DXE stage driver will be included in the Components.X64 or DXE section: MsWheaPkg/MsWheaReport/Dxe/MsWheaReportDxe.inf","title":"How to include this driver"},{"location":"dyn/mu_plus/MsWheaPkg/readme/#important-notes","text":"The PCD value of gMsWheaPkgTokenSpaceGuid.PcdDeviceIdentifierGuid must be overriden by each platform as this is later used in the CPER as the Platform ID (byte offset 32 in the record). In the DXE phase, errors will be picked up by MsWhea for you. In early phases of boot, the errors must be explicitly logged. To do so, first add the library into your INF: MsWheaPkg/MsWheaPkg.dec These headers must be included: - MsWheaErrorStatus.h - Library/BaseLib.h You also must define the WheaHeader you will write to. MS_WHEA_ERROR_HDR mMsWheaHdr; //create a header for the hardware error record we might create SetMem(&mMsWheaHdr, sizeof(MS_WHEA_ERROR_HDR), 0); mMsWheaHdr.Signature = MS_WHEA_ERROR_SIGNATURE; // Fixed by design mMsWheaHdr.Rev = MS_WHEA_REV_1; // Support extended CMOS Support // mMsWheaHdr.Phase = 0; // Leave alone, filled by MsWhea RSC Handler mMsWheaHdr.ErrorSeverity = EFI_GENERIC_ERROR_FATAL; // So it can survie any immediate reboot Once you're ready to log your error, you can set the CriticalInfo (UINT64) and ReporterID (UINT64) and report the StatusCode. The failure type is of type EFI_STATUS_CODE_VALUE. ReportStatusCodeWithExtendedData( MS_WHEA_ERROR_STATUS_TYPE, , &mMsWheaHdr, sizeof(MS_WHEA_ERROR_HDR) );","title":"Important Notes"},{"location":"dyn/mu_plus/MsWheaPkg/readme/#testing","text":"There is a UEFI shell application based unit test for WHEA reports. This test attempts to verify basic functionality of public interfaces. Check the UnitTests folder at the root of the package. There is also a feature flag that can inject reports on each boot during various uefi stages. This flag should be off in production.","title":"Testing"},{"location":"dyn/mu_plus/MsWheaPkg/readme/#copyright","text":"Copyright \u00a9 2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Copyright"},{"location":"dyn/mu_plus/PcBdsPkg/Library/MsNetworkDependencyLib/readme/","text":"MS Network DependencyLib and NetworkDelayLib \u00b6 About \u00b6 These libraries implement a method to disable the network stack unless there is a reason to use the network. Not starting the network improves boot performance and causes fewer issues during manufacturing. How to use these libraries \u00b6 Add the NetworkDelayLib as a NULL library reference. All this library does is introduce a [Depex] on a NetworkDelay protocol. MdeModulePkg/Universal/Network/SnpDxe/SnpDxe.inf { <LibraryClasses> NULL|PcBdsPkg/Library/MsNetworkDelayLib/MsNetworkDelayLib.inf } The NetworkDependencylib implements a StartNetwork() interface that will publish the NetworkDelay protocol. The future goal of this functionality is to have the EFI_BOOT_MANAGER_POLICY.ConnectDeviceClass() function be overriden and insert a call to DeviceDependencyLib.StartNetwork() when a request is made to start the network class. You nay see other references to NetworkDependencyLib as the conversion to using EFI_BOOT_MANAGER_POLICY.ConnectDeviceClass() is not complete. Copyright \u00b6 Copyright \u00a9 2019, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Ms Network Dependency Lib"},{"location":"dyn/mu_plus/PcBdsPkg/Library/MsNetworkDependencyLib/readme/#ms-network-dependencylib-and-networkdelaylib","text":"","title":"MS Network DependencyLib and NetworkDelayLib"},{"location":"dyn/mu_plus/PcBdsPkg/Library/MsNetworkDependencyLib/readme/#about","text":"These libraries implement a method to disable the network stack unless there is a reason to use the network. Not starting the network improves boot performance and causes fewer issues during manufacturing.","title":"About"},{"location":"dyn/mu_plus/PcBdsPkg/Library/MsNetworkDependencyLib/readme/#how-to-use-these-libraries","text":"Add the NetworkDelayLib as a NULL library reference. All this library does is introduce a [Depex] on a NetworkDelay protocol. MdeModulePkg/Universal/Network/SnpDxe/SnpDxe.inf { <LibraryClasses> NULL|PcBdsPkg/Library/MsNetworkDelayLib/MsNetworkDelayLib.inf } The NetworkDependencylib implements a StartNetwork() interface that will publish the NetworkDelay protocol. The future goal of this functionality is to have the EFI_BOOT_MANAGER_POLICY.ConnectDeviceClass() function be overriden and insert a call to DeviceDependencyLib.StartNetwork() when a request is made to start the network class. You nay see other references to NetworkDependencyLib as the conversion to using EFI_BOOT_MANAGER_POLICY.ConnectDeviceClass() is not complete.","title":"How to use these libraries"},{"location":"dyn/mu_plus/PcBdsPkg/Library/MsNetworkDependencyLib/readme/#copyright","text":"Copyright \u00a9 2019, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Copyright"},{"location":"dyn/mu_plus/UefiTestingPkg/Readme/","text":"UEFI Testing Package \u00b6 About \u00b6 This package adds tests. System Functional tests \u00b6 Tests that invoke system functions and query system state for verification. MemmapAndMatTestApp \u00b6 This test compares the UEFI memory map and Memory Attributes Table against known requirements. The MAT has strict requirements to allow OS usage and page protections. MorLockTestApp \u00b6 This test verifies the UEFI variable store handling of MorLock v1 and v2 behavior. SmmPagingProtections \u00b6 This test verifies the SMM paging attributes by invoking operations that should cause cpu exceptions if the memory protections are in place. The SMM cpu exception handler needs to be configured to force reset on trap to allow automated testing. See UefiCpuPkg/Include/Protocol/SmmExceptionTestProtocol.h , gUefiCpuPkgTokenSpaceGuid.PcdSmmExceptionRebootInsteadOfHaltDefault , and gUefiCpuPkgTokenSpaceGuid.PcdSmmExceptionTestModeSupport . System Audit tests \u00b6 UEFI applications that collect data from the system and then that data can be used to compare against known good values. UefiVarLockAudit \u00b6 Audit collection tool that gathers information about UEFI variables. This allows auditing the variables within a system, checking attributes, and confirming read/write status. This information is put into an XML file that allows for easy comparison and programmatic auditing. UEFI \u00b6 UEFI shell application that gets the current variable information from the UEFI shell and creates an XML file. Windows \u00b6 Python script that can be run from the Windows OS. It takes the UEFI created XML file as input and then queries all listed variables and updates the XML with access and status codes. This gives additional verification for variables that may employ late locking or other protections from OS access. TpmEventLogAudit \u00b6 Audit tool to collect the TPM Event Log from the system in standard format. It can then be programmatically compared against a known event log for the given system. Easy this that can be tested are the number of events in some PCRs, confirm that all PCRs should be capped, etc. SMMPagingAudit \u00b6 Audit tool creates a human readable description of the SMM page tables and memory environment. App \u00b6 UEFI shell application collects information from SMM and writes it to files. SMM \u00b6 SMM Library linked into SMM driver used to collect information about SMM environment. Activated by the shell app collects IDT, GDT, page tables, and loaded images. Windows \u00b6 Python scripts that process the files generated by the UEFI app and output a report for verification and analysis. Copyright \u00b6 Copyright \u00a9 2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Readme"},{"location":"dyn/mu_plus/UefiTestingPkg/Readme/#uefi-testing-package","text":"","title":"UEFI Testing Package"},{"location":"dyn/mu_plus/UefiTestingPkg/Readme/#about","text":"This package adds tests.","title":"About"},{"location":"dyn/mu_plus/UefiTestingPkg/Readme/#system-functional-tests","text":"Tests that invoke system functions and query system state for verification.","title":"System Functional tests"},{"location":"dyn/mu_plus/UefiTestingPkg/Readme/#memmapandmattestapp","text":"This test compares the UEFI memory map and Memory Attributes Table against known requirements. The MAT has strict requirements to allow OS usage and page protections.","title":"MemmapAndMatTestApp"},{"location":"dyn/mu_plus/UefiTestingPkg/Readme/#morlocktestapp","text":"This test verifies the UEFI variable store handling of MorLock v1 and v2 behavior.","title":"MorLockTestApp"},{"location":"dyn/mu_plus/UefiTestingPkg/Readme/#smmpagingprotections","text":"This test verifies the SMM paging attributes by invoking operations that should cause cpu exceptions if the memory protections are in place. The SMM cpu exception handler needs to be configured to force reset on trap to allow automated testing. See UefiCpuPkg/Include/Protocol/SmmExceptionTestProtocol.h , gUefiCpuPkgTokenSpaceGuid.PcdSmmExceptionRebootInsteadOfHaltDefault , and gUefiCpuPkgTokenSpaceGuid.PcdSmmExceptionTestModeSupport .","title":"SmmPagingProtections"},{"location":"dyn/mu_plus/UefiTestingPkg/Readme/#system-audit-tests","text":"UEFI applications that collect data from the system and then that data can be used to compare against known good values.","title":"System Audit tests"},{"location":"dyn/mu_plus/UefiTestingPkg/Readme/#uefivarlockaudit","text":"Audit collection tool that gathers information about UEFI variables. This allows auditing the variables within a system, checking attributes, and confirming read/write status. This information is put into an XML file that allows for easy comparison and programmatic auditing.","title":"UefiVarLockAudit"},{"location":"dyn/mu_plus/UefiTestingPkg/Readme/#uefi","text":"UEFI shell application that gets the current variable information from the UEFI shell and creates an XML file.","title":"UEFI"},{"location":"dyn/mu_plus/UefiTestingPkg/Readme/#windows","text":"Python script that can be run from the Windows OS. It takes the UEFI created XML file as input and then queries all listed variables and updates the XML with access and status codes. This gives additional verification for variables that may employ late locking or other protections from OS access.","title":"Windows"},{"location":"dyn/mu_plus/UefiTestingPkg/Readme/#tpmeventlogaudit","text":"Audit tool to collect the TPM Event Log from the system in standard format. It can then be programmatically compared against a known event log for the given system. Easy this that can be tested are the number of events in some PCRs, confirm that all PCRs should be capped, etc.","title":"TpmEventLogAudit"},{"location":"dyn/mu_plus/UefiTestingPkg/Readme/#smmpagingaudit","text":"Audit tool creates a human readable description of the SMM page tables and memory environment.","title":"SMMPagingAudit"},{"location":"dyn/mu_plus/UefiTestingPkg/Readme/#app","text":"UEFI shell application collects information from SMM and writes it to files.","title":"App"},{"location":"dyn/mu_plus/UefiTestingPkg/Readme/#smm","text":"SMM Library linked into SMM driver used to collect information about SMM environment. Activated by the shell app collects IDT, GDT, page tables, and loaded images.","title":"SMM"},{"location":"dyn/mu_plus/UefiTestingPkg/Readme/#windows_1","text":"Python scripts that process the files generated by the UEFI app and output a report for verification and analysis.","title":"Windows"},{"location":"dyn/mu_plus/UefiTestingPkg/Readme/#copyright","text":"Copyright \u00a9 2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Copyright"},{"location":"dyn/mu_plus/UefiTestingPkg/AuditTests/DMAProtectionAudit/UEFI/VTd/","text":"DMAR Table Audit \u00b6 Copyright \u00b6 Copyright \u00a9 2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. About \u00b6 DMAProtectionUnitTestApp.c Shell based UEFI unit test based off of the MsUnitTestPkg that test for: 1. Intel VTd global status register shows VTd enabled 2. All RMRR regions are set as EfiReservedMemoryType 3. Bus mastering enabled (BME) is disabled on ExitBootServices. Because we can no longer write to file after ExitBootServices a variable is used to store the test state and the machine. Note: this unit test requires a restart to finish its testing. If you plan to use this unit test in automation make sure to set up your startup.nsh script properly.","title":"VTd"},{"location":"dyn/mu_plus/UefiTestingPkg/AuditTests/DMAProtectionAudit/UEFI/VTd/#dmar-table-audit","text":"","title":"DMAR Table Audit"},{"location":"dyn/mu_plus/UefiTestingPkg/AuditTests/DMAProtectionAudit/UEFI/VTd/#copyright","text":"Copyright \u00a9 2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Copyright"},{"location":"dyn/mu_plus/UefiTestingPkg/AuditTests/DMAProtectionAudit/UEFI/VTd/#about","text":"DMAProtectionUnitTestApp.c Shell based UEFI unit test based off of the MsUnitTestPkg that test for: 1. Intel VTd global status register shows VTd enabled 2. All RMRR regions are set as EfiReservedMemoryType 3. Bus mastering enabled (BME) is disabled on ExitBootServices. Because we can no longer write to file after ExitBootServices a variable is used to store the test state and the machine. Note: this unit test requires a restart to finish its testing. If you plan to use this unit test in automation make sure to set up your startup.nsh script properly.","title":"About"},{"location":"dyn/mu_plus/UefiTestingPkg/AuditTests/DMAProtectionAudit/Windows/Readme/","text":"DMAR Table Audit \u00b6 Copyright \u00b6 Copyright \u00a9 2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. About \u00b6 DMARTableAudit.py Unit test that checks: 1. DMA remapping bit is enabled 2. No ANDD structures are included in DMAR table 3. RMRRs are limited to only the RMRRs specified in provided XML file (if no XML provided then verify no RMRRs exist) Software Requirements 1. Python3 2. Pywin32 ```pip install Pywin32``` Project Mu python library pip install mu-python-library","title":"Windows"},{"location":"dyn/mu_plus/UefiTestingPkg/AuditTests/DMAProtectionAudit/Windows/Readme/#dmar-table-audit","text":"","title":"DMAR Table Audit"},{"location":"dyn/mu_plus/UefiTestingPkg/AuditTests/DMAProtectionAudit/Windows/Readme/#copyright","text":"Copyright \u00a9 2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Copyright"},{"location":"dyn/mu_plus/UefiTestingPkg/AuditTests/DMAProtectionAudit/Windows/Readme/#about","text":"DMARTableAudit.py Unit test that checks: 1. DMA remapping bit is enabled 2. No ANDD structures are included in DMAR table 3. RMRRs are limited to only the RMRRs specified in provided XML file (if no XML provided then verify no RMRRs exist) Software Requirements 1. Python3 2. Pywin32 ```pip install Pywin32``` Project Mu python library pip install mu-python-library","title":"About"},{"location":"dyn/mu_plus/UefiTestingPkg/AuditTests/PagingAudit/","text":"Paging Audit \u00b6 SmmPagingAudit \u00b6 Code Basics \u00b6 SMM is a privileged mode of the ia32/x64 cpu architecture. In this environment nearly all system state can be inspected including that of the operating system, kernel, and hypervisor. Due to it's capabilities SMM has become an area of interest for those searching to exploit the system. To help minimize the interest and impact of an exploit in SMM the SMI handlers should operate in a least privileged model. To do this standard paging can be leveraged to limit the SMI handlers access. Tianocore has a feature to enable paging within SMM and this tool helps confirm the configuration being used. This tool requires three parts to get a complete view. SMM \u00b6 The SMM driver must be included in your build and dispatched to SMM before the End Of Dxe. It is recommended that this driver should only be used on debug builds as it reports the entire SMM memory environment to the caller. The shell app will communicate to the SMM driver and request critical memory information including IDT, GDT, page tables, and loaded images. SMM Version App \u00b6 The UEFI shell application collects system information from the DXE environment and then communicates to the SMM driver/handler to collect necessary info from SMM. It then writes this data to files and then that content is used by the windows scripts. DxePagingAudit \u00b6 Code Basics \u00b6 The Dxe version of paging audit drvier/shell app intends to inspect all 4 levels of page tables and their corresponding Read/Write/Executable permissions. The driver/shell app will collect necessary memrory information from platform enviroment, then iterate through each page entries and log them on to avaiable SimpleFileSystem. The collected *.dat files can be parsed using Windows\\PagingReportGenerator.py. DXE Driver \u00b6 The DXE Driver registers an event to be notified on Exit Boot Services (to change this, replace gEfiEventExitBootServicesGuid with a different event GUID), which will then trigger the paging information collection. DXE Version App \u00b6 The DXE version of UEFI shell application collects necessary system and memory information from DXE when invoked from Shell environment. Windows \u00b6 The Windows script will look at the *.DAT files, parse their content, check for errors and then insert the formatted data into the Html report file. This report file is then double-clickable by the end user/developer to review the posture of the SMM environment. The Results tab applies our suggested rules for SMM to show if the environment passes or fails. If it fails the filters on the data tab can be configured to show where the problem exists. Usage / Enabling on EDK2 based system \u00b6 First, for the SMM driver and app you need to add them to your DSC file for your project so they get compiled. SMM Paging Audit \u00b6 [Components.X64] UefiTestingPkg\\AuditTests\\PagingAudit\\SmmPagingAudit\\Smm\\SmmPagingAuditSmm.inf UefiTestingPkg\\AuditTests\\PagingAudit\\SmmPagingAudit\\App\\SmmPagingAuditApp.inf Next, you must add the SMM driver to a firmware volume in your FDF that can dispatch SMM modules. INF UefiTestingPkg\\AuditTests\\PagingAudit\\SmmPagingAudit\\Smm\\SmmPagingAuditSmm.inf Third, after compiling your new firmware you must: 1. flash that image on the system. 2. Copy the SmmPagingAuditApp.efi to a USB key Then, boot your system running the new firmware to the shell and run the app. The tool will create a set of *.dat files on the same USB key. On a Windows PC, run the Python script on the data found on your USB key. Finally, double-click the HTML output file and check your results. DXE Paging Audit \u00b6 DxePagingAuditDxe \u00b6 Add the following entry to platform dsc file; [Components.X64] UefiTestingPkg\\AuditTests\\PagingAudit\\DxePagingAudit\\Dxe\\DxePagingAuditDxe.inf Add the driver to a firmware volume in your FDF that can dispatch it; INF UefiTestingPkg\\AuditTests\\PagingAudit\\DxePagingAudit\\Dxe\\DxePagingAuditDxe.inf After compiling your new firmware you must: a. flash that image on the system. Boot your system running the new firmware to the shell with a USB plugged in. If the USB disk is FS0:\\, the files should be in FS1:\\. Copy them to the flash drive: copy FS1:\\*.dat FS0:\\ On a Windows PC, run Windows\\PagingReportGenerator.py script with the data found on your USB key. Please use the following command for detailed script instruction: PagingReportGenerator.py -h Double-click the HTML output file and check your results; DxePagingAuditApp \u00b6 Add the following entry to platform dsc file; [Components.X64] UefiTestingPkg\\AuditTests\\PagingAudit\\DxePagingAudit\\App\\DxePagingAuditApp.inf Compile the newly added application and copy DxePagingAuditApp.efi to a USB key; Boot your system to the shell with the USB plugged in. If the USB disk is FS0:\\, the files should be in FS1:\\. Copy them to the flash drive: FS0:\\ DxePagingAuditApp.efi copy FS1:\\*.dat FS0:\\ Follow step 5 - 6 from DxePagingAuditDxe section; Copyright \u00b6 Copyright \u00a9 2018 - 2019, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Paging Audit"},{"location":"dyn/mu_plus/UefiTestingPkg/AuditTests/PagingAudit/#paging-audit","text":"","title":"Paging Audit"},{"location":"dyn/mu_plus/UefiTestingPkg/AuditTests/PagingAudit/#smmpagingaudit","text":"","title":"SmmPagingAudit"},{"location":"dyn/mu_plus/UefiTestingPkg/AuditTests/PagingAudit/#code-basics","text":"SMM is a privileged mode of the ia32/x64 cpu architecture. In this environment nearly all system state can be inspected including that of the operating system, kernel, and hypervisor. Due to it's capabilities SMM has become an area of interest for those searching to exploit the system. To help minimize the interest and impact of an exploit in SMM the SMI handlers should operate in a least privileged model. To do this standard paging can be leveraged to limit the SMI handlers access. Tianocore has a feature to enable paging within SMM and this tool helps confirm the configuration being used. This tool requires three parts to get a complete view.","title":"Code Basics"},{"location":"dyn/mu_plus/UefiTestingPkg/AuditTests/PagingAudit/#smm","text":"The SMM driver must be included in your build and dispatched to SMM before the End Of Dxe. It is recommended that this driver should only be used on debug builds as it reports the entire SMM memory environment to the caller. The shell app will communicate to the SMM driver and request critical memory information including IDT, GDT, page tables, and loaded images.","title":"SMM"},{"location":"dyn/mu_plus/UefiTestingPkg/AuditTests/PagingAudit/#smm-version-app","text":"The UEFI shell application collects system information from the DXE environment and then communicates to the SMM driver/handler to collect necessary info from SMM. It then writes this data to files and then that content is used by the windows scripts.","title":"SMM Version App"},{"location":"dyn/mu_plus/UefiTestingPkg/AuditTests/PagingAudit/#dxepagingaudit","text":"","title":"DxePagingAudit"},{"location":"dyn/mu_plus/UefiTestingPkg/AuditTests/PagingAudit/#code-basics_1","text":"The Dxe version of paging audit drvier/shell app intends to inspect all 4 levels of page tables and their corresponding Read/Write/Executable permissions. The driver/shell app will collect necessary memrory information from platform enviroment, then iterate through each page entries and log them on to avaiable SimpleFileSystem. The collected *.dat files can be parsed using Windows\\PagingReportGenerator.py.","title":"Code Basics"},{"location":"dyn/mu_plus/UefiTestingPkg/AuditTests/PagingAudit/#dxe-driver","text":"The DXE Driver registers an event to be notified on Exit Boot Services (to change this, replace gEfiEventExitBootServicesGuid with a different event GUID), which will then trigger the paging information collection.","title":"DXE Driver"},{"location":"dyn/mu_plus/UefiTestingPkg/AuditTests/PagingAudit/#dxe-version-app","text":"The DXE version of UEFI shell application collects necessary system and memory information from DXE when invoked from Shell environment.","title":"DXE Version App"},{"location":"dyn/mu_plus/UefiTestingPkg/AuditTests/PagingAudit/#windows","text":"The Windows script will look at the *.DAT files, parse their content, check for errors and then insert the formatted data into the Html report file. This report file is then double-clickable by the end user/developer to review the posture of the SMM environment. The Results tab applies our suggested rules for SMM to show if the environment passes or fails. If it fails the filters on the data tab can be configured to show where the problem exists.","title":"Windows"},{"location":"dyn/mu_plus/UefiTestingPkg/AuditTests/PagingAudit/#usage-enabling-on-edk2-based-system","text":"First, for the SMM driver and app you need to add them to your DSC file for your project so they get compiled.","title":"Usage / Enabling on EDK2 based system"},{"location":"dyn/mu_plus/UefiTestingPkg/AuditTests/PagingAudit/#smm-paging-audit","text":"[Components.X64] UefiTestingPkg\\AuditTests\\PagingAudit\\SmmPagingAudit\\Smm\\SmmPagingAuditSmm.inf UefiTestingPkg\\AuditTests\\PagingAudit\\SmmPagingAudit\\App\\SmmPagingAuditApp.inf Next, you must add the SMM driver to a firmware volume in your FDF that can dispatch SMM modules. INF UefiTestingPkg\\AuditTests\\PagingAudit\\SmmPagingAudit\\Smm\\SmmPagingAuditSmm.inf Third, after compiling your new firmware you must: 1. flash that image on the system. 2. Copy the SmmPagingAuditApp.efi to a USB key Then, boot your system running the new firmware to the shell and run the app. The tool will create a set of *.dat files on the same USB key. On a Windows PC, run the Python script on the data found on your USB key. Finally, double-click the HTML output file and check your results.","title":"SMM Paging Audit"},{"location":"dyn/mu_plus/UefiTestingPkg/AuditTests/PagingAudit/#dxe-paging-audit","text":"","title":"DXE Paging Audit"},{"location":"dyn/mu_plus/UefiTestingPkg/AuditTests/PagingAudit/#dxepagingauditdxe","text":"Add the following entry to platform dsc file; [Components.X64] UefiTestingPkg\\AuditTests\\PagingAudit\\DxePagingAudit\\Dxe\\DxePagingAuditDxe.inf Add the driver to a firmware volume in your FDF that can dispatch it; INF UefiTestingPkg\\AuditTests\\PagingAudit\\DxePagingAudit\\Dxe\\DxePagingAuditDxe.inf After compiling your new firmware you must: a. flash that image on the system. Boot your system running the new firmware to the shell with a USB plugged in. If the USB disk is FS0:\\, the files should be in FS1:\\. Copy them to the flash drive: copy FS1:\\*.dat FS0:\\ On a Windows PC, run Windows\\PagingReportGenerator.py script with the data found on your USB key. Please use the following command for detailed script instruction: PagingReportGenerator.py -h Double-click the HTML output file and check your results;","title":"DxePagingAuditDxe"},{"location":"dyn/mu_plus/UefiTestingPkg/AuditTests/PagingAudit/#dxepagingauditapp","text":"Add the following entry to platform dsc file; [Components.X64] UefiTestingPkg\\AuditTests\\PagingAudit\\DxePagingAudit\\App\\DxePagingAuditApp.inf Compile the newly added application and copy DxePagingAuditApp.efi to a USB key; Boot your system to the shell with the USB plugged in. If the USB disk is FS0:\\, the files should be in FS1:\\. Copy them to the flash drive: FS0:\\ DxePagingAuditApp.efi copy FS1:\\*.dat FS0:\\ Follow step 5 - 6 from DxePagingAuditDxe section;","title":"DxePagingAuditApp"},{"location":"dyn/mu_plus/UefiTestingPkg/AuditTests/PagingAudit/#copyright","text":"Copyright \u00a9 2018 - 2019, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Copyright"},{"location":"dyn/mu_plus/UefiTestingPkg/FunctionalSystemTests/HeapGuardTest/Readme/","text":"Heap Guard Tests \u00b6 \ud83d\udd39 Copyright \u00b6 Copyright \u00a9 2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. About This Test \u00b6 This is set of tests to ensure that heap guard, stack guard, null pointer detection, and nx protections are working properly. It consists of: An SMM driver A Shell-based test app The Shell-based app may be built at any time and run from Shell. The app can use the SMM driver to preform SMM tests if the SMM driver is installed. It is not the intention of this test to include the driver in production systems. They should only be used for purpose-built test images.","title":"Heap Guard Test"},{"location":"dyn/mu_plus/UefiTestingPkg/FunctionalSystemTests/HeapGuardTest/Readme/#heap-guard-tests","text":"","title":"Heap Guard Tests"},{"location":"dyn/mu_plus/UefiTestingPkg/FunctionalSystemTests/HeapGuardTest/Readme/#copyright","text":"Copyright \u00a9 2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"&#x1F539; Copyright"},{"location":"dyn/mu_plus/UefiTestingPkg/FunctionalSystemTests/HeapGuardTest/Readme/#about-this-test","text":"This is set of tests to ensure that heap guard, stack guard, null pointer detection, and nx protections are working properly. It consists of: An SMM driver A Shell-based test app The Shell-based app may be built at any time and run from Shell. The app can use the SMM driver to preform SMM tests if the SMM driver is installed. It is not the intention of this test to include the driver in production systems. They should only be used for purpose-built test images.","title":"About This Test"},{"location":"dyn/mu_plus/UefiTestingPkg/FunctionalSystemTests/SmmPagingProtectionsTest/Readme/","text":"SMM Paging Protections Test \u00b6 \ud83d\udd39 Copyright \u00b6 Copyright \u00a9 2017, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. About This Test \u00b6 This is a [currently] small test to prove that certain SMM paging protections have been applied. It consists of: An SMM driver A DXE driver A Shell-based test app In order to use this test, the SMM and DXE drivers must be built and included in your FW image to be dispatched at boot time. The Shell-based app may be built at any time and run from Shell. The app will ask the DXE driver to pass a message to the SMM driver to invoke a particular test. It is not the intention of this test to include the two drivers in production systems. They should only be used for purpose-built test images.","title":"Smm Paging Protections Test"},{"location":"dyn/mu_plus/UefiTestingPkg/FunctionalSystemTests/SmmPagingProtectionsTest/Readme/#smm-paging-protections-test","text":"","title":"SMM Paging Protections Test"},{"location":"dyn/mu_plus/UefiTestingPkg/FunctionalSystemTests/SmmPagingProtectionsTest/Readme/#copyright","text":"Copyright \u00a9 2017, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"&#x1F539; Copyright"},{"location":"dyn/mu_plus/UefiTestingPkg/FunctionalSystemTests/SmmPagingProtectionsTest/Readme/#about-this-test","text":"This is a [currently] small test to prove that certain SMM paging protections have been applied. It consists of: An SMM driver A DXE driver A Shell-based test app In order to use this test, the SMM and DXE drivers must be built and included in your FW image to be dispatched at boot time. The Shell-based app may be built at any time and run from Shell. The app will ask the DXE driver to pass a message to the SMM driver to invoke a particular test. It is not the intention of this test to include the two drivers in production systems. They should only be used for purpose-built test images.","title":"About This Test"},{"location":"dyn/mu_plus/XmlSupportPkg/ReadMe/","text":"Xml Support Package \u00b6 About \u00b6 This package adds some limited XML support to the UEFI environment. Xml brings value in that there are numerous, robust, readily available parsing solutions in nearly every environment, language, and operating system. The UEFI support is limited in that it only supports the ASCII strings and does not support XSD, schema, namespaces, or other extensions to XML. XmlTreeLib \u00b6 The XmlTreeLib is the cornerstone of this package. It provides functions for: * Reading and parsing XML strings into an XML node/tree structure * Creating or altering xml nodes within a tree * Writing xml nodes/trees to ASCII string * Escaping and Un-Escaping strings XmlTreeQueryLib \u00b6 The XmlTreeQueryLib provides very basic and simple query functions allowing code to interact with the XmlTree to do things like: * Find the first child element node with a name equal to the parameter * Find the first attribute node of a given element with a name equal to the parameter UnitTestResultReportLib \u00b6 A UnitTestResultReportLib that formats the results in XML using the JUnit defined schema. This instance allows the UEFI Unit Test Framework to integrate results with existing tools and other frameworks. Testing \u00b6 There are UEFI shell application based unit tests for each library. These tests attempt to verify basic functionality of public interfaces. Check the UnitTests folder at the root of the package. Developer Notes \u00b6 These libraries have known limitations and have not been fully vetted for un-trusted input. If used in such a situation it is suggested to validate the input before leveraging the XML libraries. With that said the ability to use xml in UEFI has been invaluable for building features and tests that interact with code running in other environments. The parser has been tuned to fail fast and in invalid XML just return NULL. Copyright \u00b6 Copyright \u00a9 2017, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Xml Support Pkg"},{"location":"dyn/mu_plus/XmlSupportPkg/ReadMe/#xml-support-package","text":"","title":"Xml Support Package"},{"location":"dyn/mu_plus/XmlSupportPkg/ReadMe/#about","text":"This package adds some limited XML support to the UEFI environment. Xml brings value in that there are numerous, robust, readily available parsing solutions in nearly every environment, language, and operating system. The UEFI support is limited in that it only supports the ASCII strings and does not support XSD, schema, namespaces, or other extensions to XML.","title":"About"},{"location":"dyn/mu_plus/XmlSupportPkg/ReadMe/#xmltreelib","text":"The XmlTreeLib is the cornerstone of this package. It provides functions for: * Reading and parsing XML strings into an XML node/tree structure * Creating or altering xml nodes within a tree * Writing xml nodes/trees to ASCII string * Escaping and Un-Escaping strings","title":"XmlTreeLib"},{"location":"dyn/mu_plus/XmlSupportPkg/ReadMe/#xmltreequerylib","text":"The XmlTreeQueryLib provides very basic and simple query functions allowing code to interact with the XmlTree to do things like: * Find the first child element node with a name equal to the parameter * Find the first attribute node of a given element with a name equal to the parameter","title":"XmlTreeQueryLib"},{"location":"dyn/mu_plus/XmlSupportPkg/ReadMe/#unittestresultreportlib","text":"A UnitTestResultReportLib that formats the results in XML using the JUnit defined schema. This instance allows the UEFI Unit Test Framework to integrate results with existing tools and other frameworks.","title":"UnitTestResultReportLib"},{"location":"dyn/mu_plus/XmlSupportPkg/ReadMe/#testing","text":"There are UEFI shell application based unit tests for each library. These tests attempt to verify basic functionality of public interfaces. Check the UnitTests folder at the root of the package.","title":"Testing"},{"location":"dyn/mu_plus/XmlSupportPkg/ReadMe/#developer-notes","text":"These libraries have known limitations and have not been fully vetted for un-trusted input. If used in such a situation it is suggested to validate the input before leveraging the XML libraries. With that said the ability to use xml in UEFI has been invaluable for building features and tests that interact with code running in other environments. The parser has been tuned to fail fast and in invalid XML just return NULL.","title":"Developer Notes"},{"location":"dyn/mu_plus/XmlSupportPkg/ReadMe/#copyright","text":"Copyright \u00a9 2017, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Copyright"},{"location":"dyn/mu_silicon_arm_tiano/RepoDetails/","text":"Project Mu Basecore Repository \u00b6 Git Details Repository Url: https://github.com/Microsoft/mu_silicon_arm_tiano.git Branch: release/201808 Commit: 243d960c3dbe2440984e571c7fb31a5df7f48c96 Commit Date: 2019-04-03 15:09:15 -0700 This repository contains Project Mu code based on TianoCore edk2 code for ARM silicon features and ARM based platforms. More Info \u00b6 This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments. Issues \u00b6 Please open any issues in the Project Mu GitHub tracker. More Details Contributing Code or Docs \u00b6 Please follow the general Project Mu Pull Request process. More Details Code Requirements Doc Requirements Builds \u00b6 pip install --upgrade -r requirements.txt mu_build -c corebuild.mu.json Copyright & License \u00b6 Copyright \u00a9 2016-2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Upstream License (TianoCore) \u00b6 Copyright \u00a9 2004 - 2016, Intel Corporation. All rights reserved. Copyright \u00a9 2008 - 2010, Apple Inc. All rights reserved. Copyright \u00a9 2011 - 2015, ARM Limited. All rights reserved. Copyright \u00a9 2014 - 2015, Linaro Limited. All rights reserved. Copyright \u00a9 2013 - 2015, Red Hat, Inc. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"mu silicon arm tiano"},{"location":"dyn/mu_silicon_arm_tiano/RepoDetails/#project-mu-basecore-repository","text":"Git Details Repository Url: https://github.com/Microsoft/mu_silicon_arm_tiano.git Branch: release/201808 Commit: 243d960c3dbe2440984e571c7fb31a5df7f48c96 Commit Date: 2019-04-03 15:09:15 -0700 This repository contains Project Mu code based on TianoCore edk2 code for ARM silicon features and ARM based platforms.","title":"Project Mu Basecore Repository"},{"location":"dyn/mu_silicon_arm_tiano/RepoDetails/#more-info","text":"This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.","title":"More Info"},{"location":"dyn/mu_silicon_arm_tiano/RepoDetails/#issues","text":"Please open any issues in the Project Mu GitHub tracker. More Details","title":"Issues"},{"location":"dyn/mu_silicon_arm_tiano/RepoDetails/#contributing-code-or-docs","text":"Please follow the general Project Mu Pull Request process. More Details Code Requirements Doc Requirements","title":"Contributing Code or Docs"},{"location":"dyn/mu_silicon_arm_tiano/RepoDetails/#builds","text":"pip install --upgrade -r requirements.txt mu_build -c corebuild.mu.json","title":"Builds"},{"location":"dyn/mu_silicon_arm_tiano/RepoDetails/#copyright-license","text":"Copyright \u00a9 2016-2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Copyright &amp; License"},{"location":"dyn/mu_silicon_arm_tiano/RepoDetails/#upstream-license-tianocore","text":"Copyright \u00a9 2004 - 2016, Intel Corporation. All rights reserved. Copyright \u00a9 2008 - 2010, Apple Inc. All rights reserved. Copyright \u00a9 2011 - 2015, ARM Limited. All rights reserved. Copyright \u00a9 2014 - 2015, Linaro Limited. All rights reserved. Copyright \u00a9 2013 - 2015, Red Hat, Inc. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Upstream License (TianoCore)"},{"location":"dyn/mu_silicon_intel_tiano/Readme/","text":"MsUEFI \u00b6 Copyright \u00b6 Copyright \u00a9 2016, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. About \u00b6 Microsoft UEFI repo for open source contributions. This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.","title":"Readme"},{"location":"dyn/mu_silicon_intel_tiano/Readme/#msuefi","text":"","title":"MsUEFI"},{"location":"dyn/mu_silicon_intel_tiano/Readme/#copyright","text":"Copyright \u00a9 2016, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Copyright"},{"location":"dyn/mu_silicon_intel_tiano/Readme/#about","text":"Microsoft UEFI repo for open source contributions. This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.","title":"About"},{"location":"dyn/mu_silicon_intel_tiano/RepoDetails/","text":"Project Mu Basecore Repository \u00b6 Git Details Repository Url: https://github.com/Microsoft/mu_silicon_intel_tiano.git Branch: release/201808 Commit: 71a6d41d8d758f76b815d6994df09ef361e7bb0c Commit Date: 2018-12-20 10:50:13 -0800 This repository contains Project Mu code based on TianoCore edk2 code for Intel silicon features and Intel based platforms. More Info \u00b6 This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments. Issues \u00b6 Please open any issues in the Project Mu GitHub tracker. More Details Contributing Code or Docs \u00b6 Please follow the general Project Mu Pull Request process. More Details Code Requirements Doc Requirements Builds \u00b6 pip install --upgrade -r requirements.txt mu_build -c corebuild.mu.json Copyright & License \u00b6 Copyright \u00a9 2016-2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Upstream License (TianoCore) \u00b6 Copyright \u00a9 2004 - 2016, Intel Corporation. All rights reserved. Copyright \u00a9 2008 - 2010, Apple Inc. All rights reserved. Copyright \u00a9 2011 - 2015, ARM Limited. All rights reserved. Copyright \u00a9 2014 - 2015, Linaro Limited. All rights reserved. Copyright \u00a9 2013 - 2015, Red Hat, Inc. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Repo Details"},{"location":"dyn/mu_silicon_intel_tiano/RepoDetails/#project-mu-basecore-repository","text":"Git Details Repository Url: https://github.com/Microsoft/mu_silicon_intel_tiano.git Branch: release/201808 Commit: 71a6d41d8d758f76b815d6994df09ef361e7bb0c Commit Date: 2018-12-20 10:50:13 -0800 This repository contains Project Mu code based on TianoCore edk2 code for Intel silicon features and Intel based platforms.","title":"Project Mu Basecore Repository"},{"location":"dyn/mu_silicon_intel_tiano/RepoDetails/#more-info","text":"This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.","title":"More Info"},{"location":"dyn/mu_silicon_intel_tiano/RepoDetails/#issues","text":"Please open any issues in the Project Mu GitHub tracker. More Details","title":"Issues"},{"location":"dyn/mu_silicon_intel_tiano/RepoDetails/#contributing-code-or-docs","text":"Please follow the general Project Mu Pull Request process. More Details Code Requirements Doc Requirements","title":"Contributing Code or Docs"},{"location":"dyn/mu_silicon_intel_tiano/RepoDetails/#builds","text":"pip install --upgrade -r requirements.txt mu_build -c corebuild.mu.json","title":"Builds"},{"location":"dyn/mu_silicon_intel_tiano/RepoDetails/#copyright-license","text":"Copyright \u00a9 2016-2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Copyright &amp; License"},{"location":"dyn/mu_silicon_intel_tiano/RepoDetails/#upstream-license-tianocore","text":"Copyright \u00a9 2004 - 2016, Intel Corporation. All rights reserved. Copyright \u00a9 2008 - 2010, Apple Inc. All rights reserved. Copyright \u00a9 2011 - 2015, ARM Limited. All rights reserved. Copyright \u00a9 2014 - 2015, Linaro Limited. All rights reserved. Copyright \u00a9 2013 - 2015, Red Hat, Inc. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Upstream License (TianoCore)"},{"location":"dyn/mu_silicon_intel_tiano/IntelSiliconPkg/Feature/Capsule/MicrocodeCapsulePdb/Readme/","text":"How to generate Microcode FMP from Microcode PDB file \u00b6 1) Copy directory UefiCpuPkg/Feature/Capsule/MicrocodeUpdatePdb to <Your Platform Package>/MicrocodeUpdatePdb . 2) Uncomment and update FILE DATA statement in <Your Platform Package>/MicrocodeUpdatePdb/MicrocodeCapsulePdb.fdf with path to a Microcode PDB file. The PDB file can placed in <Your Platform Package>/MicrocodeUpdatePdb or any other path. FILE DATA = <your Microcode PDB file path> Uncomment and update PLATFORM_NAME , FLASH_DEFINITION , OUTPUT_DIRECTORY section in <Your Platform Package>/MicrocodeUpdatePdb/MicrocodeCapsulePdb.dsc with . PLATFORM_NAME = <Your Platform Package> FLASH_DEFINITION = <Your Platform Package>/MicrocodeCapsulePdb/MicrocodeCapsulePdb.fdf OUTPUT_DIRECTORY = Build/<Your Platform Package> 3) Use EDK II build tools to generate the Microcode FMP Capsule build -p <Your Platform Package>/MicrocodeCapsulePdb/MicrocodeCapsulePdb.dsc 4) The Microcode FMP Capsule is generated at $( WORKSPACE ) / $( OUTPUT_DIRECTORY ) / $( TARGET ) _ $( TOOL_CHAIN_TAG ) /FV/MicrocodeCapsule.Cap","title":"Microcode Capsule Pdb"},{"location":"dyn/mu_silicon_intel_tiano/IntelSiliconPkg/Feature/Capsule/MicrocodeCapsulePdb/Readme/#how-to-generate-microcode-fmp-from-microcode-pdb-file","text":"1) Copy directory UefiCpuPkg/Feature/Capsule/MicrocodeUpdatePdb to <Your Platform Package>/MicrocodeUpdatePdb . 2) Uncomment and update FILE DATA statement in <Your Platform Package>/MicrocodeUpdatePdb/MicrocodeCapsulePdb.fdf with path to a Microcode PDB file. The PDB file can placed in <Your Platform Package>/MicrocodeUpdatePdb or any other path. FILE DATA = <your Microcode PDB file path> Uncomment and update PLATFORM_NAME , FLASH_DEFINITION , OUTPUT_DIRECTORY section in <Your Platform Package>/MicrocodeUpdatePdb/MicrocodeCapsulePdb.dsc with . PLATFORM_NAME = <Your Platform Package> FLASH_DEFINITION = <Your Platform Package>/MicrocodeCapsulePdb/MicrocodeCapsulePdb.fdf OUTPUT_DIRECTORY = Build/<Your Platform Package> 3) Use EDK II build tools to generate the Microcode FMP Capsule build -p <Your Platform Package>/MicrocodeCapsulePdb/MicrocodeCapsulePdb.dsc 4) The Microcode FMP Capsule is generated at $( WORKSPACE ) / $( OUTPUT_DIRECTORY ) / $( TARGET ) _ $( TOOL_CHAIN_TAG ) /FV/MicrocodeCapsule.Cap","title":"How to generate Microcode FMP from Microcode PDB file"},{"location":"dyn/mu_silicon_intel_tiano/IntelSiliconPkg/Feature/Capsule/MicrocodeCapsuleTxt/Readme/","text":"How to generate Microcode FMP from Microcode TXT file \u00b6 1) Copy directory UefiCpuPkg/Feature/Capsule/MicrocodeUpdateTxt to <Your Platform Package>/MicrocodeUpdateTxt 2) Copy microcode TXT file to <Your Platform Package>/MicrocodeUpdateTxt/Microcode 3) Uncomment and update statement in [Sources] section of <Your Platform Package>/MicrocodeUpdateTxt/Microcode/Microcode.inf with name of Microcode TXT file copied in previous step. [Sources] <Your Microcode TXT file> Uncomment and update FILE DATA statement in <Your Platform Package>/MicrocodeUpdateTxt/MicrocodeCapsuleTxt.fdf with path to a Microcode MCB file. The MCB file is placed in $( WORKSPACE ) / $( OUTPUT_DIRECTORY ) / $( TARGET ) _ $( TOOL_CHAIN_TAG ) /IA32/<Your Platform Package>/MicrocodeUpdateTxt/Microcode/Microcode/OUTPUT/ . FILE DATA = <your Microcode MCB file path> Uncomment and update PLATFORM_NAME , FLASH_DEFINITION , OUTPUT_DIRECTORY section in <Your Platform Package>/MicrocodeUpdateTxt/MicrocodeCapsuleTxt.dsc with . PLATFORM_NAME = <Your Platform Package> FLASH_DEFINITION = <Your Platform Package>/MicrocodeCapsuleTxt/MicrocodeCapsuleTxt.fdf OUTPUT_DIRECTORY = Build/<Your Platform Package> Uncomment and update statement in Components section of <Your Platform Package>/MicrocodeUpdateTxt/MicrocodeCapsuleTxt.dsc with path to a Microcode INF file. [Components] <Your Microcode INF file> 4) Use EDK II build tools to generate the Microcode FMP Capsule build -p <Your Platform Package>/MicrocodeCapsuleTxt/MicrocodeCapsuleTxt.dsc 5) The generated Microcode FMP Capsule is found at $( WORKSPACE ) / $( OUTPUT_DIRECTORY ) / $( TARGET ) _ $( TOOL_CHAIN_TAG ) /FV/MicrocodeCapsule.Cap","title":"Microcode Capsule Txt"},{"location":"dyn/mu_silicon_intel_tiano/IntelSiliconPkg/Feature/Capsule/MicrocodeCapsuleTxt/Readme/#how-to-generate-microcode-fmp-from-microcode-txt-file","text":"1) Copy directory UefiCpuPkg/Feature/Capsule/MicrocodeUpdateTxt to <Your Platform Package>/MicrocodeUpdateTxt 2) Copy microcode TXT file to <Your Platform Package>/MicrocodeUpdateTxt/Microcode 3) Uncomment and update statement in [Sources] section of <Your Platform Package>/MicrocodeUpdateTxt/Microcode/Microcode.inf with name of Microcode TXT file copied in previous step. [Sources] <Your Microcode TXT file> Uncomment and update FILE DATA statement in <Your Platform Package>/MicrocodeUpdateTxt/MicrocodeCapsuleTxt.fdf with path to a Microcode MCB file. The MCB file is placed in $( WORKSPACE ) / $( OUTPUT_DIRECTORY ) / $( TARGET ) _ $( TOOL_CHAIN_TAG ) /IA32/<Your Platform Package>/MicrocodeUpdateTxt/Microcode/Microcode/OUTPUT/ . FILE DATA = <your Microcode MCB file path> Uncomment and update PLATFORM_NAME , FLASH_DEFINITION , OUTPUT_DIRECTORY section in <Your Platform Package>/MicrocodeUpdateTxt/MicrocodeCapsuleTxt.dsc with . PLATFORM_NAME = <Your Platform Package> FLASH_DEFINITION = <Your Platform Package>/MicrocodeCapsuleTxt/MicrocodeCapsuleTxt.fdf OUTPUT_DIRECTORY = Build/<Your Platform Package> Uncomment and update statement in Components section of <Your Platform Package>/MicrocodeUpdateTxt/MicrocodeCapsuleTxt.dsc with path to a Microcode INF file. [Components] <Your Microcode INF file> 4) Use EDK II build tools to generate the Microcode FMP Capsule build -p <Your Platform Package>/MicrocodeCapsuleTxt/MicrocodeCapsuleTxt.dsc 5) The generated Microcode FMP Capsule is found at $( WORKSPACE ) / $( OUTPUT_DIRECTORY ) / $( TARGET ) _ $( TOOL_CHAIN_TAG ) /FV/MicrocodeCapsule.Cap","title":"How to generate Microcode FMP from Microcode TXT file"},{"location":"dyn/mu_tiano_plus/RepoDetails/","text":"Project Mu Tiano Plus \u00b6 Git Details Repository Url: https://github.com/Microsoft/mu_tiano_plus.git Branch: release/201808 Commit: 8b39fa1254e73576f0a4aca96c910e46d3ac2ea4 Commit Date: 2019-02-01 19:45:36 +0000 About \u00b6 This repo contains Project Mu common code that should only take Basecore as a dependency and be applicable to almost any FW project. The modules in this repo were taken with minimal modification from TianoCore. For full documentation, please see the Project Mu Docs site . This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments. Copyright \u00b6 Copyright \u00a9 2016-2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Repo Details"},{"location":"dyn/mu_tiano_plus/RepoDetails/#project-mu-tiano-plus","text":"Git Details Repository Url: https://github.com/Microsoft/mu_tiano_plus.git Branch: release/201808 Commit: 8b39fa1254e73576f0a4aca96c910e46d3ac2ea4 Commit Date: 2019-02-01 19:45:36 +0000","title":"Project Mu Tiano Plus"},{"location":"dyn/mu_tiano_plus/RepoDetails/#about","text":"This repo contains Project Mu common code that should only take Basecore as a dependency and be applicable to almost any FW project. The modules in this repo were taken with minimal modification from TianoCore. For full documentation, please see the Project Mu Docs site . This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.","title":"About"},{"location":"dyn/mu_tiano_plus/RepoDetails/#copyright","text":"Copyright \u00a9 2016-2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Copyright"},{"location":"dyn/mu_tiano_plus/CryptoPkg/Library/OpensslLib/openssl/fuzz/","text":"I Can Haz Fuzz? \u00b6 LibFuzzer \u00b6 Or, how to fuzz OpenSSL with libfuzzer . Starting from a vanilla+OpenSSH server Ubuntu install. Use Chrome's handy recent build of clang. Older versions may also work. $ sudo apt-get install git $ mkdir git-work $ git clone https://chromium.googlesource.com/chromium/src/tools/clang $ clang/scripts/update.py You may want to git pull and re-run the update from time to time. Update your path: $ PATH = ~/third_party/llvm-build/Release+Asserts/bin/: $PATH Get and build libFuzzer (there is a git mirror at https://github.com/llvm-mirror/llvm/tree/master/lib/Fuzzer if you prefer): $ cd $ sudo apt-get install subversion $ mkdir svn-work $ cd svn-work $ svn co http://llvm.org/svn/llvm-project/llvm/trunk/lib/Fuzzer $ cd Fuzzer $ clang++ -c -g -O2 -std = c++11 *.cpp $ ar r libFuzzer.a *.o $ ranlib libFuzzer.a Configure for fuzzing: $ CC = clang ./config enable-fuzz-libfuzzer \\ --with-fuzzer-include = ../../svn-work/Fuzzer \\ --with-fuzzer-lib = ../../svn-work/Fuzzer/libFuzzer \\ -DPEDANTIC enable-asan enable-ubsan no-shared $ sudo apt-get install make $ LDCMD = clang++ make -j $ fuzz/helper.py $FUZZER Where $FUZZER is one of the executables in fuzz/ . If you get a crash, you should find a corresponding input file in fuzz/corpora/$FUZZER-crash/ . You can reproduce the crash with $ fuzz/ $FUZZER <crashfile> AFL \u00b6 Configure for fuzzing: $ sudo apt-get install afl-clang $ CC = afl-clang-fast ./config enable-fuzz-afl no-shared $ make Run one of the fuzzers: $ afl-fuzz -i fuzz/corpora/ $FUZZER -o fuzz/corpora/ $FUZZER /out fuzz/ $FUZZER Where $FUZZER is one of the executables in fuzz/ .","title":"fuzz"},{"location":"dyn/mu_tiano_plus/CryptoPkg/Library/OpensslLib/openssl/fuzz/#i-can-haz-fuzz","text":"","title":"I Can Haz Fuzz?"},{"location":"dyn/mu_tiano_plus/CryptoPkg/Library/OpensslLib/openssl/fuzz/#libfuzzer","text":"Or, how to fuzz OpenSSL with libfuzzer . Starting from a vanilla+OpenSSH server Ubuntu install. Use Chrome's handy recent build of clang. Older versions may also work. $ sudo apt-get install git $ mkdir git-work $ git clone https://chromium.googlesource.com/chromium/src/tools/clang $ clang/scripts/update.py You may want to git pull and re-run the update from time to time. Update your path: $ PATH = ~/third_party/llvm-build/Release+Asserts/bin/: $PATH Get and build libFuzzer (there is a git mirror at https://github.com/llvm-mirror/llvm/tree/master/lib/Fuzzer if you prefer): $ cd $ sudo apt-get install subversion $ mkdir svn-work $ cd svn-work $ svn co http://llvm.org/svn/llvm-project/llvm/trunk/lib/Fuzzer $ cd Fuzzer $ clang++ -c -g -O2 -std = c++11 *.cpp $ ar r libFuzzer.a *.o $ ranlib libFuzzer.a Configure for fuzzing: $ CC = clang ./config enable-fuzz-libfuzzer \\ --with-fuzzer-include = ../../svn-work/Fuzzer \\ --with-fuzzer-lib = ../../svn-work/Fuzzer/libFuzzer \\ -DPEDANTIC enable-asan enable-ubsan no-shared $ sudo apt-get install make $ LDCMD = clang++ make -j $ fuzz/helper.py $FUZZER Where $FUZZER is one of the executables in fuzz/ . If you get a crash, you should find a corresponding input file in fuzz/corpora/$FUZZER-crash/ . You can reproduce the crash with $ fuzz/ $FUZZER <crashfile>","title":"LibFuzzer"},{"location":"dyn/mu_tiano_plus/CryptoPkg/Library/OpensslLib/openssl/fuzz/#afl","text":"Configure for fuzzing: $ sudo apt-get install afl-clang $ CC = afl-clang-fast ./config enable-fuzz-afl no-shared $ make Run one of the fuzzers: $ afl-fuzz -i fuzz/corpora/ $FUZZER -o fuzz/corpora/ $FUZZER /out fuzz/ $FUZZER Where $FUZZER is one of the executables in fuzz/ .","title":"AFL"},{"location":"dyn/mu_tiano_plus/CryptoPkg/Library/OpensslLib/openssl/test/README.ssltest/","text":"SSL tests \u00b6 SSL testcases are configured in the ssl-tests directory. Each ssl_*.conf.in file contains a number of test configurations. These files are used to generate testcases in the OpenSSL CONF format. The precise test output can be dependent on the library configuration. The test harness generates the output files on the fly. However, for verification, we also include checked-in configuration outputs corresponding to the default configuration. These testcases live in test/ssl-tests/*.conf files. For more details, see ssl-tests/01-simple.conf.in for an example. Configuring the test \u00b6 First, give your test a name. The names do not have to be unique. An example test input looks like this: { name => \"test-default\", server => { \"CipherString\" => \"DEFAULT\" }, client => { \"CipherString\" => \"DEFAULT\" }, test => { \"ExpectedResult\" => \"Success\" }, } The test section supports the following options Test mode \u00b6 Method - the method to test. One of DTLS or TLS. HandshakeMode - which handshake flavour to test: Simple - plain handshake (default) Resume - test resumption RenegotiateServer - test server initiated renegotiation RenegotiateClient - test client initiated renegotiation When HandshakeMode is Resume or Renegotiate, the original handshake is expected to succeed. All configured test expectations are verified against the second handshake. ApplicationData - amount of application data bytes to send (integer, defaults to 256 bytes). Applies to both client and server. Application data is sent in 64kB chunks (but limited by MaxFragmentSize and available parallelization, see below). MaxFragmentSize - maximum send fragment size (integer, defaults to 512 in tests - see SSL_CTX_set_max_send_fragment for documentation). Applies to both client and server. Lowering the fragment size will split handshake and application data up between more SSL_write calls, thus allowing to exercise different code paths. In particular, if the buffer size (64kB) is at least four times as large as the maximum fragment, interleaved multi-buffer crypto implementations may be used on some platforms. Test expectations \u00b6 ExpectedResult - expected handshake outcome. One of Success - handshake success ServerFail - serverside handshake failure ClientFail - clientside handshake failure InternalError - some other error ExpectedClientAlert, ExpectedServerAlert - expected alert. See ssl_test_ctx.c for known values. Note: the expected alert is currently matched against the last received alert (i.e., a fatal alert or a close_notify ). Warning alert expectations are not yet supported. (A warning alert will not be correctly matched, if followed by a close_notify or another alert.) ExpectedProtocol - expected negotiated protocol. One of SSLv3, TLSv1, TLSv1.1, TLSv1.2. SessionTicketExpected - whether or not a session ticket is expected Ignore - do not check for a session ticket (default) Yes - a session ticket is expected No - a session ticket is not expected ResumptionExpected - whether or not resumption is expected (Resume mode only) Yes - resumed handshake No - full handshake (default) ExpectedNPNProtocol, ExpectedALPNProtocol - NPN and ALPN expectations. ExpectedTmpKeyType - the expected algorithm or curve of server temp key Configuring the client and server \u00b6 The client and server configurations can be any valid SSL_CTX configurations. For details, see the manpages for SSL_CONF_cmd . Give your configurations as a dictionary of CONF commands, e.g. server => { \"CipherString\" => \"DEFAULT\", \"MinProtocol\" => \"TLSv1\", } The following sections may optionally be defined: server2 - this section configures a secondary context that is selected via the ServerName test option. This context is used whenever a ServerNameCallback is specified. If the server2 section is not present, then the configuration matches server. resume_server - this section configures the client to resume its session against a different server. This context is used whenever HandshakeMode is Resume. If the resume_server section is not present, then the configuration matches server. resume_client - this section configures the client to resume its session with a different configuration. In practice this may occur when, for example, upgraded clients reuse sessions persisted on disk. This context is used whenever HandshakeMode is Resume. If the resume_client section is not present, then the configuration matches client. Configuring callbacks and additional options \u00b6 Additional handshake settings can be configured in the extra section of each client and server: client => { \"CipherString\" => \"DEFAULT\", extra => { \"ServerName\" => \"server2\", } } Supported client-side options \u00b6 ClientVerifyCallback - the client's custom certificate verify callback. Used to test callback behaviour. One of None - no custom callback (default) AcceptAll - accepts all certificates. RejectAll - rejects all certificates. ServerName - the server the client should attempt to connect to. One of None - do not use SNI (default) server1 - the initial context server2 - the secondary context invalid - an unknown context CTValidation - Certificate Transparency validation strategy. One of None - no validation (default) Permissive - SSL_CT_VALIDATION_PERMISSIVE Strict - SSL_CT_VALIDATION_STRICT Supported server-side options \u00b6 ServerNameCallback - the SNI switching callback to use None - no callback (default) IgnoreMismatch - continue the handshake on SNI mismatch RejectMismatch - abort the handshake on SNI mismatch BrokenSessionTicket - a special test case where the session ticket callback does not initialize crypto. No (default) Yes Mutually supported options \u00b6 NPNProtocols, ALPNProtocols - NPN and ALPN settings. Server and client protocols can be specified as a comma-separated list, and a callback with the recommended behaviour will be installed automatically. Default server and client configurations \u00b6 The default server certificate and CA files are added to the configurations automatically. Server certificate verification is requested by default. You can override these options by redefining them: client => { \"VerifyCAFile\" => \"/path/to/custom/file\" } or by deleting them client => { \"VerifyCAFile\" => undef } Adding a test to the test harness \u00b6 Add a new test configuration to test/ssl-tests , following the examples of existing *.conf.in files (for example, 01-simple.conf.in ). Generate the generated *.conf test input file. You can do so by running generate_ssl_tests.pl : $ ./config $ cd test $ TOP = .. perl -I testlib/ generate_ssl_tests.pl ssl-tests/my.conf.in \\ > ssl-tests/my.conf where my.conf.in is your test input file. For example, to generate the test cases in ssl-tests/01-simple.conf.in , do $ TOP = .. perl -I testlib/ generate_ssl_tests.pl ssl-tests/01-simple.conf.in > ssl-tests/01-simple.conf Alternatively (hackish but simple), you can comment out unlink glob $tmp_file; in test/recipes/80-test_ssl_new.t and run $ make TESTS = test_ssl_new test This will save the generated output in a *.tmp file in the build directory. Update the number of tests planned in test/recipes/80-test_ssl_new.t . If the test suite has any skip conditions, update those too (see test/recipes/80-test_ssl_new.t for details). Running the tests with the test harness \u00b6 HARNESS_VERBOSE=yes make TESTS=test_ssl_new test Running a test manually \u00b6 These steps are only needed during development. End users should run make test or follow the instructions above to run the SSL test suite. To run an SSL test manually from the command line, the TEST_CERTS_DIR environment variable to point to the location of the certs. E.g., from the root OpenSSL directory, do $ CTLOG_FILE = test/ct/log_list.conf TEST_CERTS_DIR = test/certs test/ssl_test \\ test/ssl-tests/01-simple.conf or for shared builds $ CTLOG_FILE = test/ct/log_list.conf TEST_CERTS_DIR = test/certs \\ util/shlib_wrap.sh test/ssl_test test/ssl-tests/01-simple.conf Note that the test expectations sometimes depend on the Configure settings. For example, the negotiated protocol depends on the set of available (enabled) protocols: a build with enable-ssl3 has different test expectations than a build with no-ssl3 . The Perl test harness automatically generates expected outputs, so users who just run make test do not need any extra steps. However, when running a test manually, keep in mind that the repository version of the generated test/ssl-tests/*.conf correspond to expected outputs in with the default Configure options. To run ssl_test manually from the command line in a build with a different configuration, you may need to generate the right *.conf file from the *.conf.in input first.","title":"test"},{"location":"dyn/mu_tiano_plus/CryptoPkg/Library/OpensslLib/openssl/test/README.ssltest/#ssl-tests","text":"SSL testcases are configured in the ssl-tests directory. Each ssl_*.conf.in file contains a number of test configurations. These files are used to generate testcases in the OpenSSL CONF format. The precise test output can be dependent on the library configuration. The test harness generates the output files on the fly. However, for verification, we also include checked-in configuration outputs corresponding to the default configuration. These testcases live in test/ssl-tests/*.conf files. For more details, see ssl-tests/01-simple.conf.in for an example.","title":"SSL tests"},{"location":"dyn/mu_tiano_plus/CryptoPkg/Library/OpensslLib/openssl/test/README.ssltest/#configuring-the-test","text":"First, give your test a name. The names do not have to be unique. An example test input looks like this: { name => \"test-default\", server => { \"CipherString\" => \"DEFAULT\" }, client => { \"CipherString\" => \"DEFAULT\" }, test => { \"ExpectedResult\" => \"Success\" }, } The test section supports the following options","title":"Configuring the test"},{"location":"dyn/mu_tiano_plus/CryptoPkg/Library/OpensslLib/openssl/test/README.ssltest/#test-mode","text":"Method - the method to test. One of DTLS or TLS. HandshakeMode - which handshake flavour to test: Simple - plain handshake (default) Resume - test resumption RenegotiateServer - test server initiated renegotiation RenegotiateClient - test client initiated renegotiation When HandshakeMode is Resume or Renegotiate, the original handshake is expected to succeed. All configured test expectations are verified against the second handshake. ApplicationData - amount of application data bytes to send (integer, defaults to 256 bytes). Applies to both client and server. Application data is sent in 64kB chunks (but limited by MaxFragmentSize and available parallelization, see below). MaxFragmentSize - maximum send fragment size (integer, defaults to 512 in tests - see SSL_CTX_set_max_send_fragment for documentation). Applies to both client and server. Lowering the fragment size will split handshake and application data up between more SSL_write calls, thus allowing to exercise different code paths. In particular, if the buffer size (64kB) is at least four times as large as the maximum fragment, interleaved multi-buffer crypto implementations may be used on some platforms.","title":"Test mode"},{"location":"dyn/mu_tiano_plus/CryptoPkg/Library/OpensslLib/openssl/test/README.ssltest/#test-expectations","text":"ExpectedResult - expected handshake outcome. One of Success - handshake success ServerFail - serverside handshake failure ClientFail - clientside handshake failure InternalError - some other error ExpectedClientAlert, ExpectedServerAlert - expected alert. See ssl_test_ctx.c for known values. Note: the expected alert is currently matched against the last received alert (i.e., a fatal alert or a close_notify ). Warning alert expectations are not yet supported. (A warning alert will not be correctly matched, if followed by a close_notify or another alert.) ExpectedProtocol - expected negotiated protocol. One of SSLv3, TLSv1, TLSv1.1, TLSv1.2. SessionTicketExpected - whether or not a session ticket is expected Ignore - do not check for a session ticket (default) Yes - a session ticket is expected No - a session ticket is not expected ResumptionExpected - whether or not resumption is expected (Resume mode only) Yes - resumed handshake No - full handshake (default) ExpectedNPNProtocol, ExpectedALPNProtocol - NPN and ALPN expectations. ExpectedTmpKeyType - the expected algorithm or curve of server temp key","title":"Test expectations"},{"location":"dyn/mu_tiano_plus/CryptoPkg/Library/OpensslLib/openssl/test/README.ssltest/#configuring-the-client-and-server","text":"The client and server configurations can be any valid SSL_CTX configurations. For details, see the manpages for SSL_CONF_cmd . Give your configurations as a dictionary of CONF commands, e.g. server => { \"CipherString\" => \"DEFAULT\", \"MinProtocol\" => \"TLSv1\", } The following sections may optionally be defined: server2 - this section configures a secondary context that is selected via the ServerName test option. This context is used whenever a ServerNameCallback is specified. If the server2 section is not present, then the configuration matches server. resume_server - this section configures the client to resume its session against a different server. This context is used whenever HandshakeMode is Resume. If the resume_server section is not present, then the configuration matches server. resume_client - this section configures the client to resume its session with a different configuration. In practice this may occur when, for example, upgraded clients reuse sessions persisted on disk. This context is used whenever HandshakeMode is Resume. If the resume_client section is not present, then the configuration matches client.","title":"Configuring the client and server"},{"location":"dyn/mu_tiano_plus/CryptoPkg/Library/OpensslLib/openssl/test/README.ssltest/#configuring-callbacks-and-additional-options","text":"Additional handshake settings can be configured in the extra section of each client and server: client => { \"CipherString\" => \"DEFAULT\", extra => { \"ServerName\" => \"server2\", } }","title":"Configuring callbacks and additional options"},{"location":"dyn/mu_tiano_plus/CryptoPkg/Library/OpensslLib/openssl/test/README.ssltest/#supported-client-side-options","text":"ClientVerifyCallback - the client's custom certificate verify callback. Used to test callback behaviour. One of None - no custom callback (default) AcceptAll - accepts all certificates. RejectAll - rejects all certificates. ServerName - the server the client should attempt to connect to. One of None - do not use SNI (default) server1 - the initial context server2 - the secondary context invalid - an unknown context CTValidation - Certificate Transparency validation strategy. One of None - no validation (default) Permissive - SSL_CT_VALIDATION_PERMISSIVE Strict - SSL_CT_VALIDATION_STRICT","title":"Supported client-side options"},{"location":"dyn/mu_tiano_plus/CryptoPkg/Library/OpensslLib/openssl/test/README.ssltest/#supported-server-side-options","text":"ServerNameCallback - the SNI switching callback to use None - no callback (default) IgnoreMismatch - continue the handshake on SNI mismatch RejectMismatch - abort the handshake on SNI mismatch BrokenSessionTicket - a special test case where the session ticket callback does not initialize crypto. No (default) Yes","title":"Supported server-side options"},{"location":"dyn/mu_tiano_plus/CryptoPkg/Library/OpensslLib/openssl/test/README.ssltest/#mutually-supported-options","text":"NPNProtocols, ALPNProtocols - NPN and ALPN settings. Server and client protocols can be specified as a comma-separated list, and a callback with the recommended behaviour will be installed automatically.","title":"Mutually supported options"},{"location":"dyn/mu_tiano_plus/CryptoPkg/Library/OpensslLib/openssl/test/README.ssltest/#default-server-and-client-configurations","text":"The default server certificate and CA files are added to the configurations automatically. Server certificate verification is requested by default. You can override these options by redefining them: client => { \"VerifyCAFile\" => \"/path/to/custom/file\" } or by deleting them client => { \"VerifyCAFile\" => undef }","title":"Default server and client configurations"},{"location":"dyn/mu_tiano_plus/CryptoPkg/Library/OpensslLib/openssl/test/README.ssltest/#adding-a-test-to-the-test-harness","text":"Add a new test configuration to test/ssl-tests , following the examples of existing *.conf.in files (for example, 01-simple.conf.in ). Generate the generated *.conf test input file. You can do so by running generate_ssl_tests.pl : $ ./config $ cd test $ TOP = .. perl -I testlib/ generate_ssl_tests.pl ssl-tests/my.conf.in \\ > ssl-tests/my.conf where my.conf.in is your test input file. For example, to generate the test cases in ssl-tests/01-simple.conf.in , do $ TOP = .. perl -I testlib/ generate_ssl_tests.pl ssl-tests/01-simple.conf.in > ssl-tests/01-simple.conf Alternatively (hackish but simple), you can comment out unlink glob $tmp_file; in test/recipes/80-test_ssl_new.t and run $ make TESTS = test_ssl_new test This will save the generated output in a *.tmp file in the build directory. Update the number of tests planned in test/recipes/80-test_ssl_new.t . If the test suite has any skip conditions, update those too (see test/recipes/80-test_ssl_new.t for details).","title":"Adding a test to the test harness"},{"location":"dyn/mu_tiano_plus/CryptoPkg/Library/OpensslLib/openssl/test/README.ssltest/#running-the-tests-with-the-test-harness","text":"HARNESS_VERBOSE=yes make TESTS=test_ssl_new test","title":"Running the tests with the test harness"},{"location":"dyn/mu_tiano_plus/CryptoPkg/Library/OpensslLib/openssl/test/README.ssltest/#running-a-test-manually","text":"These steps are only needed during development. End users should run make test or follow the instructions above to run the SSL test suite. To run an SSL test manually from the command line, the TEST_CERTS_DIR environment variable to point to the location of the certs. E.g., from the root OpenSSL directory, do $ CTLOG_FILE = test/ct/log_list.conf TEST_CERTS_DIR = test/certs test/ssl_test \\ test/ssl-tests/01-simple.conf or for shared builds $ CTLOG_FILE = test/ct/log_list.conf TEST_CERTS_DIR = test/certs \\ util/shlib_wrap.sh test/ssl_test test/ssl-tests/01-simple.conf Note that the test expectations sometimes depend on the Configure settings. For example, the negotiated protocol depends on the set of available (enabled) protocols: a build with enable-ssl3 has different test expectations than a build with no-ssl3 . The Perl test harness automatically generates expected outputs, so users who just run make test do not need any extra steps. However, when running a test manually, keep in mind that the repository version of the generated test/ssl-tests/*.conf correspond to expected outputs in with the default Configure options. To run ssl_test manually from the command line in a build with a different configuration, you may need to generate the right *.conf file from the *.conf.in input first.","title":"Running a test manually"},{"location":"dyn/mu_tiano_plus/CryptoPkg/UnitTests/VerifyPkcs7EkuUnitTestApp/readme/","text":"Verify Pkcs7 Enhanced Key Usage Unit Test App \u00b6 Testing the verification of Enhanced Key Usages in PKCS7 formatted signatures. About \u00b6 This application tests the VerifyEKUsInPkcs7Signature() function in BaseCryptLib. VerifyPkcs7EkuUnitTestApp \u00b6 This application consumes the UnitTestLib and implements various test cases for the verification of Enhanced Key Usages (EKUs) contained in the end-entity (leaf) signing certificate. TestEKUCerts folder \u00b6 This folder contains information on how the test certificate chain and various leaf certificates were created. It also contains all the files required, and the certificates used in the unit-tests. ChainCreationInstructions.txt \u00b6 This file contains the instructions for creating your own chain, and how to use certreq.exe to create chains. INF files These INF files specify the properties of the certificate to be created. PFX files These Personal Information Exchange (PFX) files contain the certificate, and private key associated with the certificate. The passwords for these files are specified in ChainCreationInstructions.txt. P7B files These are the detached PKCS7 formatted test signatures used in the unit-tests. CER files These are the certificates that were created. SignFirmwareWithEKUs.cmd This script calls signtool.exe to sign a file with various leaf certificates. Note signtool.exe must be in your PATH. Use the Visual Studio command line with the Windows Software Development kit installed. To run SignFirmwareWithEKUs.cmd, install the PFX files. The passwords are in the ChainCreationInstructions.txt file. Copyright \u00b6 Copyright \u00a9 2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Verify Pkcs7Eku Unit Test App"},{"location":"dyn/mu_tiano_plus/CryptoPkg/UnitTests/VerifyPkcs7EkuUnitTestApp/readme/#verify-pkcs7-enhanced-key-usage-unit-test-app","text":"Testing the verification of Enhanced Key Usages in PKCS7 formatted signatures.","title":"Verify Pkcs7 Enhanced Key Usage Unit Test App"},{"location":"dyn/mu_tiano_plus/CryptoPkg/UnitTests/VerifyPkcs7EkuUnitTestApp/readme/#about","text":"This application tests the VerifyEKUsInPkcs7Signature() function in BaseCryptLib.","title":"About"},{"location":"dyn/mu_tiano_plus/CryptoPkg/UnitTests/VerifyPkcs7EkuUnitTestApp/readme/#verifypkcs7ekuunittestapp","text":"This application consumes the UnitTestLib and implements various test cases for the verification of Enhanced Key Usages (EKUs) contained in the end-entity (leaf) signing certificate.","title":"VerifyPkcs7EkuUnitTestApp"},{"location":"dyn/mu_tiano_plus/CryptoPkg/UnitTests/VerifyPkcs7EkuUnitTestApp/readme/#testekucerts-folder","text":"This folder contains information on how the test certificate chain and various leaf certificates were created. It also contains all the files required, and the certificates used in the unit-tests.","title":"TestEKUCerts folder"},{"location":"dyn/mu_tiano_plus/CryptoPkg/UnitTests/VerifyPkcs7EkuUnitTestApp/readme/#chaincreationinstructionstxt","text":"This file contains the instructions for creating your own chain, and how to use certreq.exe to create chains. INF files These INF files specify the properties of the certificate to be created. PFX files These Personal Information Exchange (PFX) files contain the certificate, and private key associated with the certificate. The passwords for these files are specified in ChainCreationInstructions.txt. P7B files These are the detached PKCS7 formatted test signatures used in the unit-tests. CER files These are the certificates that were created. SignFirmwareWithEKUs.cmd This script calls signtool.exe to sign a file with various leaf certificates. Note signtool.exe must be in your PATH. Use the Visual Studio command line with the Windows Software Development kit installed. To run SignFirmwareWithEKUs.cmd, install the PFX files. The passwords are in the ChainCreationInstructions.txt file.","title":"ChainCreationInstructions.txt"},{"location":"dyn/mu_tiano_plus/CryptoPkg/UnitTests/VerifyPkcs7EkuUnitTestApp/readme/#copyright","text":"Copyright \u00a9 2018, Microsoft Corporation All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"Copyright"}]}